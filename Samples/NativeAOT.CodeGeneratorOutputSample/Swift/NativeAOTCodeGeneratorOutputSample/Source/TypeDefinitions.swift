// Number of generated types: 1533
// Number of generated members: 4431

// MARK: - BEGIN Header
import Foundation

// MARK: - END Header

// MARK: - BEGIN Utils
public class DNObject {
    let __handle: UnsafeMutableRawPointer

    public var typeName: String { "" }
    public var fullTypeName: String { "" }

    required init(handle: UnsafeMutableRawPointer) {
		self.__handle = handle
	}

	convenience init?(handle: UnsafeMutableRawPointer?) {
		guard let handle else { return nil }

		self.init(handle: handle)
	}

    // TODO: Should be non-optional
    public class func typeOf() -> System_Type? /* System.Type */ {
        fatalError("Override in subclass")
    }

    internal func destroy() {
        // Override in subclass
    }

    deinit {
		destroy()
	}
}

public class DNError: LocalizedError {
    public let exception: System_Exception
    
    public init(exception: System_Exception) {
        self.exception = exception
    }
    
    public func stackTrace() -> String? {
        do {
            return try String(dotNETString: exception.getStackTrace())
        } catch {
            return nil
        }
    }
    
    public var errorDescription: String? {
        do {
            return try String(dotNETString: exception.getMessage())
        } catch {
            return nil
        }
    }
}

public extension System_Exception {
    var error: DNError {
        return DNError(exception: self)
    }
}

public extension String {
	func dotNETString() -> System_String {
		guard let dotNetStringHandle = DNStringFromC(self) else {
			fatalError("Failed to convert Swift String to .NET String")
		}
		
		return System_String(handle: dotNetStringHandle)
	}
	
	init?(dotNETString: System_String?) {
		guard let dotNETString else { return nil }
		
		self.init(dotNETString: dotNETString)
	}
	
	init(dotNETString: System_String) {
		guard let cString = DNStringToC(dotNETString.__handle) else {
			fatalError("Failed to convert .NET String to C String")
		}
		
		self.init(cString: cString)
		
		cString.deallocate()
	}
}

final class NativeBox<T> {
    let value: T
    
    init(value: T) {
        self.value = value
    }
    
    convenience init(_ value: T) {
        self.init(value: value)
    }
    
//    deinit {
//        print("Deinitializing \(Self.self)")
//    }
}

// MARK: - To Pointer
extension NativeBox {
    func unretainedPointer() -> UnsafeRawPointer {
        pointer(retained: false)
    }
    
    func retainedPointer() -> UnsafeRawPointer {
        pointer(retained: true)
    }
}

private extension NativeBox {
    func pointer(retained: Bool) -> UnsafeRawPointer {
        let unmanaged: Unmanaged<NativeBox<T>>
        
        if retained {
            unmanaged = Unmanaged.passRetained(self)
        } else {
            unmanaged = Unmanaged.passUnretained(self)
        }
        
        let opaque = unmanaged.toOpaque()
        
        let pointer = UnsafeRawPointer(opaque)
        
        return pointer
    }
}

// MARK: - From Pointer
extension NativeBox {
    static func fromPointer(_ pointer: UnsafeRawPointer) -> Self {
        let unmanaged = Unmanaged<Self>.fromOpaque(pointer)
        
        let box = unmanaged.takeUnretainedValue()
        
        return box
    }
}

// MARK: - Release
extension NativeBox {
    static func release(_ pointer: UnsafeRawPointer) {
        let unmanaged = Unmanaged<Self>.fromOpaque(pointer)
        
        unmanaged.release()
    }
    
    func release(_ pointer: UnsafeRawPointer) {
        Self.release(pointer)
    }
}

// MARK: - END Utils

// MARK: - BEGIN Common Types


// MARK: - END Common Types

// MARK: - BEGIN Unsupported Types
// Omitted due to settings

// MARK: - END Unsupported Types

// MARK: - BEGIN APIs
public enum System_TypeCode: Int32 {
	init(cValue: System_TypeCode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_TypeCode_t { System_TypeCode_t(rawValue: rawValue)! }

	case empty = 0
	case object = 1
	case dBNull = 2
	case boolean = 3
	case char = 4
	case sByte = 5
	case byte = 6
	case int16 = 7
	case uInt16 = 8
	case int32 = 9
	case uInt32 = 10
	case int64 = 11
	case uInt64 = 12
	case single = 13
	case double = 14
	case decimal = 15
	case dateTime = 16
	case string = 18
}


public struct System_Globalization_NumberStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_NumberStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_NumberStyles_t { System_Globalization_NumberStyles_t(rawValue: rawValue) }

	public static let none = System_Globalization_NumberStyles([])
	public static let allowLeadingWhite = System_Globalization_NumberStyles(rawValue: 1)
	public static let allowTrailingWhite = System_Globalization_NumberStyles(rawValue: 2)
	public static let allowLeadingSign = System_Globalization_NumberStyles(rawValue: 4)
	public static let integer = System_Globalization_NumberStyles(rawValue: 7)
	public static let allowTrailingSign = System_Globalization_NumberStyles(rawValue: 8)
	public static let allowParentheses = System_Globalization_NumberStyles(rawValue: 16)
	public static let allowDecimalPoint = System_Globalization_NumberStyles(rawValue: 32)
	public static let allowThousands = System_Globalization_NumberStyles(rawValue: 64)
	public static let number = System_Globalization_NumberStyles(rawValue: 111)
	public static let allowExponent = System_Globalization_NumberStyles(rawValue: 128)
	public static let float = System_Globalization_NumberStyles(rawValue: 167)
	public static let allowCurrencySymbol = System_Globalization_NumberStyles(rawValue: 256)
	public static let currency = System_Globalization_NumberStyles(rawValue: 383)
	public static let any = System_Globalization_NumberStyles(rawValue: 511)
	public static let allowHexSpecifier = System_Globalization_NumberStyles(rawValue: 512)
	public static let hexNumber = System_Globalization_NumberStyles(rawValue: 515)
}


public struct System_Globalization_CultureTypes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_CultureTypes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_CultureTypes_t { System_Globalization_CultureTypes_t(rawValue: rawValue) }

	public static let neutralCultures = System_Globalization_CultureTypes(rawValue: 1)
	public static let specificCultures = System_Globalization_CultureTypes(rawValue: 2)
	public static let installedWin32Cultures = System_Globalization_CultureTypes(rawValue: 4)
	public static let allCultures = System_Globalization_CultureTypes(rawValue: 7)
	public static let userCustomCulture = System_Globalization_CultureTypes(rawValue: 8)
	public static let replacementCultures = System_Globalization_CultureTypes(rawValue: 16)
	public static let windowsOnlyCultures = System_Globalization_CultureTypes(rawValue: 32)
	public static let frameworkCultures = System_Globalization_CultureTypes(rawValue: 64)
}


public enum System_MidpointRounding: Int32 {
	init(cValue: System_MidpointRounding_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_MidpointRounding_t { System_MidpointRounding_t(rawValue: rawValue)! }

	case toEven = 0
	case awayFromZero = 1
	case toZero = 2
	case toNegativeInfinity = 3
	case toPositiveInfinity = 4
}


public struct System_Globalization_TimeSpanStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_TimeSpanStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_TimeSpanStyles_t { System_Globalization_TimeSpanStyles_t(rawValue: rawValue) }

	public static let none = System_Globalization_TimeSpanStyles([])
	public static let assumeNegative = System_Globalization_TimeSpanStyles(rawValue: 1)
}


public enum System_DateTimeKind: Int32 {
	init(cValue: System_DateTimeKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_DateTimeKind_t { System_DateTimeKind_t(rawValue: rawValue)! }

	case unspecified = 0
	case utc = 1
	case local = 2
}


public enum System_DayOfWeek: Int32 {
	init(cValue: System_DayOfWeek_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_DayOfWeek_t { System_DayOfWeek_t(rawValue: rawValue)! }

	case sunday = 0
	case monday = 1
	case tuesday = 2
	case wednesday = 3
	case thursday = 4
	case friday = 5
	case saturday = 6
}


public struct System_Globalization_DateTimeStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_DateTimeStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_DateTimeStyles_t { System_Globalization_DateTimeStyles_t(rawValue: rawValue) }

	public static let none = System_Globalization_DateTimeStyles([])
	public static let allowLeadingWhite = System_Globalization_DateTimeStyles(rawValue: 1)
	public static let allowTrailingWhite = System_Globalization_DateTimeStyles(rawValue: 2)
	public static let allowInnerWhite = System_Globalization_DateTimeStyles(rawValue: 4)
	public static let allowWhiteSpaces = System_Globalization_DateTimeStyles(rawValue: 7)
	public static let noCurrentDateDefault = System_Globalization_DateTimeStyles(rawValue: 8)
	public static let adjustToUniversal = System_Globalization_DateTimeStyles(rawValue: 16)
	public static let assumeLocal = System_Globalization_DateTimeStyles(rawValue: 32)
	public static let assumeUniversal = System_Globalization_DateTimeStyles(rawValue: 64)
	public static let roundtripKind = System_Globalization_DateTimeStyles(rawValue: 128)
}


public enum System_Globalization_CalendarAlgorithmType: Int32 {
	init(cValue: System_Globalization_CalendarAlgorithmType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_CalendarAlgorithmType_t { System_Globalization_CalendarAlgorithmType_t(rawValue: rawValue)! }

	case unknown = 0
	case solarCalendar = 1
	case lunarCalendar = 2
	case lunisolarCalendar = 3
}


public enum System_Globalization_CalendarWeekRule: Int32 {
	init(cValue: System_Globalization_CalendarWeekRule_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_CalendarWeekRule_t { System_Globalization_CalendarWeekRule_t(rawValue: rawValue)! }

	case firstDay = 0
	case firstFullWeek = 1
	case firstFourDayWeek = 2
}


public struct System_Runtime_Serialization_StreamingContextStates: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Runtime_Serialization_StreamingContextStates_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Runtime_Serialization_StreamingContextStates_t { System_Runtime_Serialization_StreamingContextStates_t(rawValue: rawValue) }

	public static let crossProcess = System_Runtime_Serialization_StreamingContextStates(rawValue: 1)
	public static let crossMachine = System_Runtime_Serialization_StreamingContextStates(rawValue: 2)
	public static let file = System_Runtime_Serialization_StreamingContextStates(rawValue: 4)
	public static let persistence = System_Runtime_Serialization_StreamingContextStates(rawValue: 8)
	public static let remoting = System_Runtime_Serialization_StreamingContextStates(rawValue: 16)
	public static let other = System_Runtime_Serialization_StreamingContextStates(rawValue: 32)
	public static let clone = System_Runtime_Serialization_StreamingContextStates(rawValue: 64)
	public static let crossAppDomain = System_Runtime_Serialization_StreamingContextStates(rawValue: 128)
	public static let all = System_Runtime_Serialization_StreamingContextStates(rawValue: 255)
}


public enum System_Reflection_ProcessorArchitecture: Int32 {
	init(cValue: System_Reflection_ProcessorArchitecture_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_ProcessorArchitecture_t { System_Reflection_ProcessorArchitecture_t(rawValue: rawValue)! }

	case none = 0
	case mSIL = 1
	case x86 = 2
	case iA64 = 3
	case amd64 = 4
	case arm = 5
}


public enum System_Reflection_AssemblyContentType: Int32 {
	init(cValue: System_Reflection_AssemblyContentType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_AssemblyContentType_t { System_Reflection_AssemblyContentType_t(rawValue: rawValue)! }

	case `default` = 0
	case windowsRuntime = 1
}


public struct System_Reflection_AssemblyNameFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_AssemblyNameFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_AssemblyNameFlags_t { System_Reflection_AssemblyNameFlags_t(rawValue: rawValue) }

	public static let none = System_Reflection_AssemblyNameFlags([])
	public static let publicKey = System_Reflection_AssemblyNameFlags(rawValue: 1)
	public static let retargetable = System_Reflection_AssemblyNameFlags(rawValue: 256)
	public static let enableJITcompileOptimizer = System_Reflection_AssemblyNameFlags(rawValue: 16384)
	public static let enableJITcompileTracking = System_Reflection_AssemblyNameFlags(rawValue: 32768)
}


public enum System_Configuration_Assemblies_AssemblyHashAlgorithm: Int32 {
	init(cValue: System_Configuration_Assemblies_AssemblyHashAlgorithm_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Configuration_Assemblies_AssemblyHashAlgorithm_t { System_Configuration_Assemblies_AssemblyHashAlgorithm_t(rawValue: rawValue)! }

	case none = 0
	case mD5 = 32771
	case sHA1 = 32772
	case sHA256 = 32780
	case sHA384 = 32781
	case sHA512 = 32782
}


public enum System_Configuration_Assemblies_AssemblyVersionCompatibility: Int32 {
	init(cValue: System_Configuration_Assemblies_AssemblyVersionCompatibility_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Configuration_Assemblies_AssemblyVersionCompatibility_t { System_Configuration_Assemblies_AssemblyVersionCompatibility_t(rawValue: rawValue)! }

	case sameMachine = 1
	case sameProcess = 2
	case sameDomain = 3
}


public struct System_Reflection_ParameterAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ParameterAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ParameterAttributes_t { System_Reflection_ParameterAttributes_t(rawValue: rawValue) }

	public static let none = System_Reflection_ParameterAttributes([])
	public static let `in` = System_Reflection_ParameterAttributes(rawValue: 1)
	public static let out = System_Reflection_ParameterAttributes(rawValue: 2)
	public static let lcid = System_Reflection_ParameterAttributes(rawValue: 4)
	public static let retval = System_Reflection_ParameterAttributes(rawValue: 8)
	public static let optional = System_Reflection_ParameterAttributes(rawValue: 16)
	public static let hasDefault = System_Reflection_ParameterAttributes(rawValue: 4096)
	public static let hasFieldMarshal = System_Reflection_ParameterAttributes(rawValue: 8192)
	public static let reserved3 = System_Reflection_ParameterAttributes(rawValue: 16384)
	public static let reserved4 = System_Reflection_ParameterAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_ParameterAttributes(rawValue: 61440)
}


public struct System_Reflection_PortableExecutableKinds: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_PortableExecutableKinds_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_PortableExecutableKinds_t { System_Reflection_PortableExecutableKinds_t(rawValue: rawValue) }

	public static let notAPortableExecutableImage = System_Reflection_PortableExecutableKinds([])
	public static let iLOnly = System_Reflection_PortableExecutableKinds(rawValue: 1)
	public static let required32Bit = System_Reflection_PortableExecutableKinds(rawValue: 2)
	public static let pE32Plus = System_Reflection_PortableExecutableKinds(rawValue: 4)
	public static let unmanaged32Bit = System_Reflection_PortableExecutableKinds(rawValue: 8)
	public static let preferred32Bit = System_Reflection_PortableExecutableKinds(rawValue: 16)
}


public enum System_Reflection_ImageFileMachine: Int32 {
	init(cValue: System_Reflection_ImageFileMachine_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_ImageFileMachine_t { System_Reflection_ImageFileMachine_t(rawValue: rawValue)! }

	case i386 = 332
	case aRM = 452
	case iA64 = 512
	case aMD64 = 34404
}


public struct System_Reflection_MemberTypes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_MemberTypes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_MemberTypes_t { System_Reflection_MemberTypes_t(rawValue: rawValue) }

	public static let constructor = System_Reflection_MemberTypes(rawValue: 1)
	public static let event = System_Reflection_MemberTypes(rawValue: 2)
	public static let field = System_Reflection_MemberTypes(rawValue: 4)
	public static let method = System_Reflection_MemberTypes(rawValue: 8)
	public static let property = System_Reflection_MemberTypes(rawValue: 16)
	public static let typeInfo = System_Reflection_MemberTypes(rawValue: 32)
	public static let custom = System_Reflection_MemberTypes(rawValue: 64)
	public static let nestedType = System_Reflection_MemberTypes(rawValue: 128)
	public static let all = System_Reflection_MemberTypes(rawValue: 191)
}


public struct System_Reflection_BindingFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_BindingFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_BindingFlags_t { System_Reflection_BindingFlags_t(rawValue: rawValue) }

	public static let `default` = System_Reflection_BindingFlags([])
	public static let ignoreCase = System_Reflection_BindingFlags(rawValue: 1)
	public static let declaredOnly = System_Reflection_BindingFlags(rawValue: 2)
	public static let instance = System_Reflection_BindingFlags(rawValue: 4)
	public static let `static` = System_Reflection_BindingFlags(rawValue: 8)
	public static let `public` = System_Reflection_BindingFlags(rawValue: 16)
	public static let nonPublic = System_Reflection_BindingFlags(rawValue: 32)
	public static let flattenHierarchy = System_Reflection_BindingFlags(rawValue: 64)
	public static let invokeMethod = System_Reflection_BindingFlags(rawValue: 256)
	public static let createInstance = System_Reflection_BindingFlags(rawValue: 512)
	public static let getField = System_Reflection_BindingFlags(rawValue: 1024)
	public static let setField = System_Reflection_BindingFlags(rawValue: 2048)
	public static let getProperty = System_Reflection_BindingFlags(rawValue: 4096)
	public static let setProperty = System_Reflection_BindingFlags(rawValue: 8192)
	public static let putDispProperty = System_Reflection_BindingFlags(rawValue: 16384)
	public static let putRefDispProperty = System_Reflection_BindingFlags(rawValue: 32768)
	public static let exactBinding = System_Reflection_BindingFlags(rawValue: 65536)
	public static let suppressChangeType = System_Reflection_BindingFlags(rawValue: 131072)
	public static let optionalParamBinding = System_Reflection_BindingFlags(rawValue: 262144)
	public static let ignoreReturn = System_Reflection_BindingFlags(rawValue: 16777216)
	public static let doNotWrapExceptions = System_Reflection_BindingFlags(rawValue: 33554432)
}


public struct System_Reflection_FieldAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_FieldAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_FieldAttributes_t { System_Reflection_FieldAttributes_t(rawValue: rawValue) }

	public static let privateScope = System_Reflection_FieldAttributes([])
	public static let `private` = System_Reflection_FieldAttributes(rawValue: 1)
	public static let famANDAssem = System_Reflection_FieldAttributes(rawValue: 2)
	public static let assembly = System_Reflection_FieldAttributes(rawValue: 3)
	public static let family = System_Reflection_FieldAttributes(rawValue: 4)
	public static let famORAssem = System_Reflection_FieldAttributes(rawValue: 5)
	public static let `public` = System_Reflection_FieldAttributes(rawValue: 6)
	public static let fieldAccessMask = System_Reflection_FieldAttributes(rawValue: 7)
	public static let `static` = System_Reflection_FieldAttributes(rawValue: 16)
	public static let initOnly = System_Reflection_FieldAttributes(rawValue: 32)
	public static let literal = System_Reflection_FieldAttributes(rawValue: 64)
	public static let notSerialized = System_Reflection_FieldAttributes(rawValue: 128)
	public static let hasFieldRVA = System_Reflection_FieldAttributes(rawValue: 256)
	public static let specialName = System_Reflection_FieldAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_FieldAttributes(rawValue: 1024)
	public static let hasFieldMarshal = System_Reflection_FieldAttributes(rawValue: 4096)
	public static let pinvokeImpl = System_Reflection_FieldAttributes(rawValue: 8192)
	public static let hasDefault = System_Reflection_FieldAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_FieldAttributes(rawValue: 38144)
}


public struct System_Reflection_PropertyAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_PropertyAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_PropertyAttributes_t { System_Reflection_PropertyAttributes_t(rawValue: rawValue) }

	public static let none = System_Reflection_PropertyAttributes([])
	public static let specialName = System_Reflection_PropertyAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_PropertyAttributes(rawValue: 1024)
	public static let hasDefault = System_Reflection_PropertyAttributes(rawValue: 4096)
	public static let reserved2 = System_Reflection_PropertyAttributes(rawValue: 8192)
	public static let reserved3 = System_Reflection_PropertyAttributes(rawValue: 16384)
	public static let reserved4 = System_Reflection_PropertyAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_PropertyAttributes(rawValue: 62464)
}


public struct System_Reflection_CallingConventions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_CallingConventions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_CallingConventions_t { System_Reflection_CallingConventions_t(rawValue: rawValue) }

	public static let standard = System_Reflection_CallingConventions(rawValue: 1)
	public static let varArgs = System_Reflection_CallingConventions(rawValue: 2)
	public static let any = System_Reflection_CallingConventions(rawValue: 3)
	public static let hasThis = System_Reflection_CallingConventions(rawValue: 32)
	public static let explicitThis = System_Reflection_CallingConventions(rawValue: 64)
}


public struct System_Reflection_MethodAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_MethodAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_MethodAttributes_t { System_Reflection_MethodAttributes_t(rawValue: rawValue) }

	public static let privateScope = System_Reflection_MethodAttributes([])
	public static let reuseSlot = System_Reflection_MethodAttributes([])
	public static let `private` = System_Reflection_MethodAttributes(rawValue: 1)
	public static let famANDAssem = System_Reflection_MethodAttributes(rawValue: 2)
	public static let assembly = System_Reflection_MethodAttributes(rawValue: 3)
	public static let family = System_Reflection_MethodAttributes(rawValue: 4)
	public static let famORAssem = System_Reflection_MethodAttributes(rawValue: 5)
	public static let `public` = System_Reflection_MethodAttributes(rawValue: 6)
	public static let memberAccessMask = System_Reflection_MethodAttributes(rawValue: 7)
	public static let unmanagedExport = System_Reflection_MethodAttributes(rawValue: 8)
	public static let `static` = System_Reflection_MethodAttributes(rawValue: 16)
	public static let `final` = System_Reflection_MethodAttributes(rawValue: 32)
	public static let virtual = System_Reflection_MethodAttributes(rawValue: 64)
	public static let hideBySig = System_Reflection_MethodAttributes(rawValue: 128)
	public static let newSlot = System_Reflection_MethodAttributes(rawValue: 256)
	public static let vtableLayoutMask = System_Reflection_MethodAttributes(rawValue: 256)
	public static let checkAccessOnOverride = System_Reflection_MethodAttributes(rawValue: 512)
	public static let abstract = System_Reflection_MethodAttributes(rawValue: 1024)
	public static let specialName = System_Reflection_MethodAttributes(rawValue: 2048)
	public static let rTSpecialName = System_Reflection_MethodAttributes(rawValue: 4096)
	public static let pinvokeImpl = System_Reflection_MethodAttributes(rawValue: 8192)
	public static let hasSecurity = System_Reflection_MethodAttributes(rawValue: 16384)
	public static let requireSecObject = System_Reflection_MethodAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_MethodAttributes(rawValue: 53248)
}


public enum System_Reflection_MethodImplAttributes: Int32 {
	init(cValue: System_Reflection_MethodImplAttributes_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_MethodImplAttributes_t { System_Reflection_MethodImplAttributes_t(rawValue: rawValue)! }

	case iL = 0
	public static let managed = System_Reflection_MethodImplAttributes.iL
	case native = 1
	case oPTIL = 2
	case codeTypeMask = 3
	public static let runtime = System_Reflection_MethodImplAttributes.codeTypeMask
	case managedMask = 4
	public static let unmanaged = System_Reflection_MethodImplAttributes.managedMask
	case noInlining = 8
	case forwardRef = 16
	case synchronized = 32
	case noOptimization = 64
	case preserveSig = 128
	case aggressiveInlining = 256
	case aggressiveOptimization = 512
	case internalCall = 4096
	case maxMethodImplVal = 65535
}


public struct System_Reflection_ExceptionHandlingClauseOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ExceptionHandlingClauseOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ExceptionHandlingClauseOptions_t { System_Reflection_ExceptionHandlingClauseOptions_t(rawValue: rawValue) }

	public static let clause = System_Reflection_ExceptionHandlingClauseOptions([])
	public static let filter = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 1)
	public static let finally = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 2)
	public static let fault = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 4)
}


public enum System_Threading_Tasks_TaskStatus: Int32 {
	init(cValue: System_Threading_Tasks_TaskStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_Tasks_TaskStatus_t { System_Threading_Tasks_TaskStatus_t(rawValue: rawValue)! }

	case created = 0
	case waitingForActivation = 1
	case waitingToRun = 2
	case running = 3
	case waitingForChildrenToComplete = 4
	case ranToCompletion = 5
	case canceled = 6
	case faulted = 7
}


public struct System_Threading_Tasks_TaskCreationOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_TaskCreationOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_TaskCreationOptions_t { System_Threading_Tasks_TaskCreationOptions_t(rawValue: rawValue) }

	public static let none = System_Threading_Tasks_TaskCreationOptions([])
	public static let preferFairness = System_Threading_Tasks_TaskCreationOptions(rawValue: 1)
	public static let longRunning = System_Threading_Tasks_TaskCreationOptions(rawValue: 2)
	public static let attachedToParent = System_Threading_Tasks_TaskCreationOptions(rawValue: 4)
	public static let denyChildAttach = System_Threading_Tasks_TaskCreationOptions(rawValue: 8)
	public static let hideScheduler = System_Threading_Tasks_TaskCreationOptions(rawValue: 16)
	public static let runContinuationsAsynchronously = System_Threading_Tasks_TaskCreationOptions(rawValue: 64)
}


public struct System_Threading_Tasks_TaskContinuationOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_TaskContinuationOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_TaskContinuationOptions_t { System_Threading_Tasks_TaskContinuationOptions_t(rawValue: rawValue) }

	public static let none = System_Threading_Tasks_TaskContinuationOptions([])
	public static let preferFairness = System_Threading_Tasks_TaskContinuationOptions(rawValue: 1)
	public static let longRunning = System_Threading_Tasks_TaskContinuationOptions(rawValue: 2)
	public static let attachedToParent = System_Threading_Tasks_TaskContinuationOptions(rawValue: 4)
	public static let denyChildAttach = System_Threading_Tasks_TaskContinuationOptions(rawValue: 8)
	public static let hideScheduler = System_Threading_Tasks_TaskContinuationOptions(rawValue: 16)
	public static let lazyCancellation = System_Threading_Tasks_TaskContinuationOptions(rawValue: 32)
	public static let runContinuationsAsynchronously = System_Threading_Tasks_TaskContinuationOptions(rawValue: 64)
	public static let notOnRanToCompletion = System_Threading_Tasks_TaskContinuationOptions(rawValue: 65536)
	public static let notOnFaulted = System_Threading_Tasks_TaskContinuationOptions(rawValue: 131072)
	public static let onlyOnCanceled = System_Threading_Tasks_TaskContinuationOptions(rawValue: 196608)
	public static let notOnCanceled = System_Threading_Tasks_TaskContinuationOptions(rawValue: 262144)
	public static let onlyOnFaulted = System_Threading_Tasks_TaskContinuationOptions(rawValue: 327680)
	public static let onlyOnRanToCompletion = System_Threading_Tasks_TaskContinuationOptions(rawValue: 393216)
	public static let executeSynchronously = System_Threading_Tasks_TaskContinuationOptions(rawValue: 524288)
}


public enum System_Threading_Tasks_Sources_ValueTaskSourceStatus: Int32 {
	init(cValue: System_Threading_Tasks_Sources_ValueTaskSourceStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_Tasks_Sources_ValueTaskSourceStatus_t { System_Threading_Tasks_Sources_ValueTaskSourceStatus_t(rawValue: rawValue)! }

	case pending = 0
	case succeeded = 1
	case faulted = 2
	case canceled = 3
}


public struct System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t { System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t(rawValue: rawValue) }

	public static let none = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags([])
	public static let useSchedulingContext = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags(rawValue: 1)
	public static let flowExecutionContext = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags(rawValue: 2)
}


public enum System_Runtime_InteropServices_GCHandleType: Int32 {
	init(cValue: System_Runtime_InteropServices_GCHandleType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_GCHandleType_t { System_Runtime_InteropServices_GCHandleType_t(rawValue: rawValue)! }

	case `weak` = 0
	case weakTrackResurrection = 1
	case normal = 2
	case pinned = 3
}


public enum System_IO_SeekOrigin: Int32 {
	init(cValue: System_IO_SeekOrigin_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_SeekOrigin_t { System_IO_SeekOrigin_t(rawValue: rawValue)! }

	case begin = 0
	case current = 1
	case end = 2
}


public struct System_IO_FileAccess: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileAccess_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileAccess_t { System_IO_FileAccess_t(rawValue: rawValue) }

	public static let read = System_IO_FileAccess(rawValue: 1)
	public static let write = System_IO_FileAccess(rawValue: 2)
	public static let readWrite = System_IO_FileAccess(rawValue: 3)
}


public enum System_IO_FileMode: Int32 {
	init(cValue: System_IO_FileMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_FileMode_t { System_IO_FileMode_t(rawValue: rawValue)! }

	case createNew = 1
	case create = 2
	case `open` = 3
	case openOrCreate = 4
	case truncate = 5
	case append = 6
}


public struct System_IO_FileShare: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileShare_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileShare_t { System_IO_FileShare_t(rawValue: rawValue) }

	public static let none = System_IO_FileShare([])
	public static let read = System_IO_FileShare(rawValue: 1)
	public static let write = System_IO_FileShare(rawValue: 2)
	public static let readWrite = System_IO_FileShare(rawValue: 3)
	public static let delete = System_IO_FileShare(rawValue: 4)
	public static let inheritable = System_IO_FileShare(rawValue: 16)
}


public struct System_IO_FileOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileOptions_t { System_IO_FileOptions_t(rawValue: rawValue) }

	public static let none = System_IO_FileOptions([])
	public static let encrypted = System_IO_FileOptions(rawValue: 16384)
	public static let deleteOnClose = System_IO_FileOptions(rawValue: 67108864)
	public static let sequentialScan = System_IO_FileOptions(rawValue: 134217728)
	public static let randomAccess = System_IO_FileOptions(rawValue: 268435456)
	public static let asynchronous = System_IO_FileOptions(rawValue: 1073741824)
	public static let writeThrough = System_IO_FileOptions(rawValue: -2147483648)
}


public struct System_IO_UnixFileMode: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_UnixFileMode_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_UnixFileMode_t { System_IO_UnixFileMode_t(rawValue: rawValue) }

	public static let none = System_IO_UnixFileMode([])
	public static let otherExecute = System_IO_UnixFileMode(rawValue: 1)
	public static let otherWrite = System_IO_UnixFileMode(rawValue: 2)
	public static let otherRead = System_IO_UnixFileMode(rawValue: 4)
	public static let groupExecute = System_IO_UnixFileMode(rawValue: 8)
	public static let groupWrite = System_IO_UnixFileMode(rawValue: 16)
	public static let groupRead = System_IO_UnixFileMode(rawValue: 32)
	public static let userExecute = System_IO_UnixFileMode(rawValue: 64)
	public static let userWrite = System_IO_UnixFileMode(rawValue: 128)
	public static let userRead = System_IO_UnixFileMode(rawValue: 256)
	public static let stickyBit = System_IO_UnixFileMode(rawValue: 512)
	public static let setGroup = System_IO_UnixFileMode(rawValue: 1024)
	public static let setUser = System_IO_UnixFileMode(rawValue: 2048)
}


public struct System_Reflection_EventAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_EventAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_EventAttributes_t { System_Reflection_EventAttributes_t(rawValue: rawValue) }

	public static let none = System_Reflection_EventAttributes([])
	public static let specialName = System_Reflection_EventAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_EventAttributes(rawValue: 1024)
	public static let reservedMask = System_Reflection_EventAttributes(rawValue: 1024)
}


public struct System_Reflection_ResourceLocation: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ResourceLocation_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ResourceLocation_t { System_Reflection_ResourceLocation_t(rawValue: rawValue) }

	public static let embedded = System_Reflection_ResourceLocation(rawValue: 1)
	public static let containedInAnotherAssembly = System_Reflection_ResourceLocation(rawValue: 2)
	public static let containedInManifestFile = System_Reflection_ResourceLocation(rawValue: 4)
}


public enum System_Security_SecurityRuleSet: UInt8 {
	init(cValue: System_Security_SecurityRuleSet_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_SecurityRuleSet_t { System_Security_SecurityRuleSet_t(rawValue: rawValue)! }

	case none = 0
	case level1 = 1
	case level2 = 2
}


public enum System_Buffers_OperationStatus: Int32 {
	init(cValue: System_Buffers_OperationStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Buffers_OperationStatus_t { System_Buffers_OperationStatus_t(rawValue: rawValue)! }

	case done = 0
	case destinationTooSmall = 1
	case needMoreData = 2
	case invalidData = 3
}


public enum System_Globalization_UnicodeCategory: Int32 {
	init(cValue: System_Globalization_UnicodeCategory_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_UnicodeCategory_t { System_Globalization_UnicodeCategory_t(rawValue: rawValue)! }

	case uppercaseLetter = 0
	case lowercaseLetter = 1
	case titlecaseLetter = 2
	case modifierLetter = 3
	case otherLetter = 4
	case nonSpacingMark = 5
	case spacingCombiningMark = 6
	case enclosingMark = 7
	case decimalDigitNumber = 8
	case letterNumber = 9
	case otherNumber = 10
	case spaceSeparator = 11
	case lineSeparator = 12
	case paragraphSeparator = 13
	case control = 14
	case format = 15
	case surrogate = 16
	case privateUse = 17
	case connectorPunctuation = 18
	case dashPunctuation = 19
	case openPunctuation = 20
	case closePunctuation = 21
	case initialQuotePunctuation = 22
	case finalQuotePunctuation = 23
	case otherPunctuation = 24
	case mathSymbol = 25
	case currencySymbol = 26
	case modifierSymbol = 27
	case otherSymbol = 28
	case otherNotAssigned = 29
}


public struct System_Globalization_CompareOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_CompareOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_CompareOptions_t { System_Globalization_CompareOptions_t(rawValue: rawValue) }

	public static let none = System_Globalization_CompareOptions([])
	public static let ignoreCase = System_Globalization_CompareOptions(rawValue: 1)
	public static let ignoreNonSpace = System_Globalization_CompareOptions(rawValue: 2)
	public static let ignoreSymbols = System_Globalization_CompareOptions(rawValue: 4)
	public static let ignoreKanaType = System_Globalization_CompareOptions(rawValue: 8)
	public static let ignoreWidth = System_Globalization_CompareOptions(rawValue: 16)
	public static let ordinalIgnoreCase = System_Globalization_CompareOptions(rawValue: 268435456)
	public static let stringSort = System_Globalization_CompareOptions(rawValue: 536870912)
	public static let ordinal = System_Globalization_CompareOptions(rawValue: 1073741824)
}


public enum System_Globalization_DigitShapes: Int32 {
	init(cValue: System_Globalization_DigitShapes_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_DigitShapes_t { System_Globalization_DigitShapes_t(rawValue: rawValue)! }

	case context = 0
	case none = 1
	case nativeNational = 2
}


public enum System_StringComparison: Int32 {
	init(cValue: System_StringComparison_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_StringComparison_t { System_StringComparison_t(rawValue: rawValue)! }

	case currentCulture = 0
	case currentCultureIgnoreCase = 1
	case invariantCulture = 2
	case invariantCultureIgnoreCase = 3
	case ordinal = 4
	case ordinalIgnoreCase = 5
}


public enum System_Text_NormalizationForm: Int32 {
	init(cValue: System_Text_NormalizationForm_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Text_NormalizationForm_t { System_Text_NormalizationForm_t(rawValue: rawValue)! }

	case formC = 1
	case formD = 2
	case formKC = 5
	case formKD = 6
}


public struct System_StringSplitOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_StringSplitOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_StringSplitOptions_t { System_StringSplitOptions_t(rawValue: rawValue) }

	public static let none = System_StringSplitOptions([])
	public static let removeEmptyEntries = System_StringSplitOptions(rawValue: 1)
	public static let trimEntries = System_StringSplitOptions(rawValue: 2)
}


public struct System_Reflection_GenericParameterAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_GenericParameterAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_GenericParameterAttributes_t { System_Reflection_GenericParameterAttributes_t(rawValue: rawValue) }

	public static let none = System_Reflection_GenericParameterAttributes([])
	public static let covariant = System_Reflection_GenericParameterAttributes(rawValue: 1)
	public static let contravariant = System_Reflection_GenericParameterAttributes(rawValue: 2)
	public static let varianceMask = System_Reflection_GenericParameterAttributes(rawValue: 3)
	public static let referenceTypeConstraint = System_Reflection_GenericParameterAttributes(rawValue: 4)
	public static let notNullableValueTypeConstraint = System_Reflection_GenericParameterAttributes(rawValue: 8)
	public static let defaultConstructorConstraint = System_Reflection_GenericParameterAttributes(rawValue: 16)
	public static let specialConstraintMask = System_Reflection_GenericParameterAttributes(rawValue: 28)
}


public struct System_Reflection_TypeAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_TypeAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_TypeAttributes_t { System_Reflection_TypeAttributes_t(rawValue: rawValue) }

	public static let notPublic = System_Reflection_TypeAttributes([])
	public static let autoLayout = System_Reflection_TypeAttributes([])
	public static let ansiClass = System_Reflection_TypeAttributes([])
	public static let `class` = System_Reflection_TypeAttributes([])
	public static let `public` = System_Reflection_TypeAttributes(rawValue: 1)
	public static let nestedPublic = System_Reflection_TypeAttributes(rawValue: 2)
	public static let nestedPrivate = System_Reflection_TypeAttributes(rawValue: 3)
	public static let nestedFamily = System_Reflection_TypeAttributes(rawValue: 4)
	public static let nestedAssembly = System_Reflection_TypeAttributes(rawValue: 5)
	public static let nestedFamANDAssem = System_Reflection_TypeAttributes(rawValue: 6)
	public static let visibilityMask = System_Reflection_TypeAttributes(rawValue: 7)
	public static let nestedFamORAssem = System_Reflection_TypeAttributes(rawValue: 7)
	public static let sequentialLayout = System_Reflection_TypeAttributes(rawValue: 8)
	public static let explicitLayout = System_Reflection_TypeAttributes(rawValue: 16)
	public static let layoutMask = System_Reflection_TypeAttributes(rawValue: 24)
	public static let interface = System_Reflection_TypeAttributes(rawValue: 32)
	public static let classSemanticsMask = System_Reflection_TypeAttributes(rawValue: 32)
	public static let abstract = System_Reflection_TypeAttributes(rawValue: 128)
	public static let sealed = System_Reflection_TypeAttributes(rawValue: 256)
	public static let specialName = System_Reflection_TypeAttributes(rawValue: 1024)
	public static let rTSpecialName = System_Reflection_TypeAttributes(rawValue: 2048)
	public static let `import` = System_Reflection_TypeAttributes(rawValue: 4096)
	public static let serializable = System_Reflection_TypeAttributes(rawValue: 8192)
	public static let windowsRuntime = System_Reflection_TypeAttributes(rawValue: 16384)
	public static let unicodeClass = System_Reflection_TypeAttributes(rawValue: 65536)
	public static let autoClass = System_Reflection_TypeAttributes(rawValue: 131072)
	public static let stringFormatMask = System_Reflection_TypeAttributes(rawValue: 196608)
	public static let customFormatClass = System_Reflection_TypeAttributes(rawValue: 196608)
	public static let hasSecurity = System_Reflection_TypeAttributes(rawValue: 262144)
	public static let reservedMask = System_Reflection_TypeAttributes(rawValue: 264192)
	public static let beforeFieldInit = System_Reflection_TypeAttributes(rawValue: 1048576)
	public static let customFormatMask = System_Reflection_TypeAttributes(rawValue: 12582912)
}


public enum System_Runtime_InteropServices_LayoutKind: Int32 {
	init(cValue: System_Runtime_InteropServices_LayoutKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_LayoutKind_t { System_Runtime_InteropServices_LayoutKind_t(rawValue: rawValue)! }

	case sequential = 0
	case explicit = 2
	case auto = 3
}


public enum System_Runtime_InteropServices_CharSet: Int32 {
	init(cValue: System_Runtime_InteropServices_CharSet_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_CharSet_t { System_Runtime_InteropServices_CharSet_t(rawValue: rawValue)! }

	case none = 1
	case ansi = 2
	case unicode = 3
	case auto = 4
}


public enum System_Runtime_InteropServices_CustomQueryInterfaceMode: Int32 {
	init(cValue: System_Runtime_InteropServices_CustomQueryInterfaceMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_CustomQueryInterfaceMode_t { System_Runtime_InteropServices_CustomQueryInterfaceMode_t(rawValue: rawValue)! }

	case ignore = 0
	case allow = 1
}


public enum System_GCKind: Int32 {
	init(cValue: System_GCKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCKind_t { System_GCKind_t(rawValue: rawValue)! }

	case any = 0
	case ephemeral = 1
	case fullBlocking = 2
	case background = 3
}


public enum System_GCCollectionMode: Int32 {
	init(cValue: System_GCCollectionMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCCollectionMode_t { System_GCCollectionMode_t(rawValue: rawValue)! }

	case `default` = 0
	case forced = 1
	case optimized = 2
	case aggressive = 3
}


public enum System_GCNotificationStatus: Int32 {
	init(cValue: System_GCNotificationStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCNotificationStatus_t { System_GCNotificationStatus_t(rawValue: rawValue)! }

	case succeeded = 0
	case failed = 1
	case canceled = 2
	case timeout = 3
	case notApplicable = 4
}


public struct System_Base64FormattingOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Base64FormattingOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Base64FormattingOptions_t { System_Base64FormattingOptions_t(rawValue: rawValue) }

	public static let none = System_Base64FormattingOptions([])
	public static let insertLineBreaks = System_Base64FormattingOptions(rawValue: 1)
}


public enum System_Threading_ThreadPriority: Int32 {
	init(cValue: System_Threading_ThreadPriority_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_ThreadPriority_t { System_Threading_ThreadPriority_t(rawValue: rawValue)! }

	case lowest = 0
	case belowNormal = 1
	case normal = 2
	case aboveNormal = 3
	case highest = 4
}


public struct System_Threading_ThreadState: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_ThreadState_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_ThreadState_t { System_Threading_ThreadState_t(rawValue: rawValue) }

	public static let running = System_Threading_ThreadState([])
	public static let stopRequested = System_Threading_ThreadState(rawValue: 1)
	public static let suspendRequested = System_Threading_ThreadState(rawValue: 2)
	public static let background = System_Threading_ThreadState(rawValue: 4)
	public static let unstarted = System_Threading_ThreadState(rawValue: 8)
	public static let stopped = System_Threading_ThreadState(rawValue: 16)
	public static let waitSleepJoin = System_Threading_ThreadState(rawValue: 32)
	public static let suspended = System_Threading_ThreadState(rawValue: 64)
	public static let abortRequested = System_Threading_ThreadState(rawValue: 128)
	public static let aborted = System_Threading_ThreadState(rawValue: 256)
}


public enum System_Threading_ApartmentState: Int32 {
	init(cValue: System_Threading_ApartmentState_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_ApartmentState_t { System_Threading_ApartmentState_t(rawValue: rawValue)! }

	case sTA = 0
	case mTA = 1
	case unknown = 2
}


public enum System_Security_Permissions_PermissionState: Int32 {
	init(cValue: System_Security_Permissions_PermissionState_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_Permissions_PermissionState_t { System_Security_Permissions_PermissionState_t(rawValue: rawValue)! }

	case none = 0
	case unrestricted = 1
}


public enum System_Security_Principal_PrincipalPolicy: Int32 {
	init(cValue: System_Security_Principal_PrincipalPolicy_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_Principal_PrincipalPolicy_t { System_Security_Principal_PrincipalPolicy_t(rawValue: rawValue)! }

	case unauthenticatedPrincipal = 0
	case noPrincipal = 1
	case windowsPrincipal = 2
}


public struct System_IO_FileAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileAttributes_t { System_IO_FileAttributes_t(rawValue: rawValue) }

	public static let readOnly = System_IO_FileAttributes(rawValue: 1)
	public static let hidden = System_IO_FileAttributes(rawValue: 2)
	public static let system = System_IO_FileAttributes(rawValue: 4)
	public static let directory = System_IO_FileAttributes(rawValue: 16)
	public static let archive = System_IO_FileAttributes(rawValue: 32)
	public static let device = System_IO_FileAttributes(rawValue: 64)
	public static let normal = System_IO_FileAttributes(rawValue: 128)
	public static let temporary = System_IO_FileAttributes(rawValue: 256)
	public static let sparseFile = System_IO_FileAttributes(rawValue: 512)
	public static let reparsePoint = System_IO_FileAttributes(rawValue: 1024)
	public static let compressed = System_IO_FileAttributes(rawValue: 2048)
	public static let offline = System_IO_FileAttributes(rawValue: 4096)
	public static let notContentIndexed = System_IO_FileAttributes(rawValue: 8192)
	public static let encrypted = System_IO_FileAttributes(rawValue: 16384)
	public static let integrityStream = System_IO_FileAttributes(rawValue: 32768)
	public static let noScrubData = System_IO_FileAttributes(rawValue: 131072)
}


public enum System_IO_SearchOption: Int32 {
	init(cValue: System_IO_SearchOption_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_SearchOption_t { System_IO_SearchOption_t(rawValue: rawValue)! }

	case topDirectoryOnly = 0
	case allDirectories = 1
}


public enum System_IO_MatchType: Int32 {
	init(cValue: System_IO_MatchType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_MatchType_t { System_IO_MatchType_t(rawValue: rawValue)! }

	case simple = 0
	case win32 = 1
}


public enum System_IO_MatchCasing: Int32 {
	init(cValue: System_IO_MatchCasing_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_MatchCasing_t { System_IO_MatchCasing_t(rawValue: rawValue)! }

	case platformDefault = 0
	case caseSensitive = 1
	case caseInsensitive = 2
}


public enum NativeAOT_CodeGeneratorInputSample_NiceLevels: UInt32 {
	init(cValue: NativeAOT_CodeGeneratorInputSample_NiceLevels_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: NativeAOT_CodeGeneratorInputSample_NiceLevels_t { NativeAOT_CodeGeneratorInputSample_NiceLevels_t(rawValue: rawValue)! }

	case notNice = 0
	case littleBitNice = 1
	case nice = 2
	case veryNice = 3
}


public enum NativeAOT_CodeGeneratorInputSample_TestEnum: Int32 {
	init(cValue: NativeAOT_CodeGeneratorInputSample_TestEnum_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: NativeAOT_CodeGeneratorInputSample_TestEnum_t { NativeAOT_CodeGeneratorInputSample_TestEnum_t(rawValue: rawValue)! }

	case firstCase = 0
	case secondCase = 1
}


public class System_Object /* System.Object */: DNObject {
	public func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_GetType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(objA: System_Object? /* System.Object */, objB: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objAC = objA?.__handle
		let objBC = objB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Equals_1(objAC, objBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func referenceEquals(objA: System_Object? /* System.Object */, objB: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objAC = objA?.__handle
		let objBC = objB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_ReferenceEquals(objAC, objBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Object_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Object_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Type /* System.Type */: System_Reflection_MemberInfo {
	public class func getType(typeName: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType(typeNameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getType(typeName: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_1(typeNameC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getType(typeName: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_2(typeNameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromHandle(handle: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Type? /* System.Type */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_3(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getElementType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetElementType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getArrayRank() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetArrayRank(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getGenericTypeDefinition() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericTypeDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGenericParameterConstraints() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericParameterConstraints(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isAssignableTo(targetType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let targetTypeC = targetType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAssignableTo(self.__handle, targetTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getConstructor(types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor(self.__handle, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstructor(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_1(self.__handle, bindingAttrC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstructor(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_2(self.__handle, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstructor(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_3(self.__handle, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstructors() throws -> System_Reflection_ConstructorInfo_Array? /* System.Reflection.ConstructorInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructors(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstructors(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_ConstructorInfo_Array? /* System.Reflection.ConstructorInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructors_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEvent(name: System_String? /* System.String */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvent(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEvent(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvent_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEvents() throws -> System_Reflection_EventInfo_Array? /* System.Reflection.EventInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvents(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEvents(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_EventInfo_Array? /* System.Reflection.EventInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvents_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getField(name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getField(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetField_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFields() throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFields(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFields(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFields_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFunctionPointerCallingConventions() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerCallingConventions(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFunctionPointerReturnType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerReturnType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFunctionPointerParameterTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerParameterTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMember(name: System_String? /* System.String */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMember(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMember(name: System_String? /* System.String */, type: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let typeC = type.cValue
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember_2(self.__handle, nameC, typeC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMembers() throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMembers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMemberWithSameMetadataDefinitionAs(member: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		let memberC = member?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMemberWithSameMetadataDefinitionAs(self.__handle, memberC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMembers(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMembers_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_2(self.__handle, nameC, bindingAttrC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_3(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_4(self.__handle, nameC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_5(self.__handle, nameC, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_6(self.__handle, nameC, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, genericParameterCount: Int32 /* System.Int32 */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_7(self.__handle, nameC, genericParameterCount, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, genericParameterCount: Int32 /* System.Int32 */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_8(self.__handle, nameC, genericParameterCount, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, genericParameterCount: Int32 /* System.Int32 */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_9(self.__handle, nameC, genericParameterCount, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, genericParameterCount: Int32 /* System.Int32 */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_10(self.__handle, nameC, genericParameterCount, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethods(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethods_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getNestedType(name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedType(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getNestedType(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedType_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getNestedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getNestedTypes(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Type_Array? /* System.Type[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedTypes_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, returnType: System_Type? /* System.Type */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_2(self.__handle, nameC, returnTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_3(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, returnType: System_Type? /* System.Type */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_4(self.__handle, nameC, returnTypeC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, returnType: System_Type? /* System.Type */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_5(self.__handle, nameC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, returnType: System_Type? /* System.Type */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_6(self.__handle, nameC, bindingAttrC, binderC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperties() throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperties(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperties(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperties_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDefaultMembers() throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetDefaultMembers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeHandle(o: System_Object? /* System.Object */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeHandle(oC, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeArray(args: System_Object_Array? /* System.Object[] */) throws -> System_Type_Array? /* System.Type[] */ {
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeArray(argsC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeCode(type: System_Type? /* System.Type */) throws -> System_TypeCode /* System.TypeCode */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeCode(typeC, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromCLSID(clsid: System_Guid? /* System.Guid */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID(clsidC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromCLSID(clsid: System_Guid? /* System.Guid */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_1(clsidC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromCLSID(clsid: System_Guid? /* System.Guid */, server: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_2(clsidC, serverC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromCLSID(clsid: System_Guid? /* System.Guid */, server: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_3(clsidC, serverC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromProgID(progID: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID(progIDC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromProgID(progID: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_1(progIDC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromProgID(progID: System_String? /* System.String */, server: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_2(progIDC, serverC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromProgID(progID: System_String? /* System.String */, server: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_3(progIDC, serverC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invokeMember(name: System_String? /* System.String */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, target: System_Object? /* System.Object */, args: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invokeMember(name: System_String? /* System.String */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, target: System_Object? /* System.Object */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember_1(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invokeMember(name: System_String? /* System.String */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, target: System_Object? /* System.Object */, args: System_Object_Array? /* System.Object[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, namedParameters: System_String_Array? /* System.String[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namedParametersC = namedParameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember_2(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, modifiersC, cultureC, namedParametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getInterface(name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterface(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getInterface(name: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterface_1(self.__handle, nameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getInterfaces() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterfaces(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getInterfaceMap(interfaceType: System_Type? /* System.Type */) throws -> System_Reflection_InterfaceMapping? /* System.Reflection.InterfaceMapping */ {
		let interfaceTypeC = interfaceType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterfaceMap(self.__handle, interfaceTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_InterfaceMapping(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isInstanceOfType(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsInstanceOfType(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isEquivalentTo(other: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEquivalentTo(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getEnumUnderlyingType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumUnderlyingType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumValues() throws -> System_Array? /* System.Array */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumValues(self.__handle, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumValuesAsUnderlyingType() throws -> System_Array? /* System.Array */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumValuesAsUnderlyingType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makeArrayType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeArrayType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makeArrayType(rank: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeArrayType_1(self.__handle, rank, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makeByRefType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeByRefType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makeGenericType(typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericType(self.__handle, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makePointerType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakePointerType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func makeGenericSignatureType(genericTypeDefinition: System_Type? /* System.Type */, typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let genericTypeDefinitionC = genericTypeDefinition?.__handle
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericSignatureType(genericTypeDefinitionC, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func makeGenericMethodParameter(position: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericMethodParameter(position, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(o: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Equals_1(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func reflectionOnlyGetType(typeName: System_String? /* System.String */, throwIfNotFound: Bool /* System.Boolean */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ReflectionOnlyGetType(typeNameC, throwIfNotFound, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isEnumDefined(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEnumDefined(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getEnumName(value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumName(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumNames(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Type_FindInterfaces)
	// TODO: Method with Delegate parameter (System_Type_FindMembers)
	public func isSubclassOf(c: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSubclassOf(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isAssignableFrom(c: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAssignableFrom(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getIsInterface() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsInterface_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNamespace() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Namespace_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAssemblyQualifiedName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_AssemblyQualifiedName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFullName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Assembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override func getModule() throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Module_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsNested() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getDeclaringType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DeclaringType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaringMethod() throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DeclaringMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override func getReflectedType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ReflectedType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getUnderlyingSystemType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_UnderlyingSystemType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsTypeDefinition() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsTypeDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsArray() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsByRef() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsByRef_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPointer() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsConstructedGenericType() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsConstructedGenericType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericParameter() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericTypeParameter() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericTypeParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericMethodParameter() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericMethodParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericType() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericTypeDefinition() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericTypeDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSZArray() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSZArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsVariableBoundArray() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsVariableBoundArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsByRefLike() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsByRefLike_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFunctionPointer() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsFunctionPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsUnmanagedFunctionPointer() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsUnmanagedFunctionPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHasElementType() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_HasElementType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getGenericTypeArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericTypeArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getGenericParameterPosition() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericParameterPosition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getGenericParameterAttributes() throws -> System_Reflection_GenericParameterAttributes /* System.Reflection.GenericParameterAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericParameterAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_GenericParameterAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAttributes() throws -> System_Reflection_TypeAttributes /* System.Reflection.TypeAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsAbstract() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAbstract_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsImport() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsImport_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSealed() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSealed_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSpecialName() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsClass() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedFamANDAssem() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamANDAssem_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedFamily() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedFamORAssem() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamORAssem_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedPrivate() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNestedPublic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNotPublic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNotPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPublic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAutoLayout() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAutoLayout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsExplicitLayout() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsExplicitLayout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsLayoutSequential() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsLayoutSequential_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAnsiClass() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAnsiClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAutoClass() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAutoClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsUnicodeClass() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsUnicodeClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCOMObject() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsCOMObject_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsContextful() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsContextful_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsEnum() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEnum_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsMarshalByRef() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsMarshalByRef_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPrimitive() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPrimitive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsValueType() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsValueType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSignatureType() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSignatureType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecurityCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecuritySafeCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecurityTransparent() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getStructLayoutAttribute() throws -> System_Runtime_InteropServices_StructLayoutAttribute? /* System.Runtime.InteropServices.StructLayoutAttribute */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_StructLayoutAttribute_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_StructLayoutAttribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTypeInitializer() throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_TypeInitializer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTypeHandle() throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_TypeHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getGUID() throws -> System_Guid? /* System.Guid */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GUID_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getBaseType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_BaseType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getDefaultBinder() throws -> System_Reflection_Binder? /* System.Reflection.Binder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DefaultBinder_Get(&__exceptionC)
		
		let __returnValue = System_Reflection_Binder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsSerializable() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSerializable_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getContainsGenericParameters() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ContainsGenericParameters_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsVisible() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsVisible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getDelimiter() -> UInt8 /* System.Char */ {
		
		
		let __returnValueC = System_Type_Delimiter_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getEmptyTypes() -> System_Type_Array? /* System.Type[] */ {
		
		
		let __returnValueC = System_Type_EmptyTypes_Get()
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMissing() -> System_Object? /* System.Object */ {
		
		
		let __returnValueC = System_Type_Missing_Get()
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getFilterAttribute() -> System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ {
		
		
		let __returnValueC = System_Type_FilterAttribute_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getFilterName() -> System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ {
		
		
		let __returnValueC = System_Type_FilterName_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getFilterNameIgnoreCase() -> System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ {
		
		
		let __returnValueC = System_Type_FilterNameIgnoreCase_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Type_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Type_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_MemberInfo /* System.Reflection.MemberInfo */: System_Object {
	public func hasSameMetadataDefinitionAs(other: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_HasSameMetadataDefinitionAs(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isDefined(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCustomAttributes(inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributes(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributes_1(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaringType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_DeclaringType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getReflectedType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_ReflectedType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getModule() throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Module_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCustomAttributes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsCollectible() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_IsCollectible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMetadataToken() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_MemberInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_MemberInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_ICustomAttributeProvider /* System.Reflection.ICustomAttributeProvider */: DNObject {
	public func getCustomAttributes(inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_GetCustomAttributes(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_GetCustomAttributes_1(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isDefined(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ICustomAttributeProvider_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ICustomAttributeProvider_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Object_Array /* System.Object[] */: System_Array {
	

}


public class System_Array /* System.Array */: System_Object {
	public class func constrainedCopy(sourceArray: System_Array? /* System.Array */, sourceIndex: Int32 /* System.Int32 */, destinationArray: System_Array? /* System.Array */, destinationIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_ConstrainedCopy(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func clear(array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Clear(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func clear(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Clear_1(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getLength(dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLength(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getUpperBound(dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetUpperBound(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getLowerBound(dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLowerBound(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func initialize() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Initialize(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, length: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance(elementTypeC, length, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, length1: Int32 /* System.Int32 */, length2: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_1(elementTypeC, length1, length2, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, length1: Int32 /* System.Int32 */, length2: Int32 /* System.Int32 */, length3: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_2(elementTypeC, length1, length2, length3, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, lengths: System_Int32_Array? /* System.Int32[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_3(elementTypeC, lengthsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, lengths: System_Int32_Array? /* System.Int32[] */, lowerBounds: System_Int32_Array? /* System.Int32[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		let lowerBoundsC = lowerBounds?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_4(elementTypeC, lengthsC, lowerBoundsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createInstance(elementType: System_Type? /* System.Type */, lengths: System_Int64_Array? /* System.Int64[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_5(elementTypeC, lengthsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func copy(sourceArray: System_Array? /* System.Array */, destinationArray: System_Array? /* System.Array */, length: Int64 /* System.Int64 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy(sourceArrayC, destinationArrayC, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(sourceArray: System_Array? /* System.Array */, sourceIndex: Int64 /* System.Int64 */, destinationArray: System_Array? /* System.Array */, destinationIndex: Int64 /* System.Int64 */, length: Int64 /* System.Int64 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_1(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(sourceArray: System_Array? /* System.Array */, destinationArray: System_Array? /* System.Array */, length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_2(sourceArrayC, destinationArrayC, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(sourceArray: System_Array? /* System.Array */, sourceIndex: Int32 /* System.Int32 */, destinationArray: System_Array? /* System.Array */, destinationIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_3(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getValue(indices: System_Int32_Array? /* System.Int32[] */) throws -> System_Object? /* System.Object */ {
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue(self.__handle, indicesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_1(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(index1: Int32 /* System.Int32 */, index2: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_2(self.__handle, index1, index2, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(index1: Int32 /* System.Int32 */, index2: Int32 /* System.Int32 */, index3: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_3(self.__handle, index1, index2, index3, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue(self.__handle, valueC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index1: Int32 /* System.Int32 */, index2: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_1(self.__handle, valueC, index1, index2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index1: Int32 /* System.Int32 */, index2: Int32 /* System.Int32 */, index3: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_2(self.__handle, valueC, index1, index2, index3, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, indices: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_3(self.__handle, valueC, indicesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getValue(index: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_4(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(index1: Int64 /* System.Int64 */, index2: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_5(self.__handle, index1, index2, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(index1: Int64 /* System.Int64 */, index2: Int64 /* System.Int64 */, index3: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_6(self.__handle, index1, index2, index3, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(indices: System_Int64_Array? /* System.Int64[] */) throws -> System_Object? /* System.Object */ {
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_7(self.__handle, indicesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_4(self.__handle, valueC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index1: Int64 /* System.Int64 */, index2: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_5(self.__handle, valueC, index1, index2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, index1: Int64 /* System.Int64 */, index2: Int64 /* System.Int64 */, index3: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_6(self.__handle, valueC, index1, index2, index3, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */, indices: System_Int64_Array? /* System.Int64[] */) throws {
		let valueC = value?.__handle
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_7(self.__handle, valueC, indicesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getLongLength(dimension: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLongLength(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func binarySearch(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func binarySearch(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_1(arrayC, index, length, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func binarySearch(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_2(arrayC, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func binarySearch(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, value: System_Object? /* System.Object */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_3(arrayC, index, length, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func binarySearch(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func binarySearch(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_A1_1(TC, arrayC, index, length, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */, index: Int64 /* System.Int64 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_CopyTo_1(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func empty(T: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Empty_A1(TC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fill(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Fill_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func fill(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Fill_A1_1(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func indexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func indexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_1(arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func indexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_2(arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func indexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func indexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1_1(TC, arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func indexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1_2(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_1(arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_2(arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1_1(TC, arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func lastIndexOf(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1_2(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func reverse(array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reverse(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_1(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reverse(T: System_Type /* System.Type */, array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_A1(TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reverse(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_A1_1(TC, arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_1(keysC, itemsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_2(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_3(keysC, itemsC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(array: System_Array? /* System.Array */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let arrayC = array?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_4(arrayC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_5(keysC, itemsC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let arrayC = array?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_6(arrayC, index, length, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_7(keysC, itemsC, index, length, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(T: System_Type /* System.Type */, array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A1(TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A2(TKeyC, TValueC, keysC, itemsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A1_1(TC, arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sort(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, keys: System_Array? /* System.Array */, items: System_Array? /* System.Array */, index: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A2_1(TKeyC, TValueC, keysC, itemsC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLongLength() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LongLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getRank() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Rank_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSyncRoot() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFixedSize() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSynchronized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getMaxLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_MaxLength_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Array_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Array_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_ICloneable /* System.ICloneable */: DNObject {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ICloneable_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_ICloneable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_ICloneable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IList /* System.Collections.IList */: DNObject {
	public func add(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_Add(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func contains(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_Contains(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func indexOf(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Insert(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func remove(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Remove(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeAt(index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFixedSize() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IList_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IList_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_ICollection /* System.Collections.ICollection */: DNObject {
	public func copyTo(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ICollection_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSyncRoot() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsSynchronized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_ICollection_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_ICollection_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IEnumerable /* System.Collections.IEnumerable */: DNObject {
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerable_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IEnumerable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IEnumerable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IEnumerator /* System.Collections.IEnumerator */: DNObject {
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCurrent() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}



public class System_ValueType /* System.ValueType */: System_Object {
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_ValueType_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_ValueType_Destroy(self.__handle)
		
	
	}
	
	

}



public class System_IComparable /* System.IComparable */: DNObject {
	public func compareTo(obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IComparable_CompareTo(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IComparable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IComparable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IConvertible /* System.IConvertible */: DNObject {
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toBoolean(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToBoolean(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toChar(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Char */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToChar(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toSByte(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToSByte(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toByte(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToByte(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt16(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt16(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt16(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt16(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt32(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt32(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt32(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt32(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt64(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt64(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt64(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt64(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toSingle(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToSingle(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toDouble(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDouble(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toDecimal(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDecimal(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toDateTime(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDateTime(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToString(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toType(conversionType: System_Type? /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let conversionTypeC = conversionType?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToType(self.__handle, conversionTypeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IConvertible_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IConvertible_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Enum /* System.Enum */: System_ValueType {
	public class func getName(TEnum: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetName_A1(TEnumC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getName(enumType: System_Type? /* System.Type */, value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetName_1(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getNames(TEnum: System_Type /* System.Type */) throws -> System_String_Array? /* System.String[] */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetNames_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getNames(enumType: System_Type? /* System.Type */) throws -> System_String_Array? /* System.String[] */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetNames_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getUnderlyingType(enumType: System_Type? /* System.Type */) throws -> System_Type? /* System.Type */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetUnderlyingType(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getValues(TEnum: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValues_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getValues(enumType: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValues_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getValuesAsUnderlyingType(TEnum: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValuesAsUnderlyingType_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getValuesAsUnderlyingType(enumType: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValuesAsUnderlyingType_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func hasFlag(flag: System_Enum? /* System.Enum */) throws -> Bool /* System.Boolean */ {
		let flagC = flag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_HasFlag(self.__handle, flagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(TEnum: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_IsDefined_A1(TEnumC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(enumType: System_Type? /* System.Type */, value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_IsDefined_1(enumTypeC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func parse(enumType: System_Type? /* System.Type */, value: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(enumType: System_Type? /* System.Type */, value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_1(enumTypeC, valueC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(TEnum: System_Type /* System.Type */, value: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_A1(TEnumC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(TEnum: System_Type /* System.Type */, value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_A1_1(TEnumC, valueC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(enumType: System_Type? /* System.Type */, value: System_String? /* System.String */, result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse(enumTypeC, valueC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(enumType: System_Type? /* System.Type */, value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_1(enumTypeC, valueC, ignoreCase, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(TEnum: System_Type /* System.Type */, value: System_String? /* System.String */, result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_A1(TEnumC, valueC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(TEnum: System_Type /* System.Type */, value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_A1_1(TEnumC, valueC, ignoreCase, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(target: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_CompareTo(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(enumType: System_Type? /* System.Type */, value: System_Object? /* System.Object */, format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Format(enumTypeC, valueC, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: Int8 /* System.SByte */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_1(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: Int16 /* System.Int16 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_2(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_3(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: UInt8 /* System.Byte */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_4(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: UInt16 /* System.UInt16 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_5(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: UInt32 /* System.UInt32 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_6(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_7(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toObject(enumType: System_Type? /* System.Type */, value: UInt64 /* System.UInt64 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_8(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Enum_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Enum_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_ISpanFormattable /* System.ISpanFormattable */: DNObject {
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_ISpanFormattable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_ISpanFormattable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IFormattable /* System.IFormattable */: DNObject {
	public func toString(format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IFormattable_ToString(self.__handle, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IFormattable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IFormattable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_String /* System.String */: System_Object {
	public class func intern(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Intern(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isInterned(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsInterned(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare(strAC, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, strB: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_1(strAC, strBC, ignoreCase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, strB: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_2(strAC, strBC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, strB: System_String? /* System.String */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_3(strAC, strBC, cultureC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, strB: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_4(strAC, strBC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_5(strAC, indexA, strBC, indexB, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, ignoreCase: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_6(strAC, indexA, strBC, indexB, length, ignoreCase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, ignoreCase: Bool /* System.Boolean */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_7(strAC, indexA, strBC, indexB, length, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_8(strAC, indexA, strBC, indexB, length, cultureC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compare(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_9(strAC, indexA, strBC, indexB, length, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compareOrdinal(strA: System_String? /* System.String */, strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareOrdinal(strAC, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func compareOrdinal(strA: System_String? /* System.String */, indexA: Int32 /* System.Int32 */, strB: System_String? /* System.String */, indexB: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareOrdinal_1(strAC, indexA, strBC, indexB, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareTo_1(self.__handle, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func endsWith(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func endsWith(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func endsWith(value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_2(self.__handle, valueC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func endsWith(value: UInt8 /* System.Char */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_3(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_2(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(a: System_String? /* System.String */, b: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let aC = a?.__handle
		let bC = b?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_3(aC, bC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(a: System_String? /* System.String */, b: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let aC = a?.__handle
		let bC = b?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_4(aC, bC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHashCode(comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetHashCode_1(self.__handle, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func startsWith(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func startsWith(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func startsWith(value: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_2(self.__handle, valueC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func startsWith(value: UInt8 /* System.Char */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_3(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func copy(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Copy(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyTo(sourceIndex: Int32 /* System.Int32 */, destination: System_Char_Array? /* System.Char[] */, destinationIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_String_CopyTo(self.__handle, sourceIndex, destinationC, destinationIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func toCharArray() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToCharArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toCharArray(startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToCharArray_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isNullOrEmpty(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNullOrEmpty(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isNullOrWhiteSpace(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNullOrWhiteSpace(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToString_1(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumerator() throws -> System_CharEnumerator? /* System.CharEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_CharEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateRunes() throws -> System_Text_StringRuneEnumerator? /* System.Text.StringRuneEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EnumerateRunes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringRuneEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isNormalized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNormalized(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isNormalized(normalizationForm: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> Bool /* System.Boolean */ {
		let normalizationFormC = normalizationForm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNormalized_1(self.__handle, normalizationFormC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func normalize() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Normalize(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func normalize(normalizationForm: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> System_String? /* System.String */ {
		let normalizationFormC = normalizationForm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Normalize_1(self.__handle, normalizationFormC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat(arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_1(arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_2(arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_3(argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(values: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws -> System_String? /* System.String */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_4(valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(str0: System_String? /* System.String */, str1: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_5(str0C, str1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(str0: System_String? /* System.String */, str1: System_String? /* System.String */, str2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		let str2C = str2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_6(str0C, str1C, str2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(str0: System_String? /* System.String */, str1: System_String? /* System.String */, str2: System_String? /* System.String */, str3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		let str2C = str2?.__handle
		let str3C = str3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_7(str0C, str1C, str2C, str3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func concat(values: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_8(valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format(formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_1(formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_2(formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(format: System_String? /* System.String */, args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_3(formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_4(providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_5(providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_6(providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_7(providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(TArg0: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A1(TArg0C, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(TArg0: System_Type /* System.Type */, TArg1: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A2(TArg0C, TArg1C, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(TArg0: System_Type /* System.Type */, TArg1: System_Type /* System.Type */, TArg2: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let TArg2C = TArg2.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A3(TArg0C, TArg1C, TArg2C, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func format(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_8(providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(startIndex: Int32 /* System.Int32 */, value: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Insert(self.__handle, startIndex, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: UInt8 /* System.Char */, value: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join(separator, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: System_String? /* System.String */, value: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_1(separatorC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: UInt8 /* System.Char */, value: System_String_Array? /* System.String[] */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_2(separator, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: System_String? /* System.String */, value: System_String_Array? /* System.String[] */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_3(separatorC, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: System_String? /* System.String */, values: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_4(separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: UInt8 /* System.Char */, values: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_5(separator, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(separator: System_String? /* System.String */, values: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_6(separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func padLeft(totalWidth: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadLeft(self.__handle, totalWidth, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func padLeft(totalWidth: Int32 /* System.Int32 */, paddingChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadLeft_1(self.__handle, totalWidth, paddingChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func padRight(totalWidth: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadRight(self.__handle, totalWidth, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func padRight(totalWidth: Int32 /* System.Int32 */, paddingChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadRight_1(self.__handle, totalWidth, paddingChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Remove(self.__handle, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(startIndex: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Remove_1(self.__handle, startIndex, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldValue: System_String? /* System.String */, newValue: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace(self.__handle, oldValueC, newValueC, ignoreCase, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldValue: System_String? /* System.String */, newValue: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_1(self.__handle, oldValueC, newValueC, comparisonTypeC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldChar: UInt8 /* System.Char */, newChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_2(self.__handle, oldChar, newChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldValue: System_String? /* System.String */, newValue: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_3(self.__handle, oldValueC, newValueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replaceLineEndings() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ReplaceLineEndings(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replaceLineEndings(replacementText: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let replacementTextC = replacementText?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ReplaceLineEndings_1(self.__handle, replacementTextC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: UInt8 /* System.Char */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split(self.__handle, separator, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: UInt8 /* System.Char */, count: Int32 /* System.Int32 */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_1(self.__handle, separator, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_Char_Array? /* System.Char[] */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_2(self.__handle, separatorC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_Char_Array? /* System.Char[] */, count: Int32 /* System.Int32 */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_3(self.__handle, separatorC, count, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_Char_Array? /* System.Char[] */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_4(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_Char_Array? /* System.Char[] */, count: Int32 /* System.Int32 */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_5(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_String? /* System.String */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_6(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_String? /* System.String */, count: Int32 /* System.Int32 */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_7(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_String_Array? /* System.String[] */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_8(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func split(separator: System_String_Array? /* System.String[] */, count: Int32 /* System.Int32 */, options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_9(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func substring(startIndex: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Substring(self.__handle, startIndex, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func substring(startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Substring_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLower() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLower(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLower(culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLower_1(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLowerInvariant() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLowerInvariant(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toUpper() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpper(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toUpper(culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpper_1(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toUpperInvariant() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpperInvariant(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trim() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trim(trimChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim_1(self.__handle, trimChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trim(trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimStart() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimStart(trimChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart_1(self.__handle, trimChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimStart(trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimEnd(trimChar: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd_1(self.__handle, trimChar, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimEnd(trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func contains(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func contains(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func contains(value: UInt8 /* System.Char */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_2(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func contains(value: UInt8 /* System.Char */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_3(self.__handle, value, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: UInt8 /* System.Char */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_1(self.__handle, value, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: UInt8 /* System.Char */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_2(self.__handle, value, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_3(self.__handle, value, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOfAny(anyOf: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny(self.__handle, anyOfC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOfAny(anyOf: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny_1(self.__handle, anyOfC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOfAny(anyOf: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny_2(self.__handle, anyOfC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_4(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_5(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_6(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_7(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_8(self.__handle, valueC, startIndex, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_9(self.__handle, valueC, startIndex, count, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: UInt8 /* System.Char */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_1(self.__handle, value, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_2(self.__handle, value, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOfAny(anyOf: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny(self.__handle, anyOfC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOfAny(anyOf: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny_1(self.__handle, anyOfC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOfAny(anyOf: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny_2(self.__handle, anyOfC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_4(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_5(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_6(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_7(self.__handle, valueC, startIndex, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_8(self.__handle, valueC, startIndex, count, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(value: System_Char_Array? /* System.Char[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create_1(valueC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(c: UInt8 /* System.Char */, count: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create_2(c, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getEmpty() -> System_String? /* System.String */ {
		
		
		let __returnValueC = System_String_Empty_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_String_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_String_Destroy(self.__handle)
		
	
	}
	
	

}






public class System_IDisposable /* System.IDisposable */: DNObject {
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IDisposable_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IDisposable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IDisposable_Destroy(self.__handle)
		
	
	}
	
	

}


public class Void /* System.Void */: System_ValueType {
	

}









































public class System_IFormatProvider /* System.IFormatProvider */: DNObject {
	public func getFormat(formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IFormatProvider_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IFormatProvider_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IFormatProvider_Destroy(self.__handle)
		
	
	}
	
	

}








// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.






public class System_Collections_IStructuralEquatable /* System.Collections.IStructuralEquatable */: DNObject {
	public func equals(other: System_Object? /* System.Object */, comparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralEquatable_Equals(self.__handle, otherC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHashCode(comparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws -> Int32 /* System.Int32 */ {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralEquatable_GetHashCode(self.__handle, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IStructuralEquatable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IStructuralEquatable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IEqualityComparer /* System.Collections.IEqualityComparer */: DNObject {
	public func equals(x: System_Object? /* System.Object */, y: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEqualityComparer_Equals(self.__handle, xC, yC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHashCode(obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEqualityComparer_GetHashCode(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IEqualityComparer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IEqualityComparer_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IStructuralComparable /* System.Collections.IStructuralComparable */: DNObject {
	public func compareTo(other: System_Object? /* System.Object */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let otherC = other?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralComparable_CompareTo(self.__handle, otherC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IStructuralComparable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IStructuralComparable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IComparer /* System.Collections.IComparer */: DNObject {
	public func compare(x: System_Object? /* System.Object */, y: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IComparer_Compare(self.__handle, xC, yC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IComparer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IComparer_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Runtime_CompilerServices_ITuple /* System.Runtime.CompilerServices.ITuple */: DNObject {
	public func getLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ITuple_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ITuple_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ITuple_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Byte_Array /* System.Byte[] */: System_Array {
	

}





































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.








public class System_Globalization_CultureInfo /* System.Globalization.CultureInfo */: System_Object {
	public class func createSpecificCulture(name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CreateSpecificCulture(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultures(types: System_Globalization_CultureTypes /* System.Globalization.CultureTypes */) throws -> System_Globalization_CultureInfo_Array? /* System.Globalization.CultureInfo[] */ {
		let typesC = types.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultures(typesC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFormat(formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clearCachedData() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_ClearCachedData(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getConsoleFallbackUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetConsoleFallbackUICulture(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(ci: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let ciC = ci?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ReadOnly(ciC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultureInfo(culture: Int32 /* System.Int32 */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo(culture, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultureInfo(name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_1(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultureInfo(name: System_String? /* System.String */, altName: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		let altNameC = altName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_2(nameC, altNameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultureInfo(name: System_String? /* System.String */, predefinedOnly: Bool /* System.Boolean */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_3(nameC, predefinedOnly, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCultureInfoByIetfLanguageTag(name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_1(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(name: System_String? /* System.String */, useUserOverride: Bool /* System.Boolean */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_2(nameC, useUserOverride, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(culture: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_3(culture, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(culture: Int32 /* System.Int32 */, useUserOverride: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_4(culture, useUserOverride, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getCurrentCulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CurrentCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setCurrentCulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_CurrentCulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getCurrentUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CurrentUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setCurrentUICulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_CurrentUICulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getInstalledUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_InstalledUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getDefaultThreadCurrentCulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setDefaultThreadCurrentCulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getDefaultThreadCurrentUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setDefaultThreadCurrentUICulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getInvariantCulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_InvariantCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getParent() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Parent_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getLCID() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getKeyboardLayoutId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_KeyboardLayoutId_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIetfLanguageTag() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IetfLanguageTag_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDisplayName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DisplayName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNativeName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_NativeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEnglishName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_EnglishName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTwoLetterISOLanguageName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getThreeLetterISOLanguageName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getThreeLetterWindowsLanguageName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCompareInfo() throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CompareInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTextInfo() throws -> System_Globalization_TextInfo? /* System.Globalization.TextInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_TextInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_TextInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsNeutralCulture() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IsNeutralCulture_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCultureTypes() throws -> System_Globalization_CultureTypes /* System.Globalization.CultureTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CultureTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNumberFormat() throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_NumberFormat_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNumberFormat(value: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_NumberFormat_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDateTimeFormat() throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DateTimeFormat_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDateTimeFormat(value: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DateTimeFormat_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCalendar() throws -> System_Globalization_Calendar? /* System.Globalization.Calendar */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Calendar_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getOptionalCalendars() throws -> System_Globalization_Calendar_Array? /* System.Globalization.Calendar[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_OptionalCalendars_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getUseUserOverride() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_UseUserOverride_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_CultureInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_CultureInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Globalization_CultureInfo_Array /* System.Globalization.CultureInfo[] */: System_Array {
	

}















public class System_Globalization_CompareInfo /* System.Globalization.CompareInfo */: System_Object {
	public class func getCompareInfo(culture: Int32 /* System.Int32 */, assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let assemblyC = assembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo(culture, assemblyC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCompareInfo(name: System_String? /* System.String */, assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let nameC = name?.__handle
		let assemblyC = assembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_1(nameC, assemblyC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCompareInfo(culture: Int32 /* System.Int32 */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_2(culture, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCompareInfo(name: System_String? /* System.String */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_3(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isSortable(ch: UInt8 /* System.Char */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable(ch, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isSortable(text: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable_1(textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isSortable(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable_2(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, string2: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare(self.__handle, string1C, string2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, string2: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_1(self.__handle, string1C, string2C, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, offset1: Int32 /* System.Int32 */, length1: Int32 /* System.Int32 */, string2: System_String? /* System.String */, offset2: Int32 /* System.Int32 */, length2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_2(self.__handle, string1C, offset1, length1, string2C, offset2, length2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, offset1: Int32 /* System.Int32 */, string2: System_String? /* System.String */, offset2: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_3(self.__handle, string1C, offset1, string2C, offset2, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, offset1: Int32 /* System.Int32 */, string2: System_String? /* System.String */, offset2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_4(self.__handle, string1C, offset1, string2C, offset2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compare(string1: System_String? /* System.String */, offset1: Int32 /* System.Int32 */, length1: Int32 /* System.Int32 */, string2: System_String? /* System.String */, offset2: Int32 /* System.Int32 */, length2: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_5(self.__handle, string1C, offset1, length1, string2C, offset2, length2, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isPrefix(source: System_String? /* System.String */, prefix: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let prefixC = prefix?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsPrefix(self.__handle, sourceC, prefixC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isPrefix(source: System_String? /* System.String */, prefix: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let prefixC = prefix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsPrefix_1(self.__handle, sourceC, prefixC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isSuffix(source: System_String? /* System.String */, suffix: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let suffixC = suffix?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSuffix(self.__handle, sourceC, suffixC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isSuffix(source: System_String? /* System.String */, suffix: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let suffixC = suffix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSuffix_1(self.__handle, sourceC, suffixC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf(self.__handle, sourceC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_1(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_2(self.__handle, sourceC, value, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_3(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_4(self.__handle, sourceC, value, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_5(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_6(self.__handle, sourceC, value, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_7(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_8(self.__handle, sourceC, value, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_9(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_10(self.__handle, sourceC, value, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_11(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf(self.__handle, sourceC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_1(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_2(self.__handle, sourceC, value, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_3(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_4(self.__handle, sourceC, value, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_5(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_6(self.__handle, sourceC, value, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_7(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_8(self.__handle, sourceC, value, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_9(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_10(self.__handle, sourceC, value, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(source: System_String? /* System.String */, value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_11(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getSortKey(source: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> System_Globalization_SortKey? /* System.Globalization.SortKey */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetSortKey(self.__handle, sourceC, optionsC, &__exceptionC)
		
		let __returnValue = System_Globalization_SortKey(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getSortKey(source: System_String? /* System.String */) throws -> System_Globalization_SortKey? /* System.Globalization.SortKey */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetSortKey_1(self.__handle, sourceC, &__exceptionC)
		
		let __returnValue = System_Globalization_SortKey(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHashCode(source: System_String? /* System.String */, options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetHashCode_1(self.__handle, sourceC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getVersion() throws -> System_Globalization_SortVersion? /* System.Globalization.SortVersion */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Version_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_SortVersion(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getLCID() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_CompareInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_CompareInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_IDeserializationCallback /* System.Runtime.Serialization.IDeserializationCallback */: DNObject {
	public func onDeserialization(sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_IDeserializationCallback_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_IDeserializationCallback_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_Assembly /* System.Reflection.Assembly */: System_Object {
	public class func load(assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load(assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func loadWithPartialName(partialName: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let partialNameC = partialName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadWithPartialName(partialNameC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func load(assemblyRef: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyRefC = assemblyRef?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_1(assemblyRefC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getExecutingAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetExecutingAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCallingAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCallingAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getExportedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetExportedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getForwardedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetForwardedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getManifestResourceInfo(resourceName: System_String? /* System.String */) throws -> System_Reflection_ManifestResourceInfo? /* System.Reflection.ManifestResourceInfo */ {
		let resourceNameC = resourceName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceInfo(self.__handle, resourceNameC, &__exceptionC)
		
		let __returnValue = System_Reflection_ManifestResourceInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getManifestResourceNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceNames(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getManifestResourceStream(name: System_String? /* System.String */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceStream(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getManifestResourceStream(type: System_Type? /* System.Type */, name: System_String? /* System.String */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let typeC = type?.__handle
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceStream_1(self.__handle, typeC, nameC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getName() throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetName(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getName(copiedName: Bool /* System.Boolean */) throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetName_1(self.__handle, copiedName, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_1(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(name: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_2(self.__handle, nameC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(name: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_3(self.__handle, nameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isDefined(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstance(typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance(self.__handle, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstance(typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance_1(self.__handle, typeNameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstance(typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance_2(self.__handle, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModule(name: System_String? /* System.String */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModule(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModules() throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModules(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModules(getResourceModules: Bool /* System.Boolean */) throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModules_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getLoadedModules() throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetLoadedModules(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getLoadedModules(getResourceModules: Bool /* System.Boolean */) throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetLoadedModules_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getReferencedAssemblies() throws -> System_Reflection_AssemblyName_Array? /* System.Reflection.AssemblyName[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetReferencedAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getSatelliteAssembly(culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetSatelliteAssembly(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getSatelliteAssembly(culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, version: System_Version? /* System.Version */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let cultureC = culture?.__handle
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetSatelliteAssembly_1(self.__handle, cultureC, versionC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFile(name: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFile(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFiles() throws -> System_IO_FileStream_Array? /* System.IO.FileStream[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFiles(getResourceModules: Bool /* System.Boolean */) throws -> System_IO_FileStream_Array? /* System.IO.FileStream[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFiles_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_IO_FileStream_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Assembly_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func createQualifiedName(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateQualifiedName(assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getAssembly(type: System_Type? /* System.Type */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetAssembly(typeC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getEntryAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetEntryAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func load(rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_2(rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func load(rawAssembly: System_Byte_Array? /* System.Byte[] */, rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_3(rawAssemblyC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func loadFile(path: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFile(pathC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func loadFrom(assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func loadFrom(assemblyFile: System_String? /* System.String */, hashValue: System_Byte_Array? /* System.Byte[] */, hashAlgorithm: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		let hashValueC = hashValue?.__handle
		let hashAlgorithmC = hashAlgorithm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFrom_1(assemblyFileC, hashValueC, hashAlgorithmC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func unsafeLoadFrom(assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_UnsafeLoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func loadModule(moduleName: System_String? /* System.String */, rawModule: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let moduleNameC = moduleName?.__handle
		let rawModuleC = rawModule?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadModule(self.__handle, moduleNameC, rawModuleC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func loadModule(moduleName: System_String? /* System.String */, rawModule: System_Byte_Array? /* System.Byte[] */, rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let moduleNameC = moduleName?.__handle
		let rawModuleC = rawModule?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadModule_1(self.__handle, moduleNameC, rawModuleC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func reflectionOnlyLoad(rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoad(rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func reflectionOnlyLoad(assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoad_1(assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func reflectionOnlyLoadFrom(assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDefinedTypes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_DefinedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getExportedTypes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Type> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ExportedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCodeBase() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEntryPoint() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_EntryPoint_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFullName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getImageRuntimeVersion() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ImageRuntimeVersion_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsDynamic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsDynamic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLocation() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Location_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getReflectionOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCollectible() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsCollectible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFullyTrusted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsFullyTrusted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCustomAttributes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEscapedCodeBase() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_EscapedCodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getManifestModule() throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ManifestModule_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getModules() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.Module> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Modules_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getGlobalAssemblyCache() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GlobalAssemblyCache_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHostContext() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_HostContext_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSecurityRuleSet() throws -> System_Security_SecurityRuleSet /* System.Security.SecurityRuleSet */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_SecurityRuleSet_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityRuleSet(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func addModuleResolve(value: System_Reflection_ModuleResolveEventHandler? /* System.Reflection.ModuleResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_Reflection_Assembly_ModuleResolve_Add(self.__handle, valueC)
		
		let __returnValue = System_Reflection_ModuleResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeModuleResolve(value: System_Reflection_ModuleResolveEventHandler? /* System.Reflection.ModuleResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_Reflection_Assembly_ModuleResolve_Remove(self.__handle, valueC)
		
		let __returnValue = System_Reflection_ModuleResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_Assembly_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_Assembly_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_ISerializable /* System.Runtime.Serialization.ISerializable */: DNObject {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_ISerializable_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_ISerializable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_ISerializable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_SerializationInfo /* System.Runtime.Serialization.SerializationInfo */: System_Object {
	public func setType(type: System_Type? /* System.Type */) throws {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_SetType(self.__handle, typeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getEnumerator() throws -> System_Runtime_Serialization_SerializationInfoEnumerator? /* System.Runtime.Serialization.SerializationInfoEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_SerializationInfoEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: System_Object? /* System.Object */, type: System_Type? /* System.Type */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue(self.__handle, nameC, valueC, typeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: System_Object? /* System.Object */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_1(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Bool /* System.Boolean */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_2(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: UInt8 /* System.Char */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_3(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Int8 /* System.SByte */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_4(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: UInt8 /* System.Byte */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_5(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Int16 /* System.Int16 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_6(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: UInt16 /* System.UInt16 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_7(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Int32 /* System.Int32 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_8(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: UInt32 /* System.UInt32 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_9(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Int64 /* System.Int64 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_10(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: UInt64 /* System.UInt64 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_11(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Float /* System.Single */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_12(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: Double /* System.Double */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_13(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: System_Decimal? /* System.Decimal */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_14(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addValue(name: System_String? /* System.String */, value: System_DateTime? /* System.DateTime */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_15(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getValue(name: System_String? /* System.String */, type: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetValue(self.__handle, nameC, typeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBoolean(name: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetBoolean(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getChar(name: System_String? /* System.String */) throws -> UInt8 /* System.Char */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetChar(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getSByte(name: System_String? /* System.String */) throws -> Int8 /* System.SByte */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetSByte(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getByte(name: System_String? /* System.String */) throws -> UInt8 /* System.Byte */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetByte(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getInt16(name: System_String? /* System.String */) throws -> Int16 /* System.Int16 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt16(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getUInt16(name: System_String? /* System.String */) throws -> UInt16 /* System.UInt16 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt16(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getInt32(name: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt32(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getUInt32(name: System_String? /* System.String */) throws -> UInt32 /* System.UInt32 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt32(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getInt64(name: System_String? /* System.String */) throws -> Int64 /* System.Int64 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt64(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getUInt64(name: System_String? /* System.String */) throws -> UInt64 /* System.UInt64 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt64(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getSingle(name: System_String? /* System.String */) throws -> Float /* System.Single */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetSingle(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDouble(name: System_String? /* System.String */) throws -> Double /* System.Double */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDouble(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDecimal(name: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDecimal(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDateTime(name: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDateTime(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getString(name: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetString(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(type: System_Type? /* System.Type */, converter: System_Runtime_Serialization_IFormatterConverter? /* System.Runtime.Serialization.IFormatterConverter */) throws {
		let typeC = type?.__handle
		let converterC = converter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_Create(typeC, converterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(type: System_Type? /* System.Type */, converter: System_Runtime_Serialization_IFormatterConverter? /* System.Runtime.Serialization.IFormatterConverter */, requireSameTokenInPartialTrust: Bool /* System.Boolean */) throws {
		let typeC = type?.__handle
		let converterC = converter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_Create_1(typeC, converterC, requireSameTokenInPartialTrust, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getFullTypeName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_FullTypeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFullTypeName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_FullTypeName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAssemblyName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_AssemblyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAssemblyName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AssemblyName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsFullTypeNameSetExplicit() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAssemblyNameSetExplicit() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMemberCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_MemberCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getObjectType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_SerializationInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_SerializationInfoEnumerator /* System.Runtime.Serialization.SerializationInfoEnumerator */: System_Object {
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfoEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCurrent() throws -> System_Runtime_Serialization_SerializationEntry? /* System.Runtime.Serialization.SerializationEntry */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_SerializationEntry(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getObjectType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_SerializationInfoEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationInfoEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_SerializationEntry /* System.Runtime.Serialization.SerializationEntry */: System_ValueType {
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getObjectType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_SerializationEntry_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationEntry_Destroy(self.__handle)
		
	
	}
	
	

}




























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.










































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.










































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_Decimal /* System.Decimal */: System_ValueType {
	public class func fromOACurrency(cy: Int64 /* System.Int64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_FromOACurrency(cy, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toOACurrency(value: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToOACurrency(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func add(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Add(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ceiling(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Ceiling(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func compare(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Compare(d1C, d2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func divide(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Divide(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals_2(d1C, d2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func floor(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Floor(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse(sC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_1(sC, styleC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let styleC = style.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_3(sC, styleC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse(sC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let styleC = style.cValue
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse_1(sC, styleC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getBits(d: System_Decimal? /* System.Decimal */) throws -> System_Int32_Array? /* System.Int32[] */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetBits(dC, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func remainder(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Remainder(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func multiply(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Multiply(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func negate(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Negate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, decimals: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_1(dC, decimals, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_2(dC, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, decimals: Int32 /* System.Int32 */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_3(dC, decimals, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func subtract(d1: System_Decimal? /* System.Decimal */, d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Subtract(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toByte(value: System_Decimal? /* System.Decimal */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_Decimal? /* System.Decimal */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToSByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_Decimal? /* System.Decimal */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(d: System_Decimal? /* System.Decimal */) throws -> Double /* System.Double */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToDouble(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(d: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt32(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(d: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt64(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_Decimal? /* System.Decimal */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(d: System_Decimal? /* System.Decimal */) throws -> UInt32 /* System.UInt32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt32(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(d: System_Decimal? /* System.Decimal */) throws -> UInt64 /* System.UInt64 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt64(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(d: System_Decimal? /* System.Decimal */) throws -> Float /* System.Single */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToSingle(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func truncate(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Truncate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func clamp(value: System_Decimal? /* System.Decimal */, min: System_Decimal? /* System.Decimal */, max: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let minC = min?.__handle
		let maxC = max?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Clamp(valueC, minC, maxC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func copySign(value: System_Decimal? /* System.Decimal */, sign: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let signC = sign?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CopySign(valueC, signC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func max(x: System_Decimal? /* System.Decimal */, y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Max(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func min(x: System_Decimal? /* System.Decimal */, y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Min(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func sign(d: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Sign(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Abs(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createChecked(TOther: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateChecked_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createSaturating(TOther: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateSaturating_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createTruncating(TOther: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateTruncating_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isCanonical(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsCanonical(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isEvenInteger(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsEvenInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isInteger(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isNegative(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsNegative(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isOddInteger(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsOddInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isPositive(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsPositive(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func maxMagnitude(x: System_Decimal? /* System.Decimal */, y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_MaxMagnitude(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func minMagnitude(x: System_Decimal? /* System.Decimal */, y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_MinMagnitude(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(bits: System_Int32_Array? /* System.Int32[] */) throws {
		let bitsC = bits?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_7(bitsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(lo: Int32 /* System.Int32 */, mid: Int32 /* System.Int32 */, hi: Int32 /* System.Int32 */, isNegative: Bool /* System.Boolean */, scale: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_8(lo, mid, hi, isNegative, scale, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getScale() throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Scale_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getZero() -> System_Decimal? /* System.Decimal */ {
		
		
		let __returnValueC = System_Decimal_Zero_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getOne() -> System_Decimal? /* System.Decimal */ {
		
		
		let __returnValueC = System_Decimal_One_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMinusOne() -> System_Decimal? /* System.Decimal */ {
		
		
		let __returnValueC = System_Decimal_MinusOne_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMaxValue() -> System_Decimal? /* System.Decimal */ {
		
		
		let __returnValueC = System_Decimal_MaxValue_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMinValue() -> System_Decimal? /* System.Decimal */ {
		
		
		let __returnValueC = System_Decimal_MinValue_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Decimal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Decimal_Destroy(self.__handle)
		
	
	}
	
	

}

















































public class System_Int32_Array /* System.Int32[] */: System_Array {
	

}














// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_DateTime /* System.DateTime */: System_ValueType {
	public func add(value: System_TimeSpan? /* System.TimeSpan */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Add(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addDays(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddDays(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addHours(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddHours(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMilliseconds(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMilliseconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMicroseconds(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMicroseconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMinutes(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMinutes(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMonths(months: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMonths(self.__handle, months, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addSeconds(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddSeconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addTicks(value: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddTicks(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addYears(value: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddYears(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func compare(t1: System_DateTime? /* System.DateTime */, t2: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Compare(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func daysInMonth(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DaysInMonth(year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(t1: System_DateTime? /* System.DateTime */, t2: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals_2(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromBinary(dateData: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromBinary(dateData, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromFileTime(fileTime: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromFileTime(fileTime, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromFileTimeUtc(fileTime: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromFileTimeUtc(fileTime, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromOADate(d: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromOADate(d, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isDaylightSavingTime() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_IsDaylightSavingTime(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func specifyKind(value: System_DateTime? /* System.DateTime */, kind: System_DateTimeKind /* System.DateTimeKind */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_SpecifyKind(valueC, kindC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toBinary() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToBinary(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isLeapYear(year: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_IsLeapYear(year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func parse(s: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse(sC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse_1(sC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse_2(sC, providerC, stylesC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact(sC, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact_2(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func subtract(value: System_DateTime? /* System.DateTime */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Subtract(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func subtract(value: System_TimeSpan? /* System.TimeSpan */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Subtract_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toOADate() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToOADate(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toFileTime() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToFileTime(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toFileTimeUtc() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToFileTimeUtc(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toLocalTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLocalTime(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLongDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLongDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLongTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLongTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toShortDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToShortDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toShortTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToShortTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toUniversalTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToUniversalTime(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse(sC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse_1(sC, providerC, stylesC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParseExact(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParseExact_1(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func deconstruct(date: inout System_DateOnly? /* System.DateOnly */, time: inout System_TimeOnly? /* System.TimeOnly */) throws {
		var dateC = date?.__handle
		var timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateTime_Deconstruct(self.__handle, &dateC, &timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deconstruct(year: inout Int32? /* System.Int32 */, month: inout Int32? /* System.Int32 */, day: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateTime_Deconstruct_1(self.__handle, &year, &month, &day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getDateTimeFormats() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDateTimeFormats(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String_Array? /* System.String[] */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_1(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDateTimeFormats(format: UInt8 /* System.Char */) throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_2(self.__handle, format, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDateTimeFormats(format: UInt8 /* System.Char */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String_Array? /* System.String[] */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_3(self.__handle, format, providerC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(ticks: Int64 /* System.Int64 */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_1(ticks, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(date: System_DateOnly? /* System.DateOnly */, time: System_TimeOnly? /* System.TimeOnly */) throws {
		let dateC = date?.__handle
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_2(dateC, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(date: System_DateOnly? /* System.DateOnly */, time: System_TimeOnly? /* System.TimeOnly */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let dateC = date?.__handle
		let timeC = time?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_3(dateC, timeC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_4(year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_5(year, month, day, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let calendarC = calendar?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_6(year, month, day, hour, minute, second, millisecond, calendarC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_7(year, month, day, hour, minute, second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_8(year, month, day, hour, minute, second, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_9(year, month, day, hour, minute, second, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_10(year, month, day, hour, minute, second, millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_11(year, month, day, hour, minute, second, millisecond, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_12(year, month, day, hour, minute, second, millisecond, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, microsecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_13(year, month, day, hour, minute, second, millisecond, microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, microsecond: Int32 /* System.Int32 */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_14(year, month, day, hour, minute, second, millisecond, microsecond, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, microsecond: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_15(year, month, day, hour, minute, second, millisecond, microsecond, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, microsecond: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */, kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let calendarC = calendar?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_16(year, month, day, hour, minute, second, millisecond, microsecond, calendarC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getDate() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Date_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDay() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Day_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDayOfWeek() throws -> System_DayOfWeek /* System.DayOfWeek */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDayOfYear() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DayOfYear_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHour() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Hour_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getKind() throws -> System_DateTimeKind /* System.DateTimeKind */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Kind_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTimeKind(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMillisecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Millisecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMicrosecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Microsecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getNanosecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Nanosecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMinute() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Minute_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMonth() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Month_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getNow() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Now_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getSecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Second_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTicks() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTimeOfDay() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TimeOfDay_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getToday() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Today_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getYear() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Year_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getUtcNow() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_UtcNow_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getMinValue() -> System_DateTime? /* System.DateTime */ {
		
		
		let __returnValueC = System_DateTime_MinValue_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMaxValue() -> System_DateTime? /* System.DateTime */ {
		
		
		let __returnValueC = System_DateTime_MaxValue_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getUnixEpoch() -> System_DateTime? /* System.DateTime */ {
		
		
		let __returnValueC = System_DateTime_UnixEpoch_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_DateTime_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_DateTime_Destroy(self.__handle)
		
	
	}
	
	

}











public class System_TimeSpan /* System.TimeSpan */: System_ValueType {
	public func add(ts: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Add(self.__handle, tsC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func compare(t1: System_TimeSpan? /* System.TimeSpan */, t2: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Compare(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromDays(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromDays(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func duration() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Duration(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(obj: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func equals(t1: System_TimeSpan? /* System.TimeSpan */, t2: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals_2(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromHours(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromHours(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromMilliseconds(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMilliseconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromMicroseconds(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMicroseconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromMinutes(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMinutes(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func negate() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Negate(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromSeconds(value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromSeconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func subtract(ts: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Subtract(self.__handle, tsC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func multiply(factor: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Multiply(self.__handle, factor, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func divide(divisor: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Divide(self.__handle, divisor, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func divide(ts: System_TimeSpan? /* System.TimeSpan */) throws -> Double /* System.Double */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Divide_1(self.__handle, tsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromTicks(value: Int64 /* System.Int64 */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromTicks(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Parse(sC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(input: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Parse_1(inputC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(input: System_String? /* System.String */, format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact(inputC, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(input: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_1(inputC, formatsC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(input: System_String? /* System.String */, format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_2(inputC, formatC, formatProviderC, stylesC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(input: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_3(inputC, formatsC, formatProviderC, stylesC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParse(sC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(input: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParse_1(inputC, formatProviderC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(input: System_String? /* System.String */, format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact(inputC, formatC, formatProviderC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(input: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_1(inputC, formatsC, formatProviderC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(input: System_String? /* System.String */, format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_2(inputC, formatC, formatProviderC, stylesC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(input: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */, styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */, result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_3(inputC, formatsC, formatProviderC, stylesC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString_2(self.__handle, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(hours: Int32 /* System.Int32 */, minutes: Int32 /* System.Int32 */, seconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_1(hours, minutes, seconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(days: Int32 /* System.Int32 */, hours: Int32 /* System.Int32 */, minutes: Int32 /* System.Int32 */, seconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_2(days, hours, minutes, seconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(days: Int32 /* System.Int32 */, hours: Int32 /* System.Int32 */, minutes: Int32 /* System.Int32 */, seconds: Int32 /* System.Int32 */, milliseconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_3(days, hours, minutes, seconds, milliseconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(days: Int32 /* System.Int32 */, hours: Int32 /* System.Int32 */, minutes: Int32 /* System.Int32 */, seconds: Int32 /* System.Int32 */, milliseconds: Int32 /* System.Int32 */, microseconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_4(days, hours, minutes, seconds, milliseconds, microseconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getTicks() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDays() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Days_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHours() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Hours_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMilliseconds() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Milliseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMicroseconds() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Microseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getNanoseconds() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Nanoseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMinutes() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Minutes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSeconds() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Seconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalDays() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalDays_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalHours() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalHours_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalMilliseconds() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMilliseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalMicroseconds() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMicroseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalNanoseconds() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalNanoseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalMinutes() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMinutes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalSeconds() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalSeconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getZero() -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		let __returnValueC = System_TimeSpan_Zero_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMaxValue() -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		let __returnValueC = System_TimeSpan_MaxValue_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getMinValue() -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		let __returnValueC = System_TimeSpan_MinValue_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getNanosecondsPerTick() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_NanosecondsPerTick_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerMicrosecond() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMicrosecond_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerMillisecond() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMillisecond_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerSecond() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerSecond_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerMinute() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMinute_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerHour() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerHour_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTicksPerDay() -> Int64 /* System.Int64 */ {
		
		
		let __returnValueC = System_TimeSpan_TicksPerDay_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_TimeSpan_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_TimeSpan_Destroy(self.__handle)
		
	
	}
	
	

}











public class System_String_Array /* System.String[] */: System_Array {
	

}















public class System_DateOnly /* System.DateOnly */: System_ValueType {
	public class func fromDayNumber(dayNumber: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_FromDayNumber(dayNumber, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addDays(value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddDays(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMonths(value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddMonths(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addYears(value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddYears(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func deconstruct(year: inout Int32? /* System.Int32 */, month: inout Int32? /* System.Int32 */, day: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateOnly_Deconstruct(self.__handle, &year, &month, &day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func toDateTime(time: System_TimeOnly? /* System.TimeOnly */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToDateTime(self.__handle, timeC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toDateTime(time: System_TimeOnly? /* System.TimeOnly */, kind: System_DateTimeKind /* System.DateTimeKind */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToDateTime_1(self.__handle, timeC, kindC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromDateTime(dateTime: System_DateTime? /* System.DateTime */) throws -> System_DateOnly? /* System.DateOnly */ {
		let dateTimeC = dateTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_FromDateTime(dateTimeC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func compareTo(value: System_DateOnly? /* System.DateOnly */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func parse(s: System_String? /* System.String */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse(sC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse_1(sC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact(sC, formatC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_2(sC, formatsC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_3(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse(sC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse_1(sC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact(sC, formatC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_1(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_2(sC, formatsC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_3(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toLongDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToLongDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toShortDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToShortDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Create(year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Create_1(year, month, day, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getMinValue() throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_MinValue_Get(&__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getMaxValue() throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_MaxValue_Get(&__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getYear() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Year_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMonth() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Month_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDay() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Day_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDayOfWeek() throws -> System_DayOfWeek /* System.DayOfWeek */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDayOfYear() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayOfYear_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDayNumber() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayNumber_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_DateOnly_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_DateOnly_Destroy(self.__handle)
		
	
	}
	
	

}











public class System_TimeOnly /* System.TimeOnly */: System_ValueType {
	public func add(value: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Add(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func add(value: System_TimeSpan? /* System.TimeSpan */, wrappedDays: inout Int32? /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Add_1(self.__handle, valueC, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addHours(value: Double /* System.Double */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddHours(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addHours(value: Double /* System.Double */, wrappedDays: inout Int32? /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddHours_1(self.__handle, value, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMinutes(value: Double /* System.Double */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddMinutes(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMinutes(value: Double /* System.Double */, wrappedDays: inout Int32? /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddMinutes_1(self.__handle, value, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isBetween(start: System_TimeOnly? /* System.TimeOnly */, end: System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let startC = start?.__handle
		let endC = end?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_IsBetween(self.__handle, startC, endC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func deconstruct(hour: inout Int32? /* System.Int32 */, minute: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct(self.__handle, &hour, &minute, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deconstruct(hour: inout Int32? /* System.Int32 */, minute: inout Int32? /* System.Int32 */, second: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_1(self.__handle, &hour, &minute, &second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deconstruct(hour: inout Int32? /* System.Int32 */, minute: inout Int32? /* System.Int32 */, second: inout Int32? /* System.Int32 */, millisecond: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_2(self.__handle, &hour, &minute, &second, &millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deconstruct(hour: inout Int32? /* System.Int32 */, minute: inout Int32? /* System.Int32 */, second: inout Int32? /* System.Int32 */, millisecond: inout Int32? /* System.Int32 */, microsecond: inout Int32? /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_3(self.__handle, &hour, &minute, &second, &millisecond, &microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func fromTimeSpan(timeSpan: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let timeSpanC = timeSpan?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_FromTimeSpan(timeSpanC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromDateTime(dateTime: System_DateTime? /* System.DateTime */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let dateTimeC = dateTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_FromDateTime(dateTimeC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toTimeSpan() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToTimeSpan(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func compareTo(value: System_TimeOnly? /* System.TimeOnly */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(value: System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func parse(s: System_String? /* System.String */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse(sC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse_1(sC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact(sC, formatC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_2(sC, formatsC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_3(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse(sC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse_1(sC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact(sC, formatC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_1(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_2(sC, formatsC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryParseExact(s: System_String? /* System.String */, formats: System_String_Array? /* System.String[] */, provider: System_IFormatProvider? /* System.IFormatProvider */, style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_3(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toLongTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToLongTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toShortTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToShortTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create(hour, minute, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_1(hour, minute, second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_2(hour, minute, second, millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, microsecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_3(hour, minute, second, millisecond, microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_4(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getMinValue() throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_MinValue_Get(&__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getMaxValue() throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_MaxValue_Get(&__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getHour() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Hour_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMinute() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Minute_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Second_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMillisecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Millisecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMicrosecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Microsecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getNanosecond() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Nanosecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTicks() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_TimeOnly_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_TimeOnly_Destroy(self.__handle)
		
	
	}
	
	

}











public class System_Globalization_Calendar /* System.Globalization.Calendar */: System_Object {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws -> System_Globalization_Calendar? /* System.Globalization.Calendar */ {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ReadOnly(calendarC, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMilliseconds(time: System_DateTime? /* System.DateTime */, milliseconds: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMilliseconds(self.__handle, timeC, milliseconds, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addDays(time: System_DateTime? /* System.DateTime */, days: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddDays(self.__handle, timeC, days, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addHours(time: System_DateTime? /* System.DateTime */, hours: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddHours(self.__handle, timeC, hours, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMinutes(time: System_DateTime? /* System.DateTime */, minutes: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMinutes(self.__handle, timeC, minutes, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addMonths(time: System_DateTime? /* System.DateTime */, months: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMonths(self.__handle, timeC, months, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addSeconds(time: System_DateTime? /* System.DateTime */, seconds: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddSeconds(self.__handle, timeC, seconds, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addWeeks(time: System_DateTime? /* System.DateTime */, weeks: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddWeeks(self.__handle, timeC, weeks, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addYears(time: System_DateTime? /* System.DateTime */, years: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddYears(self.__handle, timeC, years, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDayOfMonth(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfMonth(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDayOfWeek(time: System_DateTime? /* System.DateTime */) throws -> System_DayOfWeek /* System.DayOfWeek */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfWeek(self.__handle, timeC, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDayOfYear(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfYear(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDaysInMonth(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInMonth(self.__handle, year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDaysInMonth(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInMonth_1(self.__handle, year, month, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDaysInYear(year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDaysInYear(year: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getEra(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetEra(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHour(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetHour(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMilliseconds(time: System_DateTime? /* System.DateTime */) throws -> Double /* System.Double */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMilliseconds(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMinute(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMinute(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMonth(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonth(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMonthsInYear(year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonthsInYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMonthsInYear(year: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonthsInYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getSecond(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetSecond(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getWeekOfYear(time: System_DateTime? /* System.DateTime */, rule: System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */, firstDayOfWeek: System_DayOfWeek /* System.DayOfWeek */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		let ruleC = rule.cValue
		let firstDayOfWeekC = firstDayOfWeek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetWeekOfYear(self.__handle, timeC, ruleC, firstDayOfWeekC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getYear(time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetYear(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapDay(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapDay(self.__handle, year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapDay(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapDay_1(self.__handle, year, month, day, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapMonth(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapMonth(self.__handle, year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapMonth(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapMonth_1(self.__handle, year, month, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getLeapMonth(year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetLeapMonth(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getLeapMonth(year: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetLeapMonth_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapYear(year: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isLeapYear(year: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toDateTime(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToDateTime(self.__handle, year, month, day, hour, minute, second, millisecond, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toDateTime(year: Int32 /* System.Int32 */, month: Int32 /* System.Int32 */, day: Int32 /* System.Int32 */, hour: Int32 /* System.Int32 */, minute: Int32 /* System.Int32 */, second: Int32 /* System.Int32 */, millisecond: Int32 /* System.Int32 */, era: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToDateTime_1(self.__handle, year, month, day, hour, minute, second, millisecond, era, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toFourDigitYear(year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToFourDigitYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMinSupportedDateTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_MinSupportedDateTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMaxSupportedDateTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_MaxSupportedDateTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAlgorithmType() throws -> System_Globalization_CalendarAlgorithmType /* System.Globalization.CalendarAlgorithmType */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AlgorithmType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CalendarAlgorithmType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getEras() throws -> System_Int32_Array? /* System.Int32[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_Eras_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTwoDigitYearMax() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_TwoDigitYearMax_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setTwoDigitYearMax(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_Calendar_TwoDigitYearMax_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getCurrentEra() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Globalization_Calendar_CurrentEra_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_Calendar_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_Calendar_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_IFormatterConverter /* System.Runtime.Serialization.IFormatterConverter */: DNObject {
	public func convert(value: System_Object? /* System.Object */, type: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_Convert(self.__handle, valueC, typeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func convert(value: System_Object? /* System.Object */, typeCode: System_TypeCode /* System.TypeCode */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_Convert_1(self.__handle, valueC, typeCodeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toBoolean(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToBoolean(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toChar(value: System_Object? /* System.Object */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToChar(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toSByte(value: System_Object? /* System.Object */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToSByte(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toByte(value: System_Object? /* System.Object */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToByte(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt16(value: System_Object? /* System.Object */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt16(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt16(value: System_Object? /* System.Object */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt16(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt32(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt32(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt32(value: System_Object? /* System.Object */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt32(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toInt64(value: System_Object? /* System.Object */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt64(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUInt64(value: System_Object? /* System.Object */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt64(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toSingle(value: System_Object? /* System.Object */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToSingle(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toDouble(value: System_Object? /* System.Object */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDouble(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toDecimal(value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDecimal(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toDateTime(value: System_Object? /* System.Object */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDateTime(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToString(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_IFormatterConverter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_IFormatterConverter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_StreamingContext /* System.Runtime.Serialization.StreamingContext */: System_ValueType {
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(state: System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Create(stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(state: System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */, additional: System_Object? /* System.Object */) throws {
		let stateC = state.cValue
		let additionalC = additional?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Create_1(stateC, additionalC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getState() throws -> System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_State_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_StreamingContextStates(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getContext() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Context_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_StreamingContext_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_StreamingContext_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_AssemblyName /* System.Reflection.AssemblyName */: System_Object {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getAssemblyName(assemblyFile: System_String? /* System.String */) throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetAssemblyName(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getPublicKey() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetPublicKey(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPublicKey(publicKey: System_Byte_Array? /* System.Byte[] */) throws {
		let publicKeyC = publicKey?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_SetPublicKey(self.__handle, publicKeyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getPublicKeyToken() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetPublicKeyToken(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPublicKeyToken(publicKeyToken: System_Byte_Array? /* System.Byte[] */) throws {
		let publicKeyTokenC = publicKeyToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_SetPublicKeyToken(self.__handle, publicKeyTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func onDeserialization(sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func referenceMatchesDefinition(reference: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */, definition: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> Bool /* System.Boolean */ {
		let referenceC = reference?.__handle
		let definitionC = definition?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ReferenceMatchesDefinition(referenceC, definitionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(assemblyName: System_String? /* System.String */) throws {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Create(assemblyNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Name_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getVersion() throws -> System_Version? /* System.Version */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Version_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Version(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setVersion(value: System_Version? /* System.Version */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Version_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCultureInfo() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CultureInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCultureInfo(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CultureInfo_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCultureName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CultureName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCultureName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CultureName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCodeBase() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCodeBase(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CodeBase_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getEscapedCodeBase() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_EscapedCodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getProcessorArchitecture() throws -> System_Reflection_ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ProcessorArchitecture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ProcessorArchitecture(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setProcessorArchitecture(value: System_Reflection_ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_ProcessorArchitecture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getContentType() throws -> System_Reflection_AssemblyContentType /* System.Reflection.AssemblyContentType */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ContentType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyContentType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setContentType(value: System_Reflection_AssemblyContentType /* System.Reflection.AssemblyContentType */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_ContentType_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFlags() throws -> System_Reflection_AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Flags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyNameFlags(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFlags(value: System_Reflection_AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Flags_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getHashAlgorithm() throws -> System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_HashAlgorithm_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Configuration_Assemblies_AssemblyHashAlgorithm(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setHashAlgorithm(value: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_HashAlgorithm_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getVersionCompatibility() throws -> System_Configuration_Assemblies_AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_VersionCompatibility_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Configuration_Assemblies_AssemblyVersionCompatibility(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setVersionCompatibility(value: System_Configuration_Assemblies_AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_VersionCompatibility_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getKeyPair() throws -> System_Reflection_StrongNameKeyPair? /* System.Reflection.StrongNameKeyPair */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_KeyPair_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_StrongNameKeyPair(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setKeyPair(value: System_Reflection_StrongNameKeyPair? /* System.Reflection.StrongNameKeyPair */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_KeyPair_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFullName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_AssemblyName_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_AssemblyName_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Version /* System.Version */: System_Object {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func compareTo(version: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_CompareTo(self.__handle, versionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Version? /* System.Version */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(obj: System_Version? /* System.Version */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(fieldCount: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_ToString_1(self.__handle, fieldCount, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(input: System_String? /* System.String */) throws -> System_Version? /* System.Version */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Parse(inputC, &__exceptionC)
		
		let __returnValue = System_Version(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(input: System_String? /* System.String */, result: inout System_Version? /* System.Version */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_TryParse(inputC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(major: Int32 /* System.Int32 */, minor: Int32 /* System.Int32 */, build: Int32 /* System.Int32 */, revision: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create(major, minor, build, revision, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(major: Int32 /* System.Int32 */, minor: Int32 /* System.Int32 */, build: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_1(major, minor, build, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(major: Int32 /* System.Int32 */, minor: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_2(major, minor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(version: System_String? /* System.String */) throws {
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_3(versionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_4(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getMajor() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Major_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMinor() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Minor_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getBuild() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Build_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getRevision() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Revision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMajorRevision() throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_MajorRevision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMinorRevision() throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_MinorRevision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Version_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Version_Destroy(self.__handle)
		
	
	}
	
	

}







public class System_Reflection_StrongNameKeyPair /* System.Reflection.StrongNameKeyPair */: System_Object {
	public convenience init?(keyPairFile: System_IO_FileStream? /* System.IO.FileStream */) throws {
		let keyPairFileC = keyPairFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create(keyPairFileC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(keyPairArray: System_Byte_Array? /* System.Byte[] */) throws {
		let keyPairArrayC = keyPairArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create_1(keyPairArrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(keyPairContainer: System_String? /* System.String */) throws {
		let keyPairContainerC = keyPairContainer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create_2(keyPairContainerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getPublicKey() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_PublicKey_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_StrongNameKeyPair_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_StrongNameKeyPair_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_FileStream /* System.IO.FileStream */: System_IO_Stream {
	public func lock(position: Int64 /* System.Int64 */, length: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Lock(self.__handle, position, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func unlock(position: Int64 /* System.Int64 */, length: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Unlock(self.__handle, position, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func flushAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_FlushAsync(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func read(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Read(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func readAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_ReadAsync(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readAsync(buffer: System_Memory_A1? /* System.Memory<System.Byte> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_ReadAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func write(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Write(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_WriteAsync(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Byte> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_WriteAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Flush_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func flush(flushToDisk: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Flush_2(self.__handle, flushToDisk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func setLength(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_SetLength(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func readByte() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_ReadByte(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func writeByte(value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_WriteByte(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func copyTo(destination: System_IO_Stream? /* System.IO.Stream */, bufferSize: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_CopyTo(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func copyToAsync(destination: System_IO_Stream? /* System.IO.Stream */, bufferSize: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CopyToAsync(self.__handle, destinationC, bufferSize, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_IO_FileStream_BeginRead)
	public override func endRead(asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws -> Int32 /* System.Int32 */ {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_EndRead(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	// TODO: Method with Delegate parameter (System_IO_FileStream_BeginWrite)
	public override func endWrite(asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_EndWrite(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func seek(offset: Int64 /* System.Int64 */, origin: System_IO_SeekOrigin /* System.IO.SeekOrigin */) throws -> Int64 /* System.Int64 */ {
		let originC = origin.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Seek(self.__handle, offset, originC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(handle: Int /* System.IntPtr */, access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create(handle, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Int /* System.IntPtr */, access: System_IO_FileAccess /* System.IO.FileAccess */, ownsHandle: Bool /* System.Boolean */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_1(handle, accessC, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Int /* System.IntPtr */, access: System_IO_FileAccess /* System.IO.FileAccess */, ownsHandle: Bool /* System.Boolean */, bufferSize: Int32 /* System.Int32 */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_2(handle, accessC, ownsHandle, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Int /* System.IntPtr */, access: System_IO_FileAccess /* System.IO.FileAccess */, ownsHandle: Bool /* System.Boolean */, bufferSize: Int32 /* System.Int32 */, isAsync: Bool /* System.Boolean */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_3(handle, accessC, ownsHandle, bufferSize, isAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_4(handleC, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, access: System_IO_FileAccess /* System.IO.FileAccess */, bufferSize: Int32 /* System.Int32 */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_5(handleC, accessC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, access: System_IO_FileAccess /* System.IO.FileAccess */, bufferSize: Int32 /* System.Int32 */, isAsync: Bool /* System.Boolean */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_6(handleC, accessC, bufferSize, isAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_7(pathC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_8(pathC, modeC, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_9(pathC, modeC, accessC, shareC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */, bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_10(pathC, modeC, accessC, shareC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */, bufferSize: Int32 /* System.Int32 */, useAsync: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_11(pathC, modeC, accessC, shareC, bufferSize, useAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */, bufferSize: Int32 /* System.Int32 */, options: System_IO_FileOptions /* System.IO.FileOptions */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_12(pathC, modeC, accessC, shareC, bufferSize, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_13(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getHandle() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Handle_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getCanRead() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getCanWrite() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSafeFileHandle() throws -> Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_SafeFileHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeFileHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsAsync() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_IsAsync_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getLength() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getPosition() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func setPosition(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Position_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override func getCanSeek() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanSeek_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_FileStream_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_FileStream_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_Stream /* System.IO.Stream */: System_MarshalByRefObject {
	public func copyTo(destination: System_IO_Stream? /* System.IO.Stream */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_CopyTo(self.__handle, destinationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(destination: System_IO_Stream? /* System.IO.Stream */, bufferSize: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_CopyTo_1(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyToAsync(destination: System_IO_Stream? /* System.IO.Stream */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync(self.__handle, destinationC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyToAsync(destination: System_IO_Stream? /* System.IO.Stream */, bufferSize: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_1(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyToAsync(destination: System_IO_Stream? /* System.IO.Stream */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_2(self.__handle, destinationC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyToAsync(destination: System_IO_Stream? /* System.IO.Stream */, bufferSize: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_3(self.__handle, destinationC, bufferSize, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func flushAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_FlushAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_IO_Stream_BeginRead)
	public func endRead(asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws -> Int32 /* System.Int32 */ {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_EndRead(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func readAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAsync(self.__handle, bufferC, offset, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAsync_1(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readAsync(buffer: System_Memory_A1? /* System.Memory<System.Byte> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAsync_2(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readExactlyAsync(buffer: System_Memory_A1? /* System.Memory<System.Byte> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadExactlyAsync(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readExactlyAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadExactlyAsync_1(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readAtLeastAsync(buffer: System_Memory_A1? /* System.Memory<System.Byte> */, minimumBytes: Int32 /* System.Int32 */, throwOnEndOfStream: Bool /* System.Boolean */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAtLeastAsync(self.__handle, bufferC, minimumBytes, throwOnEndOfStream, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_IO_Stream_BeginWrite)
	public func endWrite(asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_EndWrite(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteAsync(self.__handle, bufferC, offset, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteAsync_1(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Byte> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteAsync_2(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func seek(offset: Int64 /* System.Int64 */, origin: System_IO_SeekOrigin /* System.IO.SeekOrigin */) throws -> Int64 /* System.Int64 */ {
		let originC = origin.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Seek(self.__handle, offset, originC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setLength(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_SetLength(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func read(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Read_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func readByte() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadByte(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func readExactly(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_ReadExactly_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(buffer: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Write_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeByte(value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_WriteByte(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func synchronized(stream: System_IO_Stream? /* System.IO.Stream */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Synchronized(streamC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCanRead() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanWrite() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanSeek() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanSeek_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanTimeout() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLength() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPosition() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setPosition(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Position_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getReadTimeout() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setReadTimeout(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_ReadTimeout_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getWriteTimeout() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setWriteTimeout(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_WriteTimeout_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getNull() -> System_IO_Stream? /* System.IO.Stream */ {
		
		
		let __returnValueC = System_IO_Stream_Null_Get()
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_Stream_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_Stream_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_MarshalByRefObject /* System.MarshalByRefObject */: System_Object {
	public func getLifetimeService() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_MarshalByRefObject_GetLifetimeService(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func initializeLifetimeService() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_MarshalByRefObject_InitializeLifetimeService(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_MarshalByRefObject_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_MarshalByRefObject_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IAsyncDisposable /* System.IAsyncDisposable */: DNObject {
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncDisposable_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IAsyncDisposable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IAsyncDisposable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Tasks_ValueTask /* System.Threading.Tasks.ValueTask */: System_ValueType {
	public class func fromCanceled(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_FromCanceled(cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromException(exception: System_Exception? /* System.Exception */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_FromException(exceptionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func asTask() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_AsTask(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func preserve() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Preserve(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAwaiter() throws -> System_Runtime_CompilerServices_ValueTaskAwaiter? /* System.Runtime.CompilerServices.ValueTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ValueTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func configureAwait(continueOnCapturedContext: Bool /* System.Boolean */) throws -> System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable? /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_ConfigureAwait(self.__handle, continueOnCapturedContext, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(task: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */) throws {
		let taskC = task?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Create(taskC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(source: System_Threading_Tasks_Sources_IValueTaskSource? /* System.Threading.Tasks.Sources.IValueTaskSource */, token: Int16 /* System.Int16 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Create_1(sourceC, token, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getCompletedTask() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_CompletedTask_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCompletedSuccessfully() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFaulted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsFaulted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCanceled() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Tasks_ValueTask_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Tasks_ValueTask_Destroy(self.__handle)
		
	
	}
	
	

}




// Type "TResult" was skipped. Reason: It has no full name.
public class System_Threading_CancellationToken /* System.Threading.CancellationToken */: System_ValueType {
	// TODO: Method with Delegate parameter (System_Threading_CancellationToken_Register)
	// TODO: Method with Delegate parameter (System_Threading_CancellationToken_Register_1)
	public func equals(other: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Equals(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(other: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func throwIfCancellationRequested() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationToken_ThrowIfCancellationRequested(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(canceled: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Create(canceled, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getNone() throws -> System_Threading_CancellationToken? /* System.Threading.CancellationToken */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_None_Get(&__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsCancellationRequested() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_IsCancellationRequested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanBeCanceled() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_CanBeCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getWaitHandle() throws -> System_Threading_WaitHandle? /* System.Threading.WaitHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_WaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_WaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_CancellationToken_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_CancellationToken_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Threading_WaitHandle /* System.Threading.WaitHandle */: System_MarshalByRefObject {
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func waitOne(millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func waitOne(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_1(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func waitOne() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_2(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func waitOne(millisecondsTimeout: Int32 /* System.Int32 */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_3(self.__handle, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func waitOne(timeout: System_TimeSpan? /* System.TimeSpan */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_4(self.__handle, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll(waitHandlesC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_1(waitHandlesC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_2(waitHandlesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, millisecondsTimeout: Int32 /* System.Int32 */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_3(waitHandlesC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, timeout: System_TimeSpan? /* System.TimeSpan */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_4(waitHandlesC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, millisecondsTimeout: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny(waitHandlesC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_1(waitHandlesC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_2(waitHandlesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, millisecondsTimeout: Int32 /* System.Int32 */, exitContext: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_3(waitHandlesC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, timeout: System_TimeSpan? /* System.TimeSpan */, exitContext: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_4(waitHandlesC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func signalAndWait(toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait(toSignalC, toWaitOnC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func signalAndWait(toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, timeout: System_TimeSpan? /* System.TimeSpan */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait_1(toSignalC, toWaitOnC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func signalAndWait(toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, millisecondsTimeout: Int32 /* System.Int32 */, exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait_2(toSignalC, toWaitOnC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getHandle() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_Handle_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setHandle(value: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Handle_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getSafeWaitHandle() throws -> Microsoft_Win32_SafeHandles_SafeWaitHandle? /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SafeWaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeWaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setSafeWaitHandle(value: Microsoft_Win32_SafeHandles_SafeWaitHandle? /* Microsoft.Win32.SafeHandles.SafeWaitHandle */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_SafeWaitHandle_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getWaitTimeout() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Threading_WaitHandle_WaitTimeout_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_WaitHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_WaitHandle_Destroy(self.__handle)
		
	
	}
	
	

}




























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class Microsoft_Win32_SafeHandles_SafeWaitHandle /* Microsoft.Win32.SafeHandles.SafeWaitHandle */: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeWaitHandle_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(existingHandle: Int /* System.IntPtr */, ownsHandle: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeWaitHandle_Create_1(existingHandle, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeWaitHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy(self.__handle)
		
	
	}
	
	

}


public class Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */: System_Runtime_InteropServices_SafeHandle {
	public override func getIsInvalid() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_TypeOf())
		
	
	}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_InteropServices_SafeHandle /* System.Runtime.InteropServices.SafeHandle */: System_Runtime_ConstrainedExecution_CriticalFinalizerObject {
	public func dangerousGetHandle() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_DangerousGetHandle(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setHandleAsInvalid() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dangerousAddRef(success: inout Bool? /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_DangerousAddRef(self.__handle, &success, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dangerousRelease() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_DangerousRelease(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getIsClosed() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_IsClosed_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsInvalid() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_InteropServices_SafeHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_InteropServices_SafeHandle_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_ConstrainedExecution_CriticalFinalizerObject /* System.Runtime.ConstrainedExecution.CriticalFinalizerObject */: System_Object {
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_ConstrainedExecution_CriticalFinalizerObject_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy(self.__handle)
		
	
	}
	
	

}



public class System_Threading_WaitHandle_Array /* System.Threading.WaitHandle[] */: System_Array {
	

}















public class System_Threading_CancellationTokenRegistration /* System.Threading.CancellationTokenRegistration */: System_ValueType {
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenRegistration_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func unregister() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Unregister(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Threading_CancellationTokenRegistration? /* System.Threading.CancellationTokenRegistration */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getToken() throws -> System_Threading_CancellationToken? /* System.Threading.CancellationToken */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Token_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_CancellationTokenRegistration_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_CancellationTokenRegistration_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Exception /* System.Exception */: System_Object {
	public func getBaseException() throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_GetBaseException(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_GetType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getTargetSite() throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_TargetSite_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Message_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getData() throws -> System_Collections_IDictionary? /* System.Collections.IDictionary */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Data_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionary(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getInnerException() throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_InnerException_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getHelpLink() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_HelpLink_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setHelpLink(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_HelpLink_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getSource() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Source_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setSource(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_Source_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getHResult() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_HResult_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setHResult(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_HResult_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getStackTrace() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_StackTrace_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Exception_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Exception_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_MethodBase /* System.Reflection.MethodBase */: System_Reflection_MemberInfo {
	public class func getMethodFromHandle(handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getMethodFromHandle(handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */, declaringType: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let handleC = handle?.__handle
		let declaringTypeC = declaringType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodFromHandle_1(handleC, declaringTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCurrentMethod() throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetCurrentMethod(&__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getParameters() throws -> System_Reflection_ParameterInfo_Array? /* System.Reflection.ParameterInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetParameters(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethodImplementationFlags() throws -> System_Reflection_MethodImplAttributes /* System.Reflection.MethodImplAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodImplementationFlags(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodImplAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethodBody() throws -> System_Reflection_MethodBody? /* System.Reflection.MethodBody */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodBody(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBody(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invoke(obj: System_Object? /* System.Object */, parameters: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let parametersC = parameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Invoke(self.__handle, objC, parametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invoke(obj: System_Object? /* System.Object */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, parameters: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let parametersC = parameters?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Invoke_1(self.__handle, objC, invokeAttrC, binderC, parametersC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getAttributes() throws -> System_Reflection_MethodAttributes /* System.Reflection.MethodAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMethodImplementationFlags() throws -> System_Reflection_MethodImplAttributes /* System.Reflection.MethodImplAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_MethodImplementationFlags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodImplAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCallingConvention() throws -> System_Reflection_CallingConventions /* System.Reflection.CallingConventions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_CallingConvention_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_CallingConventions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsAbstract() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsAbstract_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsConstructor() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsConstructor_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFinal() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFinal_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsHideBySig() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsHideBySig_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSpecialName() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsStatic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsStatic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsVirtual() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsVirtual_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamily() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamilyAndAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamilyAndAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamilyOrAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamilyOrAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPrivate() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPublic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsConstructedGenericMethod() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsConstructedGenericMethod_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericMethod() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsGenericMethod_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsGenericMethodDefinition() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsGenericMethodDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getContainsGenericParameters() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_ContainsGenericParameters_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMethodHandle() throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_MethodHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsSecurityCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecuritySafeCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecurityTransparent() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_MethodBase_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_MethodBase_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_RuntimeMethodHandle /* System.RuntimeMethodHandle */: System_ValueType {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeMethodHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromIntPtr(value: Int /* System.IntPtr */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toIntPtr(value: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getFunctionPointer() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_GetFunctionPointer(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getValue() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_RuntimeMethodHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_RuntimeMethodHandle_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_RuntimeTypeHandle /* System.RuntimeTypeHandle */: System_ValueType {
	public class func fromIntPtr(value: Int /* System.IntPtr */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toIntPtr(value: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(handle: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getModuleHandle() throws -> System_ModuleHandle? /* System.ModuleHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_GetModuleHandle(self.__handle, &__exceptionC)
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeTypeHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getValue() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_RuntimeTypeHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_RuntimeTypeHandle_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_ModuleHandle /* System.ModuleHandle */: System_ValueType {
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(handle: System_ModuleHandle? /* System.ModuleHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getRuntimeTypeHandleFromMetadataToken(typeToken: Int32 /* System.Int32 */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken(self.__handle, typeToken, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveTypeHandle(typeToken: Int32 /* System.Int32 */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveTypeHandle(self.__handle, typeToken, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveTypeHandle(typeToken: Int32 /* System.Int32 */, typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveTypeHandle_1(self.__handle, typeToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRuntimeMethodHandleFromMetadataToken(methodToken: Int32 /* System.Int32 */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken(self.__handle, methodToken, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMethodHandle(methodToken: Int32 /* System.Int32 */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveMethodHandle(self.__handle, methodToken, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMethodHandle(methodToken: Int32 /* System.Int32 */, typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveMethodHandle_1(self.__handle, methodToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRuntimeFieldHandleFromMetadataToken(fieldToken: Int32 /* System.Int32 */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken(self.__handle, fieldToken, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveFieldHandle(fieldToken: Int32 /* System.Int32 */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveFieldHandle(self.__handle, fieldToken, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveFieldHandle(fieldToken: Int32 /* System.Int32 */, typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveFieldHandle_1(self.__handle, fieldToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMDStreamVersion() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_MDStreamVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getEmptyHandle() -> System_ModuleHandle? /* System.ModuleHandle */ {
		
		
		let __returnValueC = System_ModuleHandle_EmptyHandle_Get()
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_ModuleHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_ModuleHandle_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_RuntimeTypeHandle_Array /* System.RuntimeTypeHandle[] */: System_Array {
	

}















public class System_RuntimeFieldHandle /* System.RuntimeFieldHandle */: System_ValueType {
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromIntPtr(value: Int /* System.IntPtr */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toIntPtr(value: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeFieldHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getValue() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_RuntimeFieldHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_RuntimeFieldHandle_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Reflection_ParameterInfo_Array /* System.Reflection.ParameterInfo[] */: System_Array {
	

}










public class System_Reflection_ParameterInfo /* System.Reflection.ParameterInfo */: System_Object {
	public func isDefined(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModifiedParameterType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetModifiedParameterType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRealObject(context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws -> System_Object? /* System.Object */ {
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetRealObject(self.__handle, contextC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAttributes() throws -> System_Reflection_ParameterAttributes /* System.Reflection.ParameterAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMember() throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Member_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getParameterType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_ParameterType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getPosition() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsIn() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsIn_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsLcid() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsLcid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsOptional() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsOptional_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsOut() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsOut_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsRetval() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsRetval_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDefaultValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_DefaultValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRawDefaultValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_RawDefaultValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getHasDefaultValue() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_HasDefaultValue_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCustomAttributes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMetadataToken() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ParameterInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ParameterInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Serialization_IObjectReference /* System.Runtime.Serialization.IObjectReference */: DNObject {
	public func getRealObject(context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws -> System_Object? /* System.Object */ {
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IObjectReference_GetRealObject(self.__handle, contextC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Serialization_IObjectReference_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Serialization_IObjectReference_Destroy(self.__handle)
		
	
	}
	
	

}






public class System_Reflection_CustomAttributeData /* System.Reflection.CustomAttributeData */: System_Object {
	public class func getCustomAttributes(target: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(target: System_Reflection_Module? /* System.Reflection.Module */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_1(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(target: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_2(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(target: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_3(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getAttributeType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_AttributeType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getConstructor() throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_Constructor_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getConstructorArguments() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_ConstructorArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNamedArguments() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_NamedArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_CustomAttributeData_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeData_Destroy(self.__handle)
		
	
	}
	
	

}






public class System_Reflection_CustomAttributeData_Array /* System.Reflection.CustomAttributeData[] */: System_Array {
	

}







public class System_Reflection_Module /* System.Reflection.Module */: System_Object {
	public func getPEKind(peKind: inout System_Reflection_PortableExecutableKinds? /* System.Reflection.PortableExecutableKinds */, machine: inout System_Reflection_ImageFileMachine? /* System.Reflection.ImageFileMachine */) throws {
		var peKindC = peKind.cValue
		var machineC = machine.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Module_GetPEKind(self.__handle, &peKindC, &machineC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func isResource() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_IsResource(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isDefined(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getCustomAttributes(attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod_1(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod_2(self.__handle, nameC, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethods(bindingFlags: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingFlagsC = bindingFlags.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethods_1(self.__handle, bindingFlagsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getField(name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getField(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetField_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFields() throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetFields(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFields(bindingFlags: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingFlagsC = bindingFlags.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetFields_1(self.__handle, bindingFlagsC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(className: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_1(self.__handle, classNameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(className: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_2(self.__handle, classNameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getType(className: System_String? /* System.String */, throwOnError: Bool /* System.Boolean */, ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_3(self.__handle, classNameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Reflection_Module_FindTypes)
	public func resolveField(metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveField(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveField(metadataToken: Int32 /* System.Int32 */, genericTypeArguments: System_Type_Array? /* System.Type[] */, genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveField_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMember(metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMember(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMember(metadataToken: Int32 /* System.Int32 */, genericTypeArguments: System_Type_Array? /* System.Type[] */, genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMember_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMethod(metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMethod(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveMethod(metadataToken: Int32 /* System.Int32 */, genericTypeArguments: System_Type_Array? /* System.Type[] */, genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMethod_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveSignature(metadataToken: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveSignature(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveString(metadataToken: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveString(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveType(metadataToken: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveType(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func resolveType(metadataToken: Int32 /* System.Int32 */, genericTypeArguments: System_Type_Array? /* System.Type[] */, genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveType_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Module_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Assembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFullyQualifiedName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_FullyQualifiedName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMDStreamVersion() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_MDStreamVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getModuleVersionId() throws -> System_Guid? /* System.Guid */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ModuleVersionId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getScopeName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ScopeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getModuleHandle() throws -> System_ModuleHandle? /* System.ModuleHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ModuleHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCustomAttributes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMetadataToken() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getFilterTypeName() -> System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */ {
		
		
		let __returnValueC = System_Reflection_Module_FilterTypeName_Get()
		
		let __returnValue = System_Reflection_TypeFilter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getFilterTypeNameIgnoreCase() -> System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */ {
		
		
		let __returnValueC = System_Reflection_Module_FilterTypeNameIgnoreCase_Get()
		
		let __returnValue = System_Reflection_TypeFilter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_Module_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_Module_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Guid /* System.Guid */: System_ValueType {
	public class func parse(input: System_String? /* System.String */) throws -> System_Guid? /* System.Guid */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Parse(inputC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(input: System_String? /* System.String */, result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParse(inputC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func parseExact(input: System_String? /* System.String */, format: System_String? /* System.String */) throws -> System_Guid? /* System.Guid */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ParseExact(inputC, formatC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParseExact(input: System_String? /* System.String */, format: System_String? /* System.String */, result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParseExact(inputC, formatC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toByteArray() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToByteArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(g: System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let gC = g?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Equals_1(self.__handle, gC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func compareTo(value: System_Guid? /* System.Guid */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toString(format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(format: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString_2(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func parse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Guid? /* System.Guid */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Parse_1(sC, providerC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(s: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */, result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParse_1(sC, providerC, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func newGuid() throws -> System_Guid? /* System.Guid */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_NewGuid(&__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(b: System_Byte_Array? /* System.Byte[] */) throws {
		let bC = b?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create(bC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(a: UInt32 /* System.UInt32 */, b: UInt16 /* System.UInt16 */, c: UInt16 /* System.UInt16 */, d: UInt8 /* System.Byte */, e: UInt8 /* System.Byte */, f: UInt8 /* System.Byte */, g: UInt8 /* System.Byte */, h: UInt8 /* System.Byte */, i: UInt8 /* System.Byte */, j: UInt8 /* System.Byte */, k: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_1(a, b, c, d, e, f, g, h, i, j, k, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(a: Int32 /* System.Int32 */, b: Int16 /* System.Int16 */, c: Int16 /* System.Int16 */, d: System_Byte_Array? /* System.Byte[] */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_2(a, b, c, dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(a: Int32 /* System.Int32 */, b: Int16 /* System.Int16 */, c: Int16 /* System.Int16 */, d: UInt8 /* System.Byte */, e: UInt8 /* System.Byte */, f: UInt8 /* System.Byte */, g: UInt8 /* System.Byte */, h: UInt8 /* System.Byte */, i: UInt8 /* System.Byte */, j: UInt8 /* System.Byte */, k: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_3(a, b, c, d, e, f, g, h, i, j, k, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(g: System_String? /* System.String */) throws {
		let gC = g?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_4(gC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getEmpty() -> System_Guid? /* System.Guid */ {
		
		
		let __returnValueC = System_Guid_Empty_Get()
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Guid_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Guid_Destroy(self.__handle)
		
	
	}
	
	

}













public class System_Reflection_MethodInfo /* System.Reflection.MethodInfo */: System_Reflection_MethodBase {
	public override func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGenericMethodDefinition() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetGenericMethodDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func makeGenericMethod(typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_MakeGenericMethod(self.__handle, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBaseDefinition() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetBaseDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createDelegate(delegateType: System_Type? /* System.Type */) throws -> System_Delegate? /* System.Delegate */ {
		let delegateTypeC = delegateType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate(self.__handle, delegateTypeC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createDelegate(delegateType: System_Type? /* System.Type */, target: System_Object? /* System.Object */) throws -> System_Delegate? /* System.Delegate */ {
		let delegateTypeC = delegateType?.__handle
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_1(self.__handle, delegateTypeC, targetC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createDelegate(T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_A1(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createDelegate(T: System_Type /* System.Type */, target: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_A1_1(self.__handle, TC, targetC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getReturnParameter() throws -> System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnParameter_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getReturnType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getReturnTypeCustomAttributes() throws -> System_Reflection_ICustomAttributeProvider? /* System.Reflection.ICustomAttributeProvider */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ICustomAttributeProvider(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_MethodInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_MethodInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Type_Array /* System.Type[] */: System_Array {
	

}















public class System_Reflection_Binder /* System.Reflection.Binder */: System_Object {
	public func bindToField(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, match: System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */, value: System_Object? /* System.Object */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_BindToField(self.__handle, bindingAttrC, matchC, valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func bindToMethod(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, match: System_Reflection_MethodBase_Array? /* System.Reflection.MethodBase[] */, args: inout System_Object_Array? /* System.Object[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, names: System_String_Array? /* System.String[] */, state: inout System_Object? /* System.Object */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		var argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namesC = names?.__handle
		var stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_BindToMethod(self.__handle, bindingAttrC, matchC, &argsC, modifiersC, cultureC, namesC, &stateC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func changeType(value: System_Object? /* System.Object */, type: System_Type? /* System.Type */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeC = type?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_ChangeType(self.__handle, valueC, typeC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func reorderArgumentArray(args: inout System_Object_Array? /* System.Object[] */, state: System_Object? /* System.Object */) throws {
		var argsC = args?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Binder_ReorderArgumentArray(self.__handle, &argsC, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func selectMethod(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, match: System_Reflection_MethodBase_Array? /* System.Reflection.MethodBase[] */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_SelectMethod(self.__handle, bindingAttrC, matchC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func selectProperty(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, match: System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */, returnType: System_Type? /* System.Type */, indexes: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let returnTypeC = returnType?.__handle
		let indexesC = indexes?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_SelectProperty(self.__handle, bindingAttrC, matchC, returnTypeC, indexesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_Binder_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_Binder_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_FieldInfo /* System.Reflection.FieldInfo */: System_Reflection_MemberInfo {
	public class func getFieldFromHandle(handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetFieldFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFieldFromHandle(handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */, declaringType: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let handleC = handle?.__handle
		let declaringTypeC = declaringType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetFieldFromHandle_1(handleC, declaringTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getValue(obj: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetValue(self.__handle, objC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setValue(obj: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_FieldInfo_SetValue(self.__handle, objC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(obj: System_Object? /* System.Object */, value: System_Object? /* System.Object */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_FieldInfo_SetValue_1(self.__handle, objC, valueC, invokeAttrC, binderC, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getRawConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetRawConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModifiedFieldType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetModifiedFieldType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAttributes() throws -> System_Reflection_FieldAttributes /* System.Reflection.FieldAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFieldType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_FieldType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsInitOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsInitOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsLiteral() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsLiteral_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsNotSerialized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsNotSerialized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPinvokeImpl() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPinvokeImpl_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSpecialName() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsStatic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsStatic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamily() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamilyAndAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamilyAndAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFamilyOrAssembly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamilyOrAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPrivate() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPublic() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecurityCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecuritySafeCritical() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSecurityTransparent() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getFieldHandle() throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_FieldHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_FieldInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_FieldInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_FieldInfo_Array /* System.Reflection.FieldInfo[] */: System_Array {
	

}















public class System_Reflection_MethodBase_Array /* System.Reflection.MethodBase[] */: System_Array {
	

}
















public class System_Reflection_ParameterModifier_Array /* System.Reflection.ParameterModifier[] */: System_Array {
	

}










public class System_Reflection_ParameterModifier /* System.Reflection.ParameterModifier */: System_ValueType {
	public convenience init?(parameterCount: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterModifier_Create(parameterCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ParameterModifier_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ParameterModifier_Destroy(self.__handle)
		
	
	}
	
	

}








public class System_Reflection_PropertyInfo /* System.Reflection.PropertyInfo */: System_Reflection_MemberInfo {
	public func getIndexParameters() throws -> System_Reflection_ParameterInfo_Array? /* System.Reflection.ParameterInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetIndexParameters(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAccessors() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetAccessors(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAccessors(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetAccessors_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetGetMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getGetMethod(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetGetMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getSetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetSetMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getSetMethod(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetSetMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getModifiedPropertyType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetModifiedPropertyType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(obj: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue(self.__handle, objC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(obj: System_Object? /* System.Object */, index: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let indexC = index?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue_1(self.__handle, objC, indexC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getValue(obj: System_Object? /* System.Object */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, index: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let indexC = index?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue_2(self.__handle, objC, invokeAttrC, binderC, indexC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRawConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetRawConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setValue(obj: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue(self.__handle, objC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(obj: System_Object? /* System.Object */, value: System_Object? /* System.Object */, index: System_Object_Array? /* System.Object[] */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let indexC = index?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue_1(self.__handle, objC, valueC, indexC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setValue(obj: System_Object? /* System.Object */, value: System_Object? /* System.Object */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, index: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let indexC = index?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue_2(self.__handle, objC, valueC, invokeAttrC, binderC, indexC, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getPropertyType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_PropertyType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAttributes() throws -> System_Reflection_PropertyAttributes /* System.Reflection.PropertyAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsSpecialName() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanRead() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCanWrite() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getGetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getSetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_SetMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_PropertyInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_PropertyInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_MethodInfo_Array /* System.Reflection.MethodInfo[] */: System_Array {
	

}















public class System_Reflection_PropertyInfo_Array /* System.Reflection.PropertyInfo[] */: System_Array {
	

}















public class System_Reflection_ConstructorInfo /* System.Reflection.ConstructorInfo */: System_Reflection_MethodBase {
	public func invoke(parameters: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let parametersC = parameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Invoke(self.__handle, parametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invoke(invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, parameters: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let parametersC = parameters?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Invoke_1(self.__handle, invokeAttrC, binderC, parametersC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getConstructorName() -> System_String? /* System.String */ {
		
		
		let __returnValueC = System_Reflection_ConstructorInfo_ConstructorName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getTypeConstructorName() -> System_String? /* System.String */ {
		
		
		let __returnValueC = System_Reflection_ConstructorInfo_TypeConstructorName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ConstructorInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ConstructorInfo_Destroy(self.__handle)
		
	
	}
	
	

}










public class System_Reflection_CustomAttributeTypedArgument /* System.Reflection.CustomAttributeTypedArgument */: System_ValueType {
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(argumentType: System_Type? /* System.Type */, value: System_Object? /* System.Object */) throws {
		let argumentTypeC = argumentType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Create(argumentTypeC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Create_1(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getArgumentType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_ArgumentType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_CustomAttributeTypedArgument_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeTypedArgument_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Reflection_CustomAttributeTypedArgument_Array /* System.Reflection.CustomAttributeTypedArgument[] */: System_Array {
	

}















public class System_Reflection_CustomAttributeNamedArgument /* System.Reflection.CustomAttributeNamedArgument */: System_ValueType {
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Reflection_CustomAttributeNamedArgument? /* System.Reflection.CustomAttributeNamedArgument */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(memberInfo: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, value: System_Object? /* System.Object */) throws {
		let memberInfoC = memberInfo?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Create(memberInfoC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(memberInfo: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, typedArgument: System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */) throws {
		let memberInfoC = memberInfo?.__handle
		let typedArgumentC = typedArgument?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Create_1(memberInfoC, typedArgumentC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getMemberInfo() throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_MemberInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTypedValue() throws -> System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_TypedValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_CustomAttributeTypedArgument(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMemberName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_MemberName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsField() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_IsField_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_CustomAttributeNamedArgument_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeNamedArgument_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Reflection_CustomAttributeNamedArgument_Array /* System.Reflection.CustomAttributeNamedArgument[] */: System_Array {
	

}












public class System_Reflection_MethodBody /* System.Reflection.MethodBody */: System_Object {
	public func getILAsByteArray() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_GetILAsByteArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getLocalSignatureMetadataToken() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_LocalSignatureMetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLocalVariables() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_LocalVariables_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMaxStackSize() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_MaxStackSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getInitLocals() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_InitLocals_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getExceptionHandlingClauses() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_ExceptionHandlingClauses_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_MethodBody_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_MethodBody_Destroy(self.__handle)
		
	
	}
	
	

}










public class System_Reflection_LocalVariableInfo /* System.Reflection.LocalVariableInfo */: System_Object {
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getLocalType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_LocalType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getLocalIndex() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_LocalIndex_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsPinned() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_IsPinned_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_LocalVariableInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_LocalVariableInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_LocalVariableInfo_Array /* System.Reflection.LocalVariableInfo[] */: System_Array {
	

}















public class System_Reflection_ExceptionHandlingClause /* System.Reflection.ExceptionHandlingClause */: System_Object {
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFlags() throws -> System_Reflection_ExceptionHandlingClauseOptions /* System.Reflection.ExceptionHandlingClauseOptions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_Flags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ExceptionHandlingClauseOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTryOffset() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_TryOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTryLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_TryLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHandlerOffset() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_HandlerOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHandlerLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_HandlerLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getFilterOffset() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_FilterOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCatchType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_CatchType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ExceptionHandlingClause_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ExceptionHandlingClause_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_ExceptionHandlingClause_Array /* System.Reflection.ExceptionHandlingClause[] */: System_Array {
	

}







public class System_Collections_IDictionary /* System.Collections.IDictionary */: DNObject {
	public func contains(key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Contains(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func add(key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Add(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getEnumerator() throws -> System_Collections_IDictionaryEnumerator? /* System.Collections.IDictionaryEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionaryEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(key: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Remove(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getKeys() throws -> System_Collections_ICollection? /* System.Collections.ICollection */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Keys_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValues() throws -> System_Collections_ICollection? /* System.Collections.ICollection */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Values_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFixedSize() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IDictionary_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IDictionary_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IDictionaryEnumerator /* System.Collections.IDictionaryEnumerator */: DNObject {
	public func getKey() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEntry() throws -> System_Collections_DictionaryEntry? /* System.Collections.DictionaryEntry */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Entry_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_DictionaryEntry(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IDictionaryEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IDictionaryEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_DictionaryEntry /* System.Collections.DictionaryEntry */: System_ValueType {
	public func deconstruct(key: inout System_Object? /* System.Object */, value: inout System_Object? /* System.Object */) throws {
		var keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Deconstruct(self.__handle, &keyC, &valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Create(keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getKey() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setKey(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Key_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setValue(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Value_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_DictionaryEntry_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_DictionaryEntry_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Tasks_Task /* System.Threading.Tasks.Task */: System_Object {
	public func start() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Start(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func start(scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Start_1(self.__handle, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func runSynchronously() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_RunSynchronously(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func runSynchronously(scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_RunSynchronously_1(self.__handle, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getAwaiter() throws -> System_Runtime_CompilerServices_TaskAwaiter? /* System.Runtime.CompilerServices.TaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_TaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func configureAwait(continueOnCapturedContext: Bool /* System.Boolean */) throws -> System_Runtime_CompilerServices_ConfiguredTaskAwaitable? /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_ConfigureAwait(self.__handle, continueOnCapturedContext, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredTaskAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func yield() throws -> System_Runtime_CompilerServices_YieldAwaitable? /* System.Runtime.CompilerServices.YieldAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Yield(&__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_YieldAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func wait() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Wait(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func wait(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_1(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func wait(timeout: System_TimeSpan? /* System.TimeSpan */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_2(self.__handle, timeoutC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func wait(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Wait_3(self.__handle, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func wait(millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_4(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func wait(millisecondsTimeout: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_5(self.__handle, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func waitAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func waitAsync(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync_1(self.__handle, timeoutC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func waitAsync(timeout: System_TimeSpan? /* System.TimeSpan */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let timeoutC = timeout?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync_2(self.__handle, timeoutC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_WaitAll(tasksC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func waitAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_1(tasksC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_2(tasksC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_WaitAll_3(tasksC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func waitAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, millisecondsTimeout: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_4(tasksC, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny(tasksC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_1(tasksC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_2(tasksC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, millisecondsTimeout: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_3(tasksC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, millisecondsTimeout: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_4(tasksC, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromException(exception: System_Exception? /* System.Exception */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_FromException(exceptionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromCanceled(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_FromCanceled(cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Run_1)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Run_2)
	public class func delay(delay: System_TimeSpan? /* System.TimeSpan */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay(delayC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func delay(delay: System_TimeSpan? /* System.TimeSpan */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let delayC = delay?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_1(delayC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func delay(millisecondsDelay: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_2(millisecondsDelay, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func delay(millisecondsDelay: Int32 /* System.Int32 */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_3(millisecondsDelay, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func whenAll(tasks: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAll(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func whenAll(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAll_1(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func whenAny(tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func whenAny(task1: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */, task2: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let task1C = task1?.__handle
		let task2C = task2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny_1(task1C, task2C, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func whenAny(tasks: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny_2(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Create)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Create_1)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Create_2)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_Task_Create_3)
	public func getId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getCurrentId() throws -> System_Nullable_A1? /* System.Nullable<System.Int32> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_CurrentId_Get(&__exceptionC)
		
		let __returnValue = System_Nullable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getException() throws -> System_AggregateException? /* System.AggregateException */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Exception_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_AggregateException(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getStatus() throws -> System_Threading_Tasks_TaskStatus /* System.Threading.Tasks.TaskStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Status_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsCanceled() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsCompletedSuccessfully() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCompletedSuccessfully_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCreationOptions() throws -> System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_CreationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskCreationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAsyncState() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_AsyncState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getFactory() throws -> System_Threading_Tasks_TaskFactory? /* System.Threading.Tasks.TaskFactory */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Factory_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskFactory(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getCompletedTask() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_CompletedTask_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsFaulted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsFaulted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Tasks_Task_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Tasks_Task_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IAsyncResult /* System.IAsyncResult */: DNObject {
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getAsyncWaitHandle() throws -> System_Threading_WaitHandle? /* System.Threading.WaitHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_AsyncWaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_WaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAsyncState() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_AsyncState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCompletedSynchronously() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_CompletedSynchronously_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IAsyncResult_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IAsyncResult_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Tasks_TaskScheduler /* System.Threading.Tasks.TaskScheduler */: System_Object {
	public class func fromCurrentSynchronizationContext() throws -> System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMaximumConcurrencyLevel() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getDefault() throws -> System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Default_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getCurrent() throws -> System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Current_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Tasks_TaskScheduler_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Tasks_TaskScheduler_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_AggregateException /* System.AggregateException */: System_Exception {
	public override func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AggregateException_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func getBaseException() throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_GetBaseException(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func flatten() throws -> System_AggregateException? /* System.AggregateException */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Flatten(self.__handle, &__exceptionC)
		
		let __returnValue = System_AggregateException(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(innerExceptions: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Exception> */) throws {
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_3(innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(innerExceptions: System_Exception_Array? /* System.Exception[] */) throws {
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_4(innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerExceptions: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Exception> */) throws {
		let messageC = message?.__handle
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_5(messageC, innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerExceptions: System_Exception_Array? /* System.Exception[] */) throws {
		let messageC = message?.__handle
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_6(messageC, innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getInnerExceptions() throws -> System_Collections_ObjectModel_ReadOnlyCollection_A1? /* System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_InnerExceptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ObjectModel_ReadOnlyCollection_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override func getMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Message_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_AggregateException_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_AggregateException_Destroy(self.__handle)
		
	
	}
	
	

}












public class System_Exception_Array /* System.Exception[] */: System_Array {
	

}







public class System_Threading_Tasks_TaskFactory /* System.Threading.Tasks.TaskFactory */: System_Object {
	// TODO: Method with Delegate parameter (System_Threading_Tasks_TaskFactory_StartNew)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_TaskFactory_StartNew_1)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_TaskFactory_StartNew_2)
	// TODO: Method with Delegate parameter (System_Threading_Tasks_TaskFactory_StartNew_3)
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_1(cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_2(schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */, continuationOptions: System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */) throws {
		let creationOptionsC = creationOptions.cValue
		let continuationOptionsC = continuationOptions.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_3(creationOptionsC, continuationOptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */, continuationOptions: System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */, scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		let creationOptionsC = creationOptions.cValue
		let continuationOptionsC = continuationOptions.cValue
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_4(cancellationTokenC, creationOptionsC, continuationOptionsC, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCancellationToken() throws -> System_Threading_CancellationToken? /* System.Threading.CancellationToken */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_CancellationToken_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getScheduler() throws -> System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Scheduler_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCreationOptions() throws -> System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_CreationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskCreationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getContinuationOptions() throws -> System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_ContinuationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskContinuationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Tasks_TaskFactory_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Tasks_TaskFactory_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
public class System_Threading_Tasks_Task_Array /* System.Threading.Tasks.Task[] */: System_Array {
	

}















public class System_Runtime_CompilerServices_TaskAwaiter /* System.Runtime.CompilerServices.TaskAwaiter */: System_ValueType {
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_TaskAwaiter_OnCompleted)
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted)
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_TaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_TaskAwaiter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_TaskAwaiter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_ICriticalNotifyCompletion /* System.Runtime.CompilerServices.ICriticalNotifyCompletion */: DNObject {
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ICriticalNotifyCompletion_UnsafeOnCompleted)
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ICriticalNotifyCompletion_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ICriticalNotifyCompletion_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_INotifyCompletion /* System.Runtime.CompilerServices.INotifyCompletion */: DNObject {
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_INotifyCompletion_OnCompleted)
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_INotifyCompletion_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_INotifyCompletion_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_ConfiguredTaskAwaitable /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */: System_ValueType {
	public func getAwaiter() throws -> System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter? /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredTaskAwaitable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */: System_ValueType {
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted)
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted)
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_YieldAwaitable /* System.Runtime.CompilerServices.YieldAwaitable */: System_ValueType {
	public func getAwaiter() throws -> System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter? /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_YieldAwaitable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_YieldAwaitable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */: System_ValueType {
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted)
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted)
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TResult" was skipped. Reason: It has no full name.
// Type "Task`1" was skipped. Reason: It has no full name.
// Type "TResult[]" was skipped. Reason: It has no full name.
// Type "TResult" was skipped. Reason: It has no full name.

// Type "TaskFactory`1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TaskAwaiter`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaitable`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaiter" was skipped. Reason: It has no full name.
// Type "Task`1" was skipped. Reason: It has no full name.
// Type "TResult[]" was skipped. Reason: It has no full name.
// Type "TResult" was skipped. Reason: It has no full name.

// Type "TaskFactory`1" was skipped. Reason: It has no full name.
// Type "TaskAwaiter`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaitable`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaiter" was skipped. Reason: It has no full name.










public class System_Runtime_CompilerServices_ValueTaskAwaiter /* System.Runtime.CompilerServices.ValueTaskAwaiter */: System_ValueType {
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted)
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted)
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ValueTaskAwaiter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */: System_ValueType {
	public func getAwaiter() throws -> System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter? /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */: System_ValueType {
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted)
	// TODO: Method with Delegate parameter (System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted)
	public func getIsCompleted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Tasks_Sources_IValueTaskSource /* System.Threading.Tasks.Sources.IValueTaskSource */: DNObject {
	public func getStatus(token: Int16 /* System.Int16 */) throws -> System_Threading_Tasks_Sources_ValueTaskSourceStatus /* System.Threading.Tasks.Sources.ValueTaskSourceStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Sources_IValueTaskSource_GetStatus(self.__handle, token, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Sources_ValueTaskSourceStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getResult(token: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Sources_IValueTaskSource_GetResult(self.__handle, token, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Tasks_Sources_IValueTaskSource_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Tasks_Sources_IValueTaskSource_Destroy(self.__handle)
		
	
	}
	
	

}




































public class System_Buffers_MemoryHandle /* System.Buffers.MemoryHandle */: System_ValueType {
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Buffers_MemoryHandle_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Buffers_MemoryHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Buffers_MemoryHandle_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_InteropServices_GCHandle /* System.Runtime.InteropServices.GCHandle */: System_ValueType {
	public class func alloc(value: System_Object? /* System.Object */) throws -> System_Runtime_InteropServices_GCHandle? /* System.Runtime.InteropServices.GCHandle */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_Alloc(valueC, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_GCHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func alloc(value: System_Object? /* System.Object */, type: System_Runtime_InteropServices_GCHandleType /* System.Runtime.InteropServices.GCHandleType */) throws -> System_Runtime_InteropServices_GCHandle? /* System.Runtime.InteropServices.GCHandle */ {
		let valueC = value?.__handle
		let typeC = type.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_Alloc_1(valueC, typeC, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_GCHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func free() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_GCHandle_Free(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addrOfPinnedObject() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_AddrOfPinnedObject(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromIntPtr(value: Int /* System.IntPtr */) throws -> System_Runtime_InteropServices_GCHandle? /* System.Runtime.InteropServices.GCHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_GCHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toIntPtr(value: System_Runtime_InteropServices_GCHandle? /* System.Runtime.InteropServices.GCHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Runtime_InteropServices_GCHandle? /* System.Runtime.InteropServices.GCHandle */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getTarget() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_Target_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setTarget(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_GCHandle_Target_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsAllocated() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_GCHandle_IsAllocated_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_InteropServices_GCHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_InteropServices_GCHandle_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Buffers_IPinnable /* System.Buffers.IPinnable */: DNObject {
	public func pin(elementIndex: Int32 /* System.Int32 */) throws -> System_Buffers_MemoryHandle? /* System.Buffers.MemoryHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Buffers_IPinnable_Pin(self.__handle, elementIndex, &__exceptionC)
		
		let __returnValue = System_Buffers_MemoryHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func unpin() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Buffers_IPinnable_Unpin(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Buffers_IPinnable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Buffers_IPinnable_Destroy(self.__handle)
		
	
	}
	
	

}


public class Microsoft_Win32_SafeHandles_SafeFileHandle /* Microsoft.Win32.SafeHandles.SafeFileHandle */: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid {
	public convenience init?(preexistingHandle: Int /* System.IntPtr */, ownsHandle: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_Create(preexistingHandle, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getIsAsync() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override func getIsInvalid() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeFileHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_FileStreamOptions /* System.IO.FileStreamOptions */: System_Object {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getMode() throws -> System_IO_FileMode /* System.IO.FileMode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Mode_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMode(value: System_IO_FileMode /* System.IO.FileMode */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Mode_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAccess() throws -> System_IO_FileAccess /* System.IO.FileAccess */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Access_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAccess(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAccess(value: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Access_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getShare() throws -> System_IO_FileShare /* System.IO.FileShare */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Share_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileShare(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setShare(value: System_IO_FileShare /* System.IO.FileShare */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Share_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getOptions() throws -> System_IO_FileOptions /* System.IO.FileOptions */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Options_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setOptions(value: System_IO_FileOptions /* System.IO.FileOptions */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Options_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPreallocationSize() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_PreallocationSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setPreallocationSize(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_PreallocationSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getBufferSize() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_BufferSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setBufferSize(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_BufferSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getUnixCreateMode() throws -> System_Nullable_A1? /* System.Nullable<System.IO.UnixFileMode> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_UnixCreateMode_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Nullable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setUnixCreateMode(value: System_Nullable_A1? /* System.Nullable<System.IO.UnixFileMode> */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_UnixCreateMode_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_FileStreamOptions_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_FileStreamOptions_Destroy(self.__handle)
		
	
	}
	
	

}








public class System_Reflection_TypeInfo /* System.Reflection.TypeInfo */: System_Type {
	public func asType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_AsType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredEvent(name: System_String? /* System.String */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredEvent(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredField(name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredMethod(name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredNestedType(name: System_String? /* System.String */) throws -> System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredNestedType(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredProperty(name: System_String? /* System.String */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredProperty(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDeclaredMethods(name: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredMethods(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isAssignableFrom(typeInfo: System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */) throws -> Bool /* System.Boolean */ {
		let typeInfoC = typeInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_IsAssignableFrom(self.__handle, typeInfoC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getGenericTypeParameters() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GenericTypeParameters_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredConstructors() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredConstructors_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredEvents() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.EventInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredEvents_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredFields() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredFields_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredMembers() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredMembers_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredMethods() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredMethods_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredNestedTypes() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredNestedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDeclaredProperties() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredProperties_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getImplementedInterfaces() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Type> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_ImplementedInterfaces_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_TypeInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_TypeInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_IReflect /* System.Reflection.IReflect */: DNObject {
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethod(self.__handle, nameC, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethod(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethod_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMethods(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethods(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getField(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetField(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFields(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetFields(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperty(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperty(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, returnType: System_Type? /* System.Type */, types: System_Type_Array? /* System.Type[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperty_1(self.__handle, nameC, bindingAttrC, binderC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getProperties(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperties(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMember(name: System_String? /* System.String */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMember(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMembers(bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMembers(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func invokeMember(name: System_String? /* System.String */, invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, target: System_Object? /* System.Object */, args: System_Object_Array? /* System.Object[] */, modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, namedParameters: System_String_Array? /* System.String[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namedParametersC = namedParameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_InvokeMember(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, modifiersC, cultureC, namedParametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getUnderlyingSystemType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_UnderlyingSystemType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_IReflect_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_IReflect_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_MemberInfo_Array /* System.Reflection.MemberInfo[] */: System_Array {
	

}















public class System_Reflection_IReflectableType /* System.Reflection.IReflectableType */: DNObject {
	public func getTypeInfo() throws -> System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflectableType_GetTypeInfo(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_IReflectableType_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_IReflectableType_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_EventInfo /* System.Reflection.EventInfo */: System_Reflection_MemberInfo {
	public func getOtherMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetOtherMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOtherMethods(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetOtherMethods_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAddMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetAddMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRemoveMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRemoveMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRaiseMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRaiseMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAddMethod(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetAddMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRemoveMethod(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRemoveMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getRaiseMethod(nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRaiseMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Reflection_EventInfo_AddEventHandler)
	// TODO: Method with Delegate parameter (System_Reflection_EventInfo_RemoveEventHandler)
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getMemberType() throws -> System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAttributes() throws -> System_Reflection_EventAttributes /* System.Reflection.EventAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_EventAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsSpecialName() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getAddMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_AddMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRemoveMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_RemoveMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRaiseMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_RaiseMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsMulticast() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_IsMulticast_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getEventHandlerType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_EventHandlerType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_EventInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_EventInfo_Destroy(self.__handle)
		
	
	}
	
	

}










public class System_Reflection_ManifestResourceInfo /* System.Reflection.ManifestResourceInfo */: System_Object {
	public convenience init?(containingAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */, containingFileName: System_String? /* System.String */, resourceLocation: System_Reflection_ResourceLocation /* System.Reflection.ResourceLocation */) throws {
		let containingAssemblyC = containingAssembly?.__handle
		let containingFileNameC = containingFileName?.__handle
		let resourceLocationC = resourceLocation.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_Create(containingAssemblyC, containingFileNameC, resourceLocationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getReferencedAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFileName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_FileName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getResourceLocation() throws -> System_Reflection_ResourceLocation /* System.Reflection.ResourceLocation */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_ResourceLocation_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ResourceLocation(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_ManifestResourceInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_ManifestResourceInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_ResolveEventArgs /* System.ResolveEventArgs */: System_EventArgs {
	public convenience init?(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(name: System_String? /* System.String */, requestingAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws {
		let nameC = name?.__handle
		let requestingAssemblyC = requestingAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Create_1(nameC, requestingAssemblyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRequestingAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_RequestingAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_ResolveEventArgs_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_ResolveEventArgs_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_EventArgs /* System.EventArgs */: System_Object {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_EventArgs_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getEmpty() -> System_EventArgs? /* System.EventArgs */ {
		
		
		let __returnValueC = System_EventArgs_Empty_Get()
		
		let __returnValue = System_EventArgs(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_EventArgs_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_EventArgs_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Reflection_Module_Array /* System.Reflection.Module[] */: System_Array {
	

}















public class System_Reflection_AssemblyName_Array /* System.Reflection.AssemblyName[] */: System_Array {
	

}















public class System_IO_FileStream_Array /* System.IO.FileStream[] */: System_Array {
	

}















public class System_Text_Rune /* System.Text.Rune */: System_ValueType {
	public func compareTo(other: System_Text_Rune? /* System.Text.Rune */) throws -> Int32 /* System.Int32 */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_CompareTo(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getRuneAt(input: System_String? /* System.String */, index: Int32 /* System.Int32 */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetRuneAt(inputC, index, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isValid(value: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsValid(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isValid(value: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsValid_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryCreate(ch: UInt8 /* System.Char */, result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate(ch, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryCreate(highSurrogate: UInt8 /* System.Char */, lowSurrogate: UInt8 /* System.Char */, result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_1(highSurrogate, lowSurrogate, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryCreate(value: Int32 /* System.Int32 */, result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_2(value, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryCreate(value: UInt32 /* System.UInt32 */, result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_3(value, &resultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryGetRuneAt(input: System_String? /* System.String */, index: Int32 /* System.Int32 */, value: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryGetRuneAt(inputC, index, &valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getNumericValue(value: System_Text_Rune? /* System.Text.Rune */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetNumericValue(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getUnicodeCategory(value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Globalization_UnicodeCategory /* System.Globalization.UnicodeCategory */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetUnicodeCategory(valueC, &__exceptionC)
		
		let __returnValue = System_Globalization_UnicodeCategory(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isControl(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsControl(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDigit(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsDigit(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isLetter(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLetter(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isLetterOrDigit(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLetterOrDigit(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isLower(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLower(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isNumber(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsNumber(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isPunctuation(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsPunctuation(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isSeparator(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsSeparator(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isSymbol(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsSymbol(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isUpper(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsUpper(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isWhiteSpace(value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsWhiteSpace(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toLower(value: System_Text_Rune? /* System.Text.Rune */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToLower(valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toLowerInvariant(value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToLowerInvariant(valueC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toUpper(value: System_Text_Rune? /* System.Text.Rune */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToUpper(valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toUpperInvariant(value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToUpperInvariant(valueC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(ch: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create(ch, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(highSurrogate: UInt8 /* System.Char */, lowSurrogate: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_1(highSurrogate, lowSurrogate, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getIsAscii() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsAscii_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsBmp() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsBmp_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPlane() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Plane_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getReplacementChar() throws -> System_Text_Rune? /* System.Text.Rune */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ReplacementChar_Get(&__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getUtf16SequenceLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Utf16SequenceLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getUtf8SequenceLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Utf8SequenceLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getValue() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_Rune_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_Rune_Destroy(self.__handle)
		
	
	}
	
	

}







public class System_Globalization_SortKey /* System.Globalization.SortKey */: System_Object {
	public class func compare(sortkey1: System_Globalization_SortKey? /* System.Globalization.SortKey */, sortkey2: System_Globalization_SortKey? /* System.Globalization.SortKey */) throws -> Int32 /* System.Int32 */ {
		let sortkey1C = sortkey1?.__handle
		let sortkey2C = sortkey2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_Compare(sortkey1C, sortkey2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getOriginalString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_OriginalString_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getKeyData() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_KeyData_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_SortKey_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_SortKey_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Globalization_SortVersion /* System.Globalization.SortVersion */: System_Object {
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(other: System_Globalization_SortVersion? /* System.Globalization.SortVersion */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(fullVersion: Int32 /* System.Int32 */, sortId: System_Guid? /* System.Guid */) throws {
		let sortIdC = sortId?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Create(fullVersion, sortIdC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getFullVersion() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_FullVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSortId() throws -> System_Guid? /* System.Guid */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_SortId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_SortVersion_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_SortVersion_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Globalization_TextInfo /* System.Globalization.TextInfo */: System_Object {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(textInfo: System_Globalization_TextInfo? /* System.Globalization.TextInfo */) throws -> System_Globalization_TextInfo? /* System.Globalization.TextInfo */ {
		let textInfoC = textInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ReadOnly(textInfoC, &__exceptionC)
		
		let __returnValue = System_Globalization_TextInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toLower(c: UInt8 /* System.Char */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToLower(self.__handle, c, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toLower(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToLower_1(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toUpper(c: UInt8 /* System.Char */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToUpper(self.__handle, c, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func toUpper(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToUpper_1(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toTitleCase(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToTitleCase(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getANSICodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ANSICodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getOEMCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_OEMCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMacCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_MacCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getEBCDICCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_EBCDICCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLCID() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCultureName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_CultureName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getListSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ListSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setListSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_TextInfo_ListSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsRightToLeft() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_IsRightToLeft_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_TextInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_TextInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Globalization_NumberFormatInfo /* System.Globalization.NumberFormatInfo */: System_Object {
	public class func getInstance(formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_GetInstance(formatProviderC, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFormat(formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(nfi: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */) throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		let nfiC = nfi?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_ReadOnly(nfiC, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getInvariantInfo() throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_InvariantInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCurrencyDecimalDigits() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCurrencyDecimalDigits(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrencyDecimalSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrencyDecimalSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCurrencyGroupSizes() throws -> System_Int32_Array? /* System.Int32[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrencyGroupSizes(value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNumberGroupSizes() throws -> System_Int32_Array? /* System.Int32[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNumberGroupSizes(value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentGroupSizes() throws -> System_Int32_Array? /* System.Int32[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPercentGroupSizes(value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrencyGroupSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrencyGroupSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrencySymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrencySymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getCurrentInfo() throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrentInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNaNSymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NaNSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNaNSymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NaNSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrencyNegativePattern() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCurrencyNegativePattern(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNumberNegativePattern() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setNumberNegativePattern(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentPositivePattern() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentPositivePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setPercentPositivePattern(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentPositivePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentNegativePattern() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setPercentNegativePattern(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNegativeInfinitySymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNegativeInfinitySymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNegativeSign() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NegativeSign_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNegativeSign(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NegativeSign_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNumberDecimalDigits() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setNumberDecimalDigits(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNumberDecimalSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNumberDecimalSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNumberGroupSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNumberGroupSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrencyPositivePattern() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCurrencyPositivePattern(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPositiveInfinitySymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPositiveInfinitySymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPositiveSign() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PositiveSign_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPositiveSign(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PositiveSign_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentDecimalDigits() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setPercentDecimalDigits(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentDecimalSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPercentDecimalSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentGroupSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPercentGroupSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPercentSymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPercentSymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPerMilleSymbol() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PerMilleSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPerMilleSymbol(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PerMilleSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNativeDigits() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NativeDigits_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNativeDigits(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NativeDigits_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDigitSubstitution() throws -> System_Globalization_DigitShapes /* System.Globalization.DigitShapes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_DigitSubstitution_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_DigitShapes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDigitSubstitution(value: System_Globalization_DigitShapes /* System.Globalization.DigitShapes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_DigitSubstitution_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_NumberFormatInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_NumberFormatInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Globalization_DateTimeFormatInfo /* System.Globalization.DateTimeFormatInfo */: System_Object {
	public class func getInstance(provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetInstance(providerC, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFormat(formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEra(eraName: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let eraNameC = eraName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetEra(self.__handle, eraNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getEraName(era: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetEraName(self.__handle, era, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAbbreviatedEraName(era: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName(self.__handle, era, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAbbreviatedDayName(dayofweek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayofweekC = dayofweek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName(self.__handle, dayofweekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getShortestDayName(dayOfWeek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayOfWeekC = dayOfWeek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetShortestDayName(self.__handle, dayOfWeekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAllDateTimePatterns() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAllDateTimePatterns(format: UInt8 /* System.Char */) throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_1(self.__handle, format, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDayName(dayofweek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayofweekC = dayofweek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetDayName(self.__handle, dayofweekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getAbbreviatedMonthName(month: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName(self.__handle, month, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMonthName(month: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetMonthName(self.__handle, month, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(dtfi: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */) throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		let dtfiC = dtfi?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ReadOnly(dtfiC, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAllDateTimePatterns(patterns: System_String_Array? /* System.String[] */, format: UInt8 /* System.Char */) throws {
		let patternsC = patterns?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns(self.__handle, patternsC, format, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getInvariantInfo() throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_InvariantInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getCurrentInfo() throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_CurrentInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAMDesignator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AMDesignator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAMDesignator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AMDesignator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCalendar() throws -> System_Globalization_Calendar? /* System.Globalization.Calendar */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Calendar_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCalendar(value: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_Calendar_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDateSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_DateSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDateSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_DateSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFirstDayOfWeek() throws -> System_DayOfWeek /* System.DayOfWeek */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFirstDayOfWeek(value: System_DayOfWeek /* System.DayOfWeek */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCalendarWeekRule() throws -> System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CalendarWeekRule(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCalendarWeekRule(value: System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFullDateTimePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFullDateTimePattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLongDatePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_LongDatePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLongDatePattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_LongDatePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLongTimePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_LongTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLongTimePattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_LongTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMonthDayPattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMonthDayPattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getPMDesignator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_PMDesignator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPMDesignator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_PMDesignator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getRFC1123Pattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getShortDatePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setShortDatePattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getShortTimePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setShortTimePattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getSortableDateTimePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTimeSeparator() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_TimeSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setTimeSeparator(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_TimeSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getUniversalSortableDateTimePattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getYearMonthPattern() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setYearMonthPattern(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAbbreviatedDayNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAbbreviatedDayNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getShortestDayNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortestDayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setShortestDayNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortestDayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDayNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_DayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDayNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_DayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAbbreviatedMonthNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAbbreviatedMonthNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMonthNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMonthNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getNativeCalendarName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAbbreviatedMonthGenitiveNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAbbreviatedMonthGenitiveNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMonthGenitiveNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMonthGenitiveNames(value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Globalization_DateTimeFormatInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Globalization_DateTimeFormatInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Globalization_Calendar_Array /* System.Globalization.Calendar[] */: System_Array {
	

}























// Type "TState" was skipped. Reason: It has no full name.
public class System_Char_Array /* System.Char[] */: System_Array {
	

}










public class System_CharEnumerator /* System.CharEnumerator */: System_Object {
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_CharEnumerator_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_CharEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCurrent() throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_CharEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_CharEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_StringRuneEnumerator /* System.Text.StringRuneEnumerator */: System_ValueType {
	public func getEnumerator() throws -> System_Text_StringRuneEnumerator? /* System.Text.StringRuneEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringRuneEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCurrent() throws -> System_Text_Rune? /* System.Text.Rune */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_StringRuneEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_StringRuneEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}






public class System_Text_CompositeFormat /* System.Text.CompositeFormat */: System_Object {
	public class func parse(format: System_String? /* System.String */) throws -> System_Text_CompositeFormat? /* System.Text.CompositeFormat */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_Parse(formatC, &__exceptionC)
		
		let __returnValue = System_Text_CompositeFormat(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryParse(format: System_String? /* System.String */, compositeFormat: inout System_Text_CompositeFormat? /* System.Text.CompositeFormat */) throws -> Bool /* System.Boolean */ {
		let formatC = format?.__handle
		var compositeFormatC = compositeFormat?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_TryParse(formatC, &compositeFormatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getFormat() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_Format_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_CompositeFormat_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_CompositeFormat_Destroy(self.__handle)
		
	
	}
	
	

}



// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
public class System_Text_Encoding /* System.Text.Encoding */: System_Object {
	public class func convert(srcEncoding: System_Text_Encoding? /* System.Text.Encoding */, dstEncoding: System_Text_Encoding? /* System.Text.Encoding */, bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let srcEncodingC = srcEncoding?.__handle
		let dstEncodingC = dstEncoding?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Convert(srcEncodingC, dstEncodingC, bytesC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func convert(srcEncoding: System_Text_Encoding? /* System.Text.Encoding */, dstEncoding: System_Text_Encoding? /* System.Text.Encoding */, bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let srcEncodingC = srcEncoding?.__handle
		let dstEncodingC = dstEncoding?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Convert_1(srcEncodingC, dstEncodingC, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func registerProvider(provider: System_Text_EncodingProvider? /* System.Text.EncodingProvider */) throws {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_RegisterProvider(providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getEncoding(codepage: Int32 /* System.Int32 */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding(codepage, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getEncoding(codepage: Int32 /* System.Int32 */, encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_1(codepage, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getEncoding(name: System_String? /* System.String */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_2(nameC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getEncoding(name: System_String? /* System.String */, encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_3(nameC, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getEncodings() throws -> System_Text_EncodingInfo_Array? /* System.Text.EncodingInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncodings(&__exceptionC)
		
		let __returnValue = System_Text_EncodingInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getPreamble() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetPreamble(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getByteCount(chars: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount(self.__handle, charsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getByteCount(s: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_1(self.__handle, sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getByteCount(chars: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_2(self.__handle, charsC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getByteCount(s: System_String? /* System.String */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_3(self.__handle, sC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getBytes(chars: System_Char_Array? /* System.Char[] */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes(self.__handle, charsC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBytes(chars: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_1(self.__handle, charsC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBytes(chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */, bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_2(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getBytes(s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_3(self.__handle, sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBytes(s: System_String? /* System.String */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_4(self.__handle, sC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getBytes(s: System_String? /* System.String */, charIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */, bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_5(self.__handle, sC, charIndex, charCount, bytesC, byteIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCharCount(bytes: System_Byte_Array? /* System.Byte[] */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetCharCount(self.__handle, bytesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCharCount(bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetCharCount_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getChars(bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_Char_Array? /* System.Char[] */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars(self.__handle, bytesC, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getChars(bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Char_Array? /* System.Char[] */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getChars(bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, byteCount: Int32 /* System.Int32 */, chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars_2(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isAlwaysNormalized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsAlwaysNormalized(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isAlwaysNormalized(form: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> Bool /* System.Boolean */ {
		let formC = form.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsAlwaysNormalized_1(self.__handle, formC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getDecoder() throws -> System_Text_Decoder? /* System.Text.Decoder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetDecoder(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Decoder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEncoder() throws -> System_Text_Encoder? /* System.Text.Encoder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoder(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getMaxByteCount(charCount: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetMaxByteCount(self.__handle, charCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getMaxCharCount(byteCount: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetMaxCharCount(self.__handle, byteCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getString(bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetString(self.__handle, bytesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getString(bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetString_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func createTranscodingStream(innerStream: System_IO_Stream? /* System.IO.Stream */, innerStreamEncoding: System_Text_Encoding? /* System.Text.Encoding */, outerStreamEncoding: System_Text_Encoding? /* System.Text.Encoding */, leaveOpen: Bool /* System.Boolean */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let innerStreamC = innerStream?.__handle
		let innerStreamEncodingC = innerStreamEncoding?.__handle
		let outerStreamEncodingC = outerStreamEncoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_CreateTranscodingStream(innerStreamC, innerStreamEncodingC, outerStreamEncodingC, leaveOpen, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDefault() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Default_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getBodyName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_BodyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEncodingName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_EncodingName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getHeaderName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_HeaderName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getWebName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_WebName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getWindowsCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_WindowsCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsBrowserDisplay() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsBrowserDisplay_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsBrowserSave() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsBrowserSave_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsMailNewsDisplay() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsMailNewsDisplay_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsMailNewsSave() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsMailNewsSave_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSingleByte() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsSingleByte_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getEncoderFallback() throws -> System_Text_EncoderFallback? /* System.Text.EncoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_EncoderFallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setEncoderFallback(value: System_Text_EncoderFallback? /* System.Text.EncoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_EncoderFallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDecoderFallback() throws -> System_Text_DecoderFallback? /* System.Text.DecoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_DecoderFallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDecoderFallback(value: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_DecoderFallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getASCII() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_ASCII_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getLatin1() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Latin1_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_CodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getUnicode() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Unicode_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getBigEndianUnicode() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_BigEndianUnicode_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getUTF7() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF7_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getUTF8() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF8_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getUTF32() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF32_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_Encoding_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_Encoding_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_EncodingProvider /* System.Text.EncodingProvider */: System_Object {
	public func getEncoding(name: System_String? /* System.String */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEncoding(codepage: Int32 /* System.Int32 */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_1(self.__handle, codepage, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEncoding(name: System_String? /* System.String */, encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_2(self.__handle, nameC, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEncoding(codepage: Int32 /* System.Int32 */, encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_3(self.__handle, codepage, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEncodings() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Text.EncodingInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncodings(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_EncodingProvider_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_EncodingProvider_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_EncoderFallback /* System.Text.EncoderFallback */: System_Object {
	public func createFallbackBuffer() throws -> System_Text_EncoderFallbackBuffer? /* System.Text.EncoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_CreateFallbackBuffer(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getReplacementFallback() throws -> System_Text_EncoderFallback? /* System.Text.EncoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_ReplacementFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getExceptionFallback() throws -> System_Text_EncoderFallback? /* System.Text.EncoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_ExceptionFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMaxCharCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_MaxCharCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_EncoderFallback_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_EncoderFallback_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_EncoderFallbackBuffer /* System.Text.EncoderFallbackBuffer */: System_Object {
	public func fallback(charUnknown: UInt8 /* System.Char */, index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Fallback(self.__handle, charUnknown, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func fallback(charUnknownHigh: UInt8 /* System.Char */, charUnknownLow: UInt8 /* System.Char */, index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Fallback_1(self.__handle, charUnknownHigh, charUnknownLow, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getNextChar() throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_GetNextChar(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func movePrevious() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_MovePrevious(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_EncoderFallbackBuffer_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getRemaining() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Remaining_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_EncoderFallbackBuffer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_EncoderFallbackBuffer_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_DecoderFallback /* System.Text.DecoderFallback */: System_Object {
	public func createFallbackBuffer() throws -> System_Text_DecoderFallbackBuffer? /* System.Text.DecoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_CreateFallbackBuffer(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getReplacementFallback() throws -> System_Text_DecoderFallback? /* System.Text.DecoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_ReplacementFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getExceptionFallback() throws -> System_Text_DecoderFallback? /* System.Text.DecoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_ExceptionFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getMaxCharCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_MaxCharCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_DecoderFallback_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_DecoderFallback_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_DecoderFallbackBuffer /* System.Text.DecoderFallbackBuffer */: System_Object {
	public func fallback(bytesUnknown: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let bytesUnknownC = bytesUnknown?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_Fallback(self.__handle, bytesUnknownC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getNextChar() throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_GetNextChar(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func movePrevious() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_MovePrevious(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_DecoderFallbackBuffer_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getRemaining() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_Remaining_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_DecoderFallbackBuffer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_DecoderFallbackBuffer_Destroy(self.__handle)
		
	
	}
	
	

}






public class System_Text_EncodingInfo /* System.Text.EncodingInfo */: System_Object {
	public func getEncoding() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_GetEncoding(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?(provider: System_Text_EncodingProvider? /* System.Text.EncodingProvider */, codePage: Int32 /* System.Int32 */, name: System_String? /* System.String */, displayName: System_String? /* System.String */) throws {
		let providerC = provider?.__handle
		let nameC = name?.__handle
		let displayNameC = displayName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Create(providerC, codePage, nameC, displayNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCodePage() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_CodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDisplayName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_DisplayName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_EncodingInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_EncodingInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_EncodingInfo_Array /* System.Text.EncodingInfo[] */: System_Array {
	

}











public class System_Text_Decoder /* System.Text.Decoder */: System_Object {
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCharCount(bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetCharCount(self.__handle, bytesC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCharCount(bytes: System_Byte_Array? /* System.Byte[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetCharCount_1(self.__handle, bytesC, index, count, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getChars(bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, byteCount: Int32 /* System.Int32 */, chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetChars(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getChars(bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, byteCount: Int32 /* System.Int32 */, chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetChars_1(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func convert(bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, byteCount: Int32 /* System.Int32 */, chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */, bytesUsed: inout Int32? /* System.Int32 */, charsUsed: inout Int32? /* System.Int32 */, completed: inout Bool? /* System.Boolean */) throws {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Convert(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, charCount, flush, &bytesUsed, &charsUsed, &completed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getFallback() throws -> System_Text_DecoderFallback? /* System.Text.DecoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_Fallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFallback(value: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Fallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFallbackBuffer() throws -> System_Text_DecoderFallbackBuffer? /* System.Text.DecoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_FallbackBuffer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_Decoder_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_Decoder_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_Encoder /* System.Text.Encoder */: System_Object {
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getByteCount(chars: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_GetByteCount(self.__handle, charsC, index, count, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getBytes(chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */, bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_GetBytes(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func convert(chars: System_Char_Array? /* System.Char[] */, charIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */, bytes: System_Byte_Array? /* System.Byte[] */, byteIndex: Int32 /* System.Int32 */, byteCount: Int32 /* System.Int32 */, flush: Bool /* System.Boolean */, charsUsed: inout Int32? /* System.Int32 */, bytesUsed: inout Int32? /* System.Int32 */, completed: inout Bool? /* System.Boolean */) throws {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Convert(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, byteCount, flush, &charsUsed, &bytesUsed, &completed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getFallback() throws -> System_Text_EncoderFallback? /* System.Text.EncoderFallback */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_Fallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFallback(value: System_Text_EncoderFallback? /* System.Text.EncoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Fallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFallbackBuffer() throws -> System_Text_EncoderFallbackBuffer? /* System.Text.EncoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_FallbackBuffer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_Encoder_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_Encoder_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum[]" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.
























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.








// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.


public class System_Int64_Array /* System.Int64[] */: System_Array {
	

}














// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TOutput[]" was skipped. Reason: It has no full name.
// Type "TOutput" was skipped. Reason: It has no full name.

// Type "TInput[]" was skipped. Reason: It has no full name.
// Type "TInput" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.













public class System_Runtime_InteropServices_StructLayoutAttribute /* System.Runtime.InteropServices.StructLayoutAttribute */: System_Attribute {
	public convenience init?(layoutKind: System_Runtime_InteropServices_LayoutKind /* System.Runtime.InteropServices.LayoutKind */) throws {
		let layoutKindC = layoutKind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Create(layoutKindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(layoutKind: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Create_1(layoutKind, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getValue() throws -> System_Runtime_InteropServices_LayoutKind /* System.Runtime.InteropServices.LayoutKind */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_LayoutKind(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getPack() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get(self.__handle)
		
		return __returnValueC
		
	
	}
	
	public func setPack(value: Int32 /* System.Int32 */) {
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set(self.__handle, value)
		
		
	
	}
	
	
	public func getSize() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Size_Get(self.__handle)
		
		return __returnValueC
		
	
	}
	
	public func setSize(value: Int32 /* System.Int32 */) {
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_Size_Set(self.__handle, value)
		
		
	
	}
	
	
	public func getCharSet() -> System_Runtime_InteropServices_CharSet /* System.Runtime.InteropServices.CharSet */ {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get(self.__handle)
		
		let __returnValue = System_Runtime_InteropServices_CharSet(cValue: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setCharSet(value: System_Runtime_InteropServices_CharSet /* System.Runtime.InteropServices.CharSet */) {
		let valueC = value.cValue
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_InteropServices_StructLayoutAttribute_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_InteropServices_StructLayoutAttribute_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Attribute /* System.Attribute */: System_Object {
	public class func getCustomAttributes(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_1(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_2(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_3(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isDefined(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_1(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_1(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_2(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_4(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_5(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_6(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_7(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isDefined(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_2(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_3(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_3(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_4(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_8(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Module? /* System.Reflection.Module */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_9(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Module? /* System.Reflection.Module */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_10(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_11(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isDefined(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_4(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_5(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_5(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_Module? /* System.Reflection.Module */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_6(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_12(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_13(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_14(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttributes(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_15(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isDefined(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_6(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isDefined(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_7(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_7(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCustomAttribute(element: System_Reflection_Assembly? /* System.Reflection.Assembly */, attributeType: System_Type? /* System.Type */, inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_8(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func match(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_Match(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isDefaultAttribute() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefaultAttribute(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getTypeId() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_TypeId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Attribute_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Attribute_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Attribute_Array /* System.Attribute[] */: System_Array {
	

}















public class System_Reflection_ConstructorInfo_Array /* System.Reflection.ConstructorInfo[] */: System_Array {
	

}











public class System_Reflection_EventInfo_Array /* System.Reflection.EventInfo[] */: System_Array {
	

}











public class System_Reflection_InterfaceMapping /* System.Reflection.InterfaceMapping */: System_ValueType {
	public func getTargetType() -> System_Type? /* System.Type */ {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_TargetType_Get(self.__handle)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setTargetType(value: System_Type? /* System.Type */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_TargetType_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public func getInterfaceType() -> System_Type? /* System.Type */ {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_InterfaceType_Get(self.__handle)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setInterfaceType(value: System_Type? /* System.Type */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_InterfaceType_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public func getTargetMethods() -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_TargetMethods_Get(self.__handle)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setTargetMethods(value: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_TargetMethods_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public func getInterfaceMethods() -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_InterfaceMethods_Get(self.__handle)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setInterfaceMethods(value: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_InterfaceMethods_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Reflection_InterfaceMapping_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Reflection_InterfaceMapping_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_InteropServices_Marshal /* System.Runtime.InteropServices.Marshal */: System_Object {
	public class func offsetOf(t: System_Type? /* System.Type */, fieldName: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let tC = t?.__handle
		let fieldNameC = fieldName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_OffsetOf(tC, fieldNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readByte(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt16(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt32(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt64(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func writeByte(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */, val: UInt8 /* System.Byte */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt32(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */, val: Int32 /* System.Int32 */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt64(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */, val: Int64 /* System.Int64 */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastPInvokeError() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastPInvokeError(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func setLastPInvokeError(error: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_SetLastPInvokeError(error, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getExceptionPointers() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionPointers(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getExceptionCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionCode(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func structureToPtr(structure: System_Object? /* System.Object */, ptr: Int /* System.IntPtr */, fDeleteOld: Bool /* System.Boolean */) throws {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_StructureToPtr(structureC, ptr, fDeleteOld, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func destroyStructure(ptr: Int /* System.IntPtr */, structuretype: System_Type? /* System.Type */) throws {
		let structuretypeC = structuretype?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_DestroyStructure(ptr, structuretypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func allocHGlobal(cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocHGlobal(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func ptrToStringAnsi(ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAnsi(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringAnsi(ptr: Int /* System.IntPtr */, len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAnsi_1(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringUni(ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUni(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringUni(ptr: Int /* System.IntPtr */, len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUni_1(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringUTF8(ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUTF8(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringUTF8(ptr: Int /* System.IntPtr */, byteLen: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUTF8_1(ptr, byteLen, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func sizeOf(structure: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf(structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sizeOf(T: System_Type /* System.Type */, structure: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_A1(TC, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sizeOf(t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_1(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sizeOf(T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_A1_1(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func queryInterface(pUnk: Int /* System.IntPtr */, iid: inout System_Guid? /* System.Guid */, ppv: inout Int? /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		var iidC = iid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_QueryInterface(pUnk, &iidC, &ppv, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func addRef(pUnk: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AddRef(pUnk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func release(pUnk: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_Release(pUnk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func unsafeAddrOfPinnedArrayElement(arr: System_Array? /* System.Array */, index: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let arrC = arr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement(arrC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func unsafeAddrOfPinnedArrayElement(T: System_Type /* System.Type */, arr: System_Array? /* System.Array */, index: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let arrC = arr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_A1(TC, arrC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func offsetOf(T: System_Type /* System.Type */, fieldName: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let fieldNameC = fieldName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_OffsetOf_A1(TC, fieldNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func copy(source: System_Int32_Array? /* System.Int32[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_1(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Int16_Array? /* System.Int16[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_2(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Int64_Array? /* System.Int64[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_3(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Single_Array? /* System.Single[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_4(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Double_Array? /* System.Double[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_5(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_Byte_Array? /* System.Byte[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_6(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: System_IntPtr_Array? /* System.IntPtr[] */, startIndex: Int32 /* System.Int32 */, destination: Int /* System.IntPtr */, length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_7(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Int32_Array? /* System.Int32[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_8(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_9(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Int16_Array? /* System.Int16[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_10(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Int64_Array? /* System.Int64[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_11(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Single_Array? /* System.Single[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_12(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Double_Array? /* System.Double[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_13(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_Byte_Array? /* System.Byte[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_14(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(source: Int /* System.IntPtr */, destination: System_IntPtr_Array? /* System.IntPtr[] */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_15(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func readByte(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readByte(ptr: Int /* System.IntPtr */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt16(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt16(ptr: Int /* System.IntPtr */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt32(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt32(ptr: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readIntPtr(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readIntPtr(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readIntPtr(ptr: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt64(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readInt64(ptr: Int /* System.IntPtr */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func writeByte(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */, val: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeByte(ptr: Int /* System.IntPtr */, val: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt32(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */, val: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt32(ptr: Int /* System.IntPtr */, val: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeIntPtr(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */, val: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeIntPtr(ptr: System_Object? /* System.Object */, ofs: Int32 /* System.Int32 */, val: Int /* System.IntPtr */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr_1(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeIntPtr(ptr: Int /* System.IntPtr */, val: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt64(ptr: Int /* System.IntPtr */, ofs: Int32 /* System.Int32 */, val: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeInt64(ptr: Int /* System.IntPtr */, val: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func prelink(m: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */) throws {
		let mC = m?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Prelink(mC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func prelinkAll(c: System_Type? /* System.Type */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PrelinkAll(cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func structureToPtr(T: System_Type /* System.Type */, structure: System_Object? /* System.Object */, ptr: Int /* System.IntPtr */, fDeleteOld: Bool /* System.Boolean */) throws {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_StructureToPtr_A1(TC, structureC, ptr, fDeleteOld, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func ptrToStructure(ptr: Int /* System.IntPtr */, structureType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let structureTypeC = structureType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStructure(ptr, structureTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStructure(ptr: Int /* System.IntPtr */, structure: System_Object? /* System.Object */) throws {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PtrToStructure_1(ptr, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func ptrToStructure(T: System_Type /* System.Type */, ptr: Int /* System.IntPtr */, structure: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PtrToStructure_A1(TC, ptr, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func ptrToStructure(T: System_Type /* System.Type */, ptr: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStructure_A1_1(TC, ptr, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func destroyStructure(T: System_Type /* System.Type */, ptr: Int /* System.IntPtr */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_DestroyStructure_A1(TC, ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getHINSTANCE(m: System_Reflection_Module? /* System.Reflection.Module */) throws -> Int /* System.IntPtr */ {
		let mC = m?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHINSTANCE(mC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getExceptionForHR(errorCode: Int32 /* System.Int32 */) throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionForHR(errorCode, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getExceptionForHR(errorCode: Int32 /* System.Int32 */, errorInfo: Int /* System.IntPtr */) throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionForHR_1(errorCode, errorInfo, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func throwExceptionForHR(errorCode: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ThrowExceptionForHR(errorCode, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func throwExceptionForHR(errorCode: Int32 /* System.Int32 */, errorInfo: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_1(errorCode, errorInfo, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func secureStringToBSTR(s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToBSTR(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func secureStringToCoTaskMemAnsi(s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func secureStringToCoTaskMemUnicode(s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func secureStringToGlobalAllocAnsi(s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func secureStringToGlobalAllocUnicode(s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToHGlobalAnsi(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToHGlobalUni(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalUni(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToCoTaskMemUni(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToCoTaskMemUTF8(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemUTF8(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToCoTaskMemAnsi(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func generateGuidForType(type: System_Type? /* System.Type */) throws -> System_Guid? /* System.Guid */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GenerateGuidForType(typeC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func generateProgIdForType(type: System_Type? /* System.Type */) throws -> System_String? /* System.String */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GenerateProgIdForType(typeC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDelegateForFunctionPointer(ptr: Int /* System.IntPtr */, t: System_Type? /* System.Type */) throws -> System_Delegate? /* System.Delegate */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer(ptr, tC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDelegateForFunctionPointer(TDelegate: System_Type /* System.Type */, ptr: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TDelegateC = TDelegate.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_A1(TDelegateC, ptr, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate)
	public class func getFunctionPointerForDelegate(TDelegate: System_Type /* System.Type */, d: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TDelegateC = TDelegate.__handle
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_A1(TDelegateC, dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getHRForLastWin32Error() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func zeroFreeBSTR(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeBSTR(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func zeroFreeCoTaskMemAnsi(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func zeroFreeCoTaskMemUnicode(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func zeroFreeCoTaskMemUTF8(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUTF8(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func zeroFreeGlobalAllocAnsi(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func zeroFreeGlobalAllocUnicode(s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func stringToBSTR(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToBSTR(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func ptrToStringBSTR(ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringBSTR(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTypeFromCLSID(clsid: System_Guid? /* System.Guid */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetTypeFromCLSID(clsidC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func initHandle(safeHandle: System_Runtime_InteropServices_SafeHandle? /* System.Runtime.InteropServices.SafeHandle */, handle: Int /* System.IntPtr */) throws {
		let safeHandleC = safeHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_InitHandle(safeHandleC, handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastWin32Error() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastWin32Error(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getLastPInvokeErrorMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastPInvokeErrorMessage(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getHRForException(e: System_Exception? /* System.Exception */) throws -> Int32 /* System.Int32 */ {
		let eC = e?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHRForException(eC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func areComObjectsAvailableForCleanup() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func createAggregatedObject(pOuter: Int /* System.IntPtr */, o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateAggregatedObject(pOuter, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bindToMoniker(monikerName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let monikerNameC = monikerName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_BindToMoniker(monikerNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func cleanupUnusedObjectsInCurrentContext() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func createAggregatedObject(T: System_Type /* System.Type */, pOuter: Int /* System.IntPtr */, o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateAggregatedObject_A1(TC, pOuter, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func createWrapperOfType(o: System_Object? /* System.Object */, t: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let oC = o?.__handle
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateWrapperOfType(oC, tC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createWrapperOfType(T: System_Type /* System.Type */, TWrapper: System_Type /* System.Type */, o: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let TWrapperC = TWrapper.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateWrapperOfType_A2(TC, TWrapperC, oC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func changeWrapperHandleStrength(otp: System_Object? /* System.Object */, fIsWeak: Bool /* System.Boolean */) throws {
		let otpC = otp?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength(otpC, fIsWeak, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func finalReleaseComObject(o: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_FinalReleaseComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getComInterfaceForObject(o: System_Object? /* System.Object */, T: System_Type? /* System.Type */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		let TC = T?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject(oC, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getComInterfaceForObject(o: System_Object? /* System.Object */, T: System_Type? /* System.Type */, mode: System_Runtime_InteropServices_CustomQueryInterfaceMode /* System.Runtime.InteropServices.CustomQueryInterfaceMode */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		let TC = T?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_1(oC, TC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getComInterfaceForObject(T: System_Type /* System.Type */, TInterface: System_Type /* System.Type */, o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let TInterfaceC = TInterface.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_A2(TC, TInterfaceC, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getComObjectData(obj: System_Object? /* System.Object */, key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComObjectData(objC, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getIDispatchForObject(o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetIDispatchForObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getIUnknownForObject(o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetIUnknownForObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getNativeVariantForObject(obj: System_Object? /* System.Object */, pDstNativeVariant: Int /* System.IntPtr */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_GetNativeVariantForObject(objC, pDstNativeVariant, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getNativeVariantForObject(T: System_Type /* System.Type */, obj: System_Object? /* System.Object */, pDstNativeVariant: Int /* System.IntPtr */) throws {
		let TC = T.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_A1(TC, objC, pDstNativeVariant, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getTypedObjectForIUnknown(pUnk: Int /* System.IntPtr */, t: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown(pUnk, tC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getObjectForIUnknown(pUnk: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForIUnknown(pUnk, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getObjectForNativeVariant(pSrcNativeVariant: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant(pSrcNativeVariant, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getObjectForNativeVariant(T: System_Type /* System.Type */, pSrcNativeVariant: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_A1(TC, pSrcNativeVariant, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getObjectsForNativeVariants(aSrcNativeVariant: Int /* System.IntPtr */, cVars: Int32 /* System.Int32 */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants(aSrcNativeVariant, cVars, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getObjectsForNativeVariants(T: System_Type /* System.Type */, aSrcNativeVariant: Int /* System.IntPtr */, cVars: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_A1(TC, aSrcNativeVariant, cVars, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getStartComSlot(t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetStartComSlot(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getEndComSlot(t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetEndComSlot(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getUniqueObjectForIUnknown(unknown: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown(unknown, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isComObject(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_IsComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isTypeVisibleFromCom(t: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func releaseComObject(o: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReleaseComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func setComObjectData(obj: System_Object? /* System.Object */, key: System_Object? /* System.Object */, data: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		let keyC = key?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SetComObjectData(objC, keyC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func ptrToStringAuto(ptr: Int /* System.IntPtr */, len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAuto(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ptrToStringAuto(ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAuto_1(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func stringToHGlobalAuto(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalAuto(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func stringToCoTaskMemAuto(s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func allocHGlobal(cb: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocHGlobal_1(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func freeHGlobal(hglobal: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeHGlobal(hglobal, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reAllocHGlobal(pv: Int /* System.IntPtr */, cb: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReAllocHGlobal(pv, cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func allocCoTaskMem(cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocCoTaskMem(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func freeCoTaskMem(ptr: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeCoTaskMem(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reAllocCoTaskMem(pv: Int /* System.IntPtr */, cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem(pv, cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func freeBSTR(ptr: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeBSTR(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastSystemError() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastSystemError(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func setLastSystemError(error: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_SetLastSystemError(error, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getPInvokeErrorMessage(error: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetPInvokeErrorMessage(error, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getSystemDefaultCharSize() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SystemDefaultCharSize_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getSystemMaxDBCSCharSize() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_InteropServices_Marshal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_InteropServices_Marshal_Destroy_1(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_Int16_Array /* System.Int16[] */: System_Array {
	

}














public class System_Single_Array /* System.Single[] */: System_Array {
	

}














public class System_Double_Array /* System.Double[] */: System_Array {
	

}














public class System_IntPtr_Array /* System.IntPtr[] */: System_Array {
	

}














// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
public class System_Security_SecureString /* System.Security.SecureString */: System_Object {
	public func appendChar(c: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_AppendChar(self.__handle, c, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copy() throws -> System_Security_SecureString? /* System.Security.SecureString */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecureString(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func insertAt(index: Int32 /* System.Int32 */, c: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_InsertAt(self.__handle, index, c, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func isReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_IsReadOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func makeReadOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_MakeReadOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeAt(index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setAt(index: Int32 /* System.Int32 */, c: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_SetAt(self.__handle, index, c, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_SecureString_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_SecureString_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "TWrapper" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_NullReferenceException /* System.NullReferenceException */: System_SystemException {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_NullReferenceException_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_NullReferenceException_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_SystemException /* System.SystemException */: System_Exception {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(message: System_String? /* System.String */, innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_SystemException_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_SystemException_Destroy(self.__handle)
		
	
	}
	
	

}




























































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_GC /* System.GC */: System_Object {
	public class func getGCMemoryInfo() throws -> System_GCMemoryInfo? /* System.GCMemoryInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGCMemoryInfo(&__exceptionC)
		
		let __returnValue = System_GCMemoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getGCMemoryInfo(kind: System_GCKind /* System.GCKind */) throws -> System_GCMemoryInfo? /* System.GCMemoryInfo */ {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGCMemoryInfo_1(kindC, &__exceptionC)
		
		let __returnValue = System_GCMemoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func addMemoryPressure(bytesAllocated: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_AddMemoryPressure(bytesAllocated, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func removeMemoryPressure(bytesAllocated: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_RemoveMemoryPressure(bytesAllocated, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getGeneration(obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGeneration(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func collect(generation: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect(generation, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func collect() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func collect(generation: Int32 /* System.Int32 */, mode: System_GCCollectionMode /* System.GCCollectionMode */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_2(generation, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func collect(generation: Int32 /* System.Int32 */, mode: System_GCCollectionMode /* System.GCCollectionMode */, blocking: Bool /* System.Boolean */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_3(generation, modeC, blocking, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func collect(generation: Int32 /* System.Int32 */, mode: System_GCCollectionMode /* System.GCCollectionMode */, blocking: Bool /* System.Boolean */, compacting: Bool /* System.Boolean */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_4(generation, modeC, blocking, compacting, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func collectionCount(generation: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_CollectionCount(generation, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func keepAlive(obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_KeepAlive(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getGeneration(wo: System_WeakReference? /* System.WeakReference */) throws -> Int32 /* System.Int32 */ {
		let woC = wo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGeneration_1(woC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func waitForPendingFinalizers() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_WaitForPendingFinalizers(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func suppressFinalize(obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_SuppressFinalize(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func reRegisterForFinalize(obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_ReRegisterForFinalize(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getTotalMemory(forceFullCollection: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalMemory(forceFullCollection, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getAllocatedBytesForCurrentThread() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetAllocatedBytesForCurrentThread(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getTotalAllocatedBytes(precise: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalAllocatedBytes(precise, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func registerForFullGCNotification(maxGenerationThreshold: Int32 /* System.Int32 */, largeObjectHeapThreshold: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_RegisterForFullGCNotification(maxGenerationThreshold, largeObjectHeapThreshold, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func cancelFullGCNotification() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_CancelFullGCNotification(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func waitForFullGCApproach() throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach(&__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitForFullGCApproach(millisecondsTimeout: Int32 /* System.Int32 */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach_1(millisecondsTimeout, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitForFullGCComplete() throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete(&__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitForFullGCComplete(millisecondsTimeout: Int32 /* System.Int32 */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete_1(millisecondsTimeout, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func tryStartNoGCRegion(totalSize: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion(totalSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryStartNoGCRegion(totalSize: Int64 /* System.Int64 */, lohSize: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_1(totalSize, lohSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryStartNoGCRegion(totalSize: Int64 /* System.Int64 */, disallowFullBlockingGC: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_2(totalSize, disallowFullBlockingGC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tryStartNoGCRegion(totalSize: Int64 /* System.Int64 */, lohSize: Int64 /* System.Int64 */, disallowFullBlockingGC: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_3(totalSize, lohSize, disallowFullBlockingGC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func endNoGCRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_EndNoGCRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func allocateUninitializedArray(T: System_Type /* System.Type */, length: Int32 /* System.Int32 */, pinned: Bool /* System.Boolean */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_AllocateUninitializedArray_A1(TC, length, pinned, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func allocateArray(T: System_Type /* System.Type */, length: Int32 /* System.Int32 */, pinned: Bool /* System.Boolean */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_AllocateArray_A1(TC, length, pinned, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTotalPauseDuration() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalPauseDuration(&__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getConfigurationVariables() throws -> System_Collections_Generic_IReadOnlyDictionary_A2? /* System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetConfigurationVariables(&__exceptionC)
		
		let __returnValue = System_Collections_Generic_IReadOnlyDictionary_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitForFullGCApproach(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach_2(timeoutC, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func waitForFullGCComplete(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete_2(timeoutC, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getMaxGeneration() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_MaxGeneration_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_GC_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_GC_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_GCMemoryInfo /* System.GCMemoryInfo */: System_ValueType {
	public func getHighMemoryLoadThresholdBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_HighMemoryLoadThresholdBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMemoryLoadBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_MemoryLoadBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalAvailableMemoryBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_TotalAvailableMemoryBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getHeapSizeBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_HeapSizeBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getFragmentedBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_FragmentedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIndex() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Index_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getGeneration() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Generation_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCompacted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Compacted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getConcurrent() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Concurrent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTotalCommittedBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_TotalCommittedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPromotedBytes() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PromotedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPinnedObjectsCount() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PinnedObjectsCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getFinalizationPendingCount() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_FinalizationPendingCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPauseTimePercentage() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PauseTimePercentage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_GCMemoryInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_GCMemoryInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_WeakReference /* System.WeakReference */: System_Object {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_WeakReference_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(target: System_Object? /* System.Object */) throws {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Create(targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(target: System_Object? /* System.Object */, trackResurrection: Bool /* System.Boolean */) throws {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Create_1(targetC, trackResurrection, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getTrackResurrection() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_TrackResurrection_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAlive() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_IsAlive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getTarget() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Target_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setTarget(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_WeakReference_Target_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_WeakReference_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_WeakReference_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.











public class System_Math /* System.Math */: System_Object {
	public class func acos(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Acos(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func acosh(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Acosh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func asin(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Asin(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func asinh(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Asinh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func atan(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atan(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func atanh(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atanh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func atan2(y: Double /* System.Double */, x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atan2(y, x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func cbrt(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cbrt(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func ceiling(a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Ceiling(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func cos(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cos(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func cosh(value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cosh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func exp(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Exp(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func floor(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Floor(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fusedMultiplyAdd(x: Double /* System.Double */, y: Double /* System.Double */, z: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_FusedMultiplyAdd(x, y, z, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func log(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func log2(x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log2(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func log10(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log10(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func pow(x: Double /* System.Double */, y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Pow(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sin(a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sin(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sinCos(x: Double /* System.Double */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.Double,System.Double> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_SinCos(x, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func sinh(value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sinh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sqrt(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sqrt(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tan(a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Tan(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func tanh(value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Tanh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_5(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func abs(value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func abs(value: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bigMul(a: Int32 /* System.Int32 */, b: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul(a, b, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bigMul(a: UInt64 /* System.UInt64 */, b: UInt64 /* System.UInt64 */, low: inout UInt64? /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul_1(a, b, &low, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bigMul(a: Int64 /* System.Int64 */, b: Int64 /* System.Int64 */, low: inout Int64? /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul_2(a, b, &low, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bitDecrement(x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BitDecrement(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func bitIncrement(x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BitIncrement(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func copySign(x: Double /* System.Double */, y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_CopySign(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func divRem(a: Int32 /* System.Int32 */, b: Int32 /* System.Int32 */, result: inout Int32? /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem(a, b, &result, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func divRem(a: Int64 /* System.Int64 */, b: Int64 /* System.Int64 */, result: inout Int64? /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_1(a, b, &result, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func divRem(left: Int8 /* System.SByte */, right: Int8 /* System.SByte */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.SByte,System.SByte> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_2(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: UInt8 /* System.Byte */, right: UInt8 /* System.Byte */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.Byte,System.Byte> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_3(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: Int16 /* System.Int16 */, right: Int16 /* System.Int16 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.Int16,System.Int16> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_4(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: UInt16 /* System.UInt16 */, right: UInt16 /* System.UInt16 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.UInt16,System.UInt16> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_5(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: Int32 /* System.Int32 */, right: Int32 /* System.Int32 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.Int32,System.Int32> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_6(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: UInt32 /* System.UInt32 */, right: UInt32 /* System.UInt32 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.UInt32,System.UInt32> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_7(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: Int64 /* System.Int64 */, right: Int64 /* System.Int64 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.Int64,System.Int64> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_8(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: UInt64 /* System.UInt64 */, right: UInt64 /* System.UInt64 */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.UInt64,System.UInt64> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_9(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: Int /* System.IntPtr */, right: Int /* System.IntPtr */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.IntPtr,System.IntPtr> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_10(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func divRem(left: UInt /* System.UIntPtr */, right: UInt /* System.UIntPtr */) throws -> System_ValueTuple_A2? /* System.ValueTuple<System.UIntPtr,System.UIntPtr> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_11(left, right, &__exceptionC)
		
		let __returnValue = System_ValueTuple_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func ceiling(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Ceiling_1(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func clamp(value: UInt8 /* System.Byte */, min: UInt8 /* System.Byte */, max: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: System_Decimal? /* System.Decimal */, min: System_Decimal? /* System.Decimal */, max: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let minC = min?.__handle
		let maxC = max?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_1(valueC, minC, maxC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func clamp(value: Double /* System.Double */, min: Double /* System.Double */, max: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_2(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Int16 /* System.Int16 */, min: Int16 /* System.Int16 */, max: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_3(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Int32 /* System.Int32 */, min: Int32 /* System.Int32 */, max: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_4(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Int64 /* System.Int64 */, min: Int64 /* System.Int64 */, max: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_5(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Int /* System.IntPtr */, min: Int /* System.IntPtr */, max: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_6(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Int8 /* System.SByte */, min: Int8 /* System.SByte */, max: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_7(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: Float /* System.Single */, min: Float /* System.Single */, max: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_8(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: UInt16 /* System.UInt16 */, min: UInt16 /* System.UInt16 */, max: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_9(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: UInt32 /* System.UInt32 */, min: UInt32 /* System.UInt32 */, max: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_10(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: UInt64 /* System.UInt64 */, min: UInt64 /* System.UInt64 */, max: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_11(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func clamp(value: UInt /* System.UIntPtr */, min: UInt /* System.UIntPtr */, max: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_12(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func floor(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Floor_1(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func iEEERemainder(x: Double /* System.Double */, y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_IEEERemainder(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func iLogB(x: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ILogB(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func log(a: Double /* System.Double */, newBase: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log_1(a, newBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: UInt8 /* System.Byte */, val2: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: System_Decimal? /* System.Decimal */, val2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let val1C = val1?.__handle
		let val2C = val2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_1(val1C, val2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func max(val1: Double /* System.Double */, val2: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_2(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Int16 /* System.Int16 */, val2: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_3(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Int32 /* System.Int32 */, val2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_4(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Int64 /* System.Int64 */, val2: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_5(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Int /* System.IntPtr */, val2: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_6(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Int8 /* System.SByte */, val2: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_7(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: Float /* System.Single */, val2: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_8(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: UInt16 /* System.UInt16 */, val2: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_9(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: UInt32 /* System.UInt32 */, val2: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_10(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: UInt64 /* System.UInt64 */, val2: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_11(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func max(val1: UInt /* System.UIntPtr */, val2: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_12(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func maxMagnitude(x: Double /* System.Double */, y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_MaxMagnitude(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: UInt8 /* System.Byte */, val2: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: System_Decimal? /* System.Decimal */, val2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let val1C = val1?.__handle
		let val2C = val2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_1(val1C, val2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func min(val1: Double /* System.Double */, val2: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_2(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Int16 /* System.Int16 */, val2: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_3(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Int32 /* System.Int32 */, val2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_4(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Int64 /* System.Int64 */, val2: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_5(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Int /* System.IntPtr */, val2: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_6(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Int8 /* System.SByte */, val2: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_7(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: Float /* System.Single */, val2: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_8(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: UInt16 /* System.UInt16 */, val2: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_9(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: UInt32 /* System.UInt32 */, val2: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_10(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: UInt64 /* System.UInt64 */, val2: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_11(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func min(val1: UInt /* System.UIntPtr */, val2: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_12(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func minMagnitude(x: Double /* System.Double */, y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_MinMagnitude(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func reciprocalEstimate(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ReciprocalEstimate(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func reciprocalSqrtEstimate(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ReciprocalSqrtEstimate(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, decimals: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_1(dC, decimals, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_2(dC, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(d: System_Decimal? /* System.Decimal */, decimals: Int32 /* System.Int32 */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_3(dC, decimals, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func round(a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_4(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func round(value: Double /* System.Double */, digits: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_5(value, digits, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func round(value: Double /* System.Double */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> Double /* System.Double */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_6(value, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func round(value: Double /* System.Double */, digits: Int32 /* System.Int32 */, mode: System_MidpointRounding /* System.MidpointRounding */) throws -> Double /* System.Double */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_7(value, digits, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Int16 /* System.Int16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Int64 /* System.Int64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Int8 /* System.SByte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func sign(value: Float /* System.Single */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func truncate(d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Truncate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func truncate(d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Truncate_1(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func scaleB(x: Double /* System.Double */, n: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ScaleB(x, n, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getE() -> Double /* System.Double */ {
		
		
		let __returnValueC = System_Math_E_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getPI() -> Double /* System.Double */ {
		
		
		let __returnValueC = System_Math_PI_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getTau() -> Double /* System.Double */ {
		
		
		let __returnValueC = System_Math_Tau_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Math_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Math_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Convert /* System.Convert */: System_Object {
	public class func getTypeCode(value: System_Object? /* System.Object */) throws -> System_TypeCode /* System.TypeCode */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_GetTypeCode(valueC, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isDBNull(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_IsDBNull(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func changeType(value: System_Object? /* System.Object */, typeCode: System_TypeCode /* System.TypeCode */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType(valueC, typeCodeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func changeType(value: System_Object? /* System.Object */, typeCode: System_TypeCode /* System.TypeCode */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_1(valueC, typeCodeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func changeType(value: System_Object? /* System.Object */, conversionType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let conversionTypeC = conversionType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_2(valueC, conversionTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func changeType(value: System_Object? /* System.Object */, conversionType: System_Type? /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let conversionTypeC = conversionType?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_3(valueC, conversionTypeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBoolean(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Int8 /* System.SByte */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: UInt8 /* System.Char */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: UInt8 /* System.Byte */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Int16 /* System.Int16 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: UInt16 /* System.UInt16 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: UInt64 /* System.UInt64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_12(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_13(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Float /* System.Single */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_14(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: Double /* System.Double */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_15(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBoolean(value: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_Object? /* System.Object */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Bool /* System.Boolean */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: UInt8 /* System.Char */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Int8 /* System.SByte */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: UInt8 /* System.Byte */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Int16 /* System.Int16 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: UInt16 /* System.UInt16 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Int32 /* System.Int32 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: UInt32 /* System.UInt32 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Int64 /* System.Int64 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: UInt64 /* System.UInt64 */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_String? /* System.String */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_12(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_13(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Float /* System.Single */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_14(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: Double /* System.Double */) throws -> UInt8 /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_15(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_Decimal? /* System.Decimal */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toChar(value: System_DateTime? /* System.DateTime */) throws -> UInt8 /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_Object? /* System.Object */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Bool /* System.Boolean */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: UInt8 /* System.Char */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: UInt8 /* System.Byte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Int16 /* System.Int16 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: UInt16 /* System.UInt16 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Int32 /* System.Int32 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: UInt32 /* System.UInt32 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Int64 /* System.Int64 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: UInt64 /* System.UInt64 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Float /* System.Single */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: Double /* System.Double */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_Decimal? /* System.Decimal */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_String? /* System.String */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_DateTime? /* System.DateTime */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_Object? /* System.Object */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Bool /* System.Boolean */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: UInt8 /* System.Char */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Int8 /* System.SByte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Int16 /* System.Int16 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: UInt16 /* System.UInt16 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: UInt32 /* System.UInt32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Int64 /* System.Int64 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: UInt64 /* System.UInt64 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Float /* System.Single */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: Double /* System.Double */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_Decimal? /* System.Decimal */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_String? /* System.String */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toByte(value: System_DateTime? /* System.DateTime */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_Object? /* System.Object */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Bool /* System.Boolean */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: UInt8 /* System.Char */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Int8 /* System.SByte */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: UInt8 /* System.Byte */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: UInt16 /* System.UInt16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: UInt32 /* System.UInt32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Int64 /* System.Int64 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: UInt64 /* System.UInt64 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Float /* System.Single */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: Double /* System.Double */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_Decimal? /* System.Decimal */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_String? /* System.String */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_DateTime? /* System.DateTime */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_Object? /* System.Object */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Bool /* System.Boolean */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: UInt8 /* System.Char */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Int8 /* System.SByte */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: UInt8 /* System.Byte */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Int16 /* System.Int16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Int32 /* System.Int32 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: UInt32 /* System.UInt32 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Int64 /* System.Int64 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: UInt64 /* System.UInt64 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Float /* System.Single */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: Double /* System.Double */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_Decimal? /* System.Decimal */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_String? /* System.String */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_DateTime? /* System.DateTime */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: UInt8 /* System.Char */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Int8 /* System.SByte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: UInt8 /* System.Byte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Int16 /* System.Int16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: UInt16 /* System.UInt16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: UInt32 /* System.UInt32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Int64 /* System.Int64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: UInt64 /* System.UInt64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Float /* System.Single */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_Object? /* System.Object */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Bool /* System.Boolean */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: UInt8 /* System.Char */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Int8 /* System.SByte */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: UInt8 /* System.Byte */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Int16 /* System.Int16 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: UInt16 /* System.UInt16 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Int32 /* System.Int32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Int64 /* System.Int64 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: UInt64 /* System.UInt64 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Float /* System.Single */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: Double /* System.Double */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_Decimal? /* System.Decimal */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_String? /* System.String */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_DateTime? /* System.DateTime */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_Object? /* System.Object */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: UInt8 /* System.Char */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Int8 /* System.SByte */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: UInt8 /* System.Byte */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Int16 /* System.Int16 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: UInt16 /* System.UInt16 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: UInt32 /* System.UInt32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: UInt64 /* System.UInt64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Float /* System.Single */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: Double /* System.Double */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_String? /* System.String */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_DateTime? /* System.DateTime */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_Object? /* System.Object */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Bool /* System.Boolean */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: UInt8 /* System.Char */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Int8 /* System.SByte */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: UInt8 /* System.Byte */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Int16 /* System.Int16 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: UInt16 /* System.UInt16 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Int32 /* System.Int32 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: UInt32 /* System.UInt32 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Int64 /* System.Int64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Float /* System.Single */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: Double /* System.Double */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_Decimal? /* System.Decimal */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_String? /* System.String */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_DateTime? /* System.DateTime */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_Object? /* System.Object */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Int8 /* System.SByte */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: UInt8 /* System.Byte */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: UInt8 /* System.Char */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Int16 /* System.Int16 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: UInt16 /* System.UInt16 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Int32 /* System.Int32 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: UInt32 /* System.UInt32 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Int64 /* System.Int64 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: UInt64 /* System.UInt64 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Double /* System.Double */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_Decimal? /* System.Decimal */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_13(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_String? /* System.String */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_15(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: Bool /* System.Boolean */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_16(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSingle(value: System_DateTime? /* System.DateTime */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_Object? /* System.Object */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Int8 /* System.SByte */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: UInt8 /* System.Byte */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Int16 /* System.Int16 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: UInt8 /* System.Char */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: UInt16 /* System.UInt16 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: UInt32 /* System.UInt32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Int64 /* System.Int64 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: UInt64 /* System.UInt64 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Float /* System.Single */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_Decimal? /* System.Decimal */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_13(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_String? /* System.String */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_15(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: Bool /* System.Boolean */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_16(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDouble(value: System_DateTime? /* System.DateTime */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toDecimal(value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_1(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Int8 /* System.SByte */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_2(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: UInt8 /* System.Byte */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_3(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: UInt8 /* System.Char */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_4(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Int16 /* System.Int16 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_5(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: UInt16 /* System.UInt16 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_6(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_7(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: UInt32 /* System.UInt32 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_8(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Int64 /* System.Int64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_9(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: UInt64 /* System.UInt64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_10(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Float /* System.Single */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_11(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Double /* System.Double */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_12(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_13(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_14(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_15(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: Bool /* System.Boolean */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_16(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDecimal(value: System_DateTime? /* System.DateTime */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_17(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_DateTime? /* System.DateTime */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_Object? /* System.Object */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_1(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_2(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_3(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_4(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Int8 /* System.SByte */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_5(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: UInt8 /* System.Byte */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_6(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Int16 /* System.Int16 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_7(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: UInt16 /* System.UInt16 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_8(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_9(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: UInt32 /* System.UInt32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_10(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_11(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: UInt64 /* System.UInt64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_12(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Bool /* System.Boolean */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_13(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: UInt8 /* System.Char */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_14(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Float /* System.Single */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_15(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_16(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toDateTime(value: System_Decimal? /* System.Decimal */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_17(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_Object? /* System.Object */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_1(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Bool /* System.Boolean */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_2(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Bool /* System.Boolean */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_3(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt8 /* System.Char */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_4(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt8 /* System.Char */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_5(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int8 /* System.SByte */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_6(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int8 /* System.SByte */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_7(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt8 /* System.Byte */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_8(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt8 /* System.Byte */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_9(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int16 /* System.Int16 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_10(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int16 /* System.Int16 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_11(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt16 /* System.UInt16 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_12(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt16 /* System.UInt16 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_13(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_14(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int32 /* System.Int32 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_15(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt32 /* System.UInt32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_16(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt32 /* System.UInt32 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_17(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int64 /* System.Int64 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_18(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int64 /* System.Int64 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_19(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt64 /* System.UInt64 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_20(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: UInt64 /* System.UInt64 */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_21(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Float /* System.Single */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_22(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Float /* System.Single */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_23(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Double /* System.Double */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_24(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Double /* System.Double */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_25(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_Decimal? /* System.Decimal */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_26(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_Decimal? /* System.Decimal */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_27(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_DateTime? /* System.DateTime */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_28(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_DateTime? /* System.DateTime */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_29(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_30(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: System_String? /* System.String */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_31(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toByte(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toSByte(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt16(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt16(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt32(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt32(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toInt64(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toUInt64(value: System_String? /* System.String */, fromBase: Int32 /* System.Int32 */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toString(value: UInt8 /* System.Byte */, toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_32(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int16 /* System.Int16 */, toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_33(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int32 /* System.Int32 */, toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_34(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toString(value: Int64 /* System.Int64 */, toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_35(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBase64String(inArray: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String(inArrayC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBase64String(inArray: System_Byte_Array? /* System.Byte[] */, options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_1(inArrayC, optionsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBase64String(inArray: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_2(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBase64String(inArray: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_3(inArrayC, offset, length, optionsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toBase64CharArray(inArray: System_Byte_Array? /* System.Byte[] */, offsetIn: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, outArray: System_Char_Array? /* System.Char[] */, offsetOut: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let inArrayC = inArray?.__handle
		let outArrayC = outArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64CharArray(inArrayC, offsetIn, length, outArrayC, offsetOut, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func toBase64CharArray(inArray: System_Byte_Array? /* System.Byte[] */, offsetIn: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, outArray: System_Char_Array? /* System.Char[] */, offsetOut: Int32 /* System.Int32 */, options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> Int32 /* System.Int32 */ {
		let inArrayC = inArray?.__handle
		let outArrayC = outArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64CharArray_1(inArrayC, offsetIn, length, outArrayC, offsetOut, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func fromBase64String(s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromBase64String(sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromBase64CharArray(inArray: System_Char_Array? /* System.Char[] */, offset: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromBase64CharArray(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromHexString(s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromHexString(sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toHexString(inArray: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToHexString(inArrayC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func toHexString(inArray: System_Byte_Array? /* System.Byte[] */, offset: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToHexString_1(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDBNull() -> System_Object? /* System.Object */ {
		
		
		let __returnValueC = System_Convert_DBNull_Get()
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Convert_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Convert_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Thread /* System.Threading.Thread */: System_Runtime_ConstrainedExecution_CriticalFinalizerObject {
	public class func spinWait(iterations: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SpinWait(iterations, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func yield() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Yield(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getApartmentState() throws -> System_Threading_ApartmentState /* System.Threading.ApartmentState */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetApartmentState(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ApartmentState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func disableComObjectEagerCleanup() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_DisableComObjectEagerCleanup(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func interrupt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Interrupt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func join(millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Join(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func start(parameter: System_Object? /* System.Object */) throws {
		let parameterC = parameter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Start(self.__handle, parameterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func unsafeStart(parameter: System_Object? /* System.Object */) throws {
		let parameterC = parameter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_UnsafeStart(self.__handle, parameterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func start() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Start_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func unsafeStart() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_UnsafeStart_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sleep(millisecondsTimeout: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Sleep(millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func abort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Abort(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func abort(stateInfo: System_Object? /* System.Object */) throws {
		let stateInfoC = stateInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Abort_1(self.__handle, stateInfoC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func resetAbort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_ResetAbort(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func suspend() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Suspend(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func resume() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Resume(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func beginCriticalRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_BeginCriticalRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func endCriticalRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_EndCriticalRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func beginThreadAffinity() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_BeginThreadAffinity(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func endThreadAffinity() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_EndThreadAffinity(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func allocateDataSlot() throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_AllocateDataSlot(&__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func allocateNamedDataSlot(name: System_String? /* System.String */) throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_AllocateNamedDataSlot(nameC, &__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getNamedDataSlot(name: System_String? /* System.String */) throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetNamedDataSlot(nameC, &__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func freeNamedDataSlot(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_FreeNamedDataSlot(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getData(slot: System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */) throws -> System_Object? /* System.Object */ {
		let slotC = slot?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetData(slotC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setData(slot: System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */, data: System_Object? /* System.Object */) throws {
		let slotC = slot?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetData(slotC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setApartmentState(state: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetApartmentState(self.__handle, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func trySetApartmentState(state: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws -> Bool /* System.Boolean */ {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_TrySetApartmentState(self.__handle, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCompressedStack() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetCompressedStack(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCompressedStack(stack: System_Threading_CompressedStack? /* System.Threading.CompressedStack */) throws {
		let stackC = stack?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetCompressedStack(self.__handle, stackC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getDomain() throws -> System_AppDomain? /* System.AppDomain */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetDomain(&__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDomainID() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetDomainID(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func join() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Join_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func join(timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Join_2(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func memoryBarrier() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_MemoryBarrier(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func sleep(timeout: System_TimeSpan? /* System.TimeSpan */) throws {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Sleep_1(timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileRead(address: inout UInt8? /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Double? /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_1(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Int16? /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_2(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Int32? /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_3(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Int64? /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_4(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Int? /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_5(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		var addressC = address?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_6(&addressC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func volatileRead(address: inout Int8? /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_7(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout Float? /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_8(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout UInt16? /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_9(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout UInt32? /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_10(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout UInt64? /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_11(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileRead(address: inout UInt? /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_12(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func volatileWrite(address: inout UInt8? /* System.Byte */, value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Double? /* System.Double */, value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_1(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Int16? /* System.Int16 */, value: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_2(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Int32? /* System.Int32 */, value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_3(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Int64? /* System.Int64 */, value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_4(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Int? /* System.IntPtr */, value: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_5(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		var addressC = address?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_6(&addressC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Int8? /* System.SByte */, value: Int8 /* System.SByte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_7(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout Float? /* System.Single */, value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_8(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout UInt16? /* System.UInt16 */, value: UInt16 /* System.UInt16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_9(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout UInt32? /* System.UInt32 */, value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_10(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout UInt64? /* System.UInt64 */, value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_11(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func volatileWrite(address: inout UInt? /* System.UIntPtr */, value: UInt /* System.UIntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_12(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getCurrentProcessorId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetCurrentProcessorId(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_Thread_Create)
	// TODO: Method with Delegate parameter (System_Threading_Thread_Create_1)
	// TODO: Method with Delegate parameter (System_Threading_Thread_Create_2)
	// TODO: Method with Delegate parameter (System_Threading_Thread_Create_3)
	public func getManagedThreadId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ManagedThreadId_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsAlive() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsAlive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsBackground() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsBackground_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setIsBackground(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_IsBackground_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIsThreadPoolThread() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsThreadPoolThread_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getPriority() throws -> System_Threading_ThreadPriority /* System.Threading.ThreadPriority */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Priority_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ThreadPriority(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPriority(value: System_Threading_ThreadPriority /* System.Threading.ThreadPriority */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Priority_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getThreadState() throws -> System_Threading_ThreadState /* System.Threading.ThreadState */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ThreadState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ThreadState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCurrentCulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentCulture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrentCulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentCulture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCurrentUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentUICulture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCurrentUICulture(value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentUICulture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getCurrentPrincipal() throws -> System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentPrincipal_Get(&__exceptionC)
		
		let __returnValue = System_Security_Principal_IPrincipal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setCurrentPrincipal(value: System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentPrincipal_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getCurrentThread() throws -> System_Threading_Thread? /* System.Threading.Thread */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentThread_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Thread(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getExecutionContext() throws -> System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ExecutionContext_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Name_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getApartmentState() throws -> System_Threading_ApartmentState /* System.Threading.ApartmentState */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ApartmentState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ApartmentState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setApartmentState(value: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_ApartmentState_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Thread_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Thread_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_Principal_IPrincipal /* System.Security.Principal.IPrincipal */: DNObject {
	public func isInRole(role: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let roleC = role?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IPrincipal_IsInRole(self.__handle, roleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getIdentity() throws -> System_Security_Principal_IIdentity? /* System.Security.Principal.IIdentity */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IPrincipal_Identity_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_Principal_IIdentity(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_Principal_IPrincipal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_Principal_IPrincipal_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_Principal_IIdentity /* System.Security.Principal.IIdentity */: DNObject {
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getAuthenticationType() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_AuthenticationType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsAuthenticated() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_IsAuthenticated_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_Principal_IIdentity_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_Principal_IIdentity_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_ExecutionContext /* System.Threading.ExecutionContext */: System_Object {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func capture() throws -> System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_Capture(&__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func suppressFlow() throws -> System_Threading_AsyncFlowControl? /* System.Threading.AsyncFlowControl */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_SuppressFlow(&__exceptionC)
		
		let __returnValue = System_Threading_AsyncFlowControl(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func restoreFlow() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_RestoreFlow(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func isFlowSuppressed() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_IsFlowSuppressed(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_ExecutionContext_Run)
	public class func restore(executionContext: System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */) throws {
		let executionContextC = executionContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_Restore_1(executionContextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func createCopy() throws -> System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_CreateCopy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_ExecutionContext_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_ExecutionContext_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_AsyncFlowControl /* System.Threading.AsyncFlowControl */: System_ValueType {
	public func undo() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_AsyncFlowControl_Undo(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_AsyncFlowControl_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func equals(obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func equals(obj: System_Threading_AsyncFlowControl? /* System.Threading.AsyncFlowControl */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_AsyncFlowControl_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_AsyncFlowControl_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_LocalDataStoreSlot /* System.LocalDataStoreSlot */: System_Object {
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_LocalDataStoreSlot_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_LocalDataStoreSlot_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_CompressedStack /* System.Threading.CompressedStack */: System_Object {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CompressedStack_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func capture() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_Capture(&__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createCopy() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_CreateCopy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCompressedStack() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_GetCompressedStack(&__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_CompressedStack_Run)
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_CompressedStack_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_CompressedStack_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_AppDomain /* System.AppDomain */: System_MarshalByRefObject {
	public func setDynamicBase(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetDynamicBase(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func applyPolicy(assemblyName: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ApplyPolicy(self.__handle, assemblyNameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createDomain(friendlyName: System_String? /* System.String */) throws -> System_AppDomain? /* System.AppDomain */ {
		let friendlyNameC = friendlyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateDomain(friendlyNameC, &__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func executeAssembly(assemblyFile: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly(self.__handle, assemblyFileC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func executeAssembly(assemblyFile: System_String? /* System.String */, args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly_1(self.__handle, assemblyFileC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func executeAssembly(assemblyFile: System_String? /* System.String */, args: System_String_Array? /* System.String[] */, hashValue: System_Byte_Array? /* System.Byte[] */, hashAlgorithm: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		let argsC = args?.__handle
		let hashValueC = hashValue?.__handle
		let hashAlgorithmC = hashAlgorithm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly_2(self.__handle, assemblyFileC, argsC, hashValueC, hashAlgorithmC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func executeAssemblyByName(assemblyName: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */, args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName(self.__handle, assemblyNameC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func executeAssemblyByName(assemblyName: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName_1(self.__handle, assemblyNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func executeAssemblyByName(assemblyName: System_String? /* System.String */, args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName_2(self.__handle, assemblyNameC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getData(name: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetData(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setData(name: System_String? /* System.String */, data: System_Object? /* System.Object */) throws {
		let nameC = name?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetData(self.__handle, nameC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func isCompatibilitySwitchSet(value: System_String? /* System.String */) throws -> System_Nullable_A1? /* System.Nullable<System.Boolean> */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsCompatibilitySwitchSet(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Nullable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isDefaultAppDomain() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsDefaultAppDomain(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isFinalizingForUnload() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsFinalizingForUnload(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func unload(domain: System_AppDomain? /* System.AppDomain */) throws {
		let domainC = domain?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_Unload(domainC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func load(rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load(self.__handle, rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func load(rawAssembly: System_Byte_Array? /* System.Byte[] */, rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_1(self.__handle, rawAssemblyC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func load(assemblyRef: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyRefC = assemblyRef?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_2(self.__handle, assemblyRefC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func load(assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_3(self.__handle, assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func reflectionOnlyGetAssemblies() throws -> System_Reflection_Assembly_Array? /* System.Reflection.Assembly[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ReflectionOnlyGetAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCurrentThreadId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetCurrentThreadId(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func appendPrivatePath(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_AppendPrivatePath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clearPrivatePath() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_ClearPrivatePath(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clearShadowCopyPath() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_ClearShadowCopyPath(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setCachePath(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetCachePath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setShadowCopyFiles() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetShadowCopyFiles(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setShadowCopyPath(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetShadowCopyPath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getAssemblies() throws -> System_Reflection_Assembly_Array? /* System.Reflection.Assembly[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setPrincipalPolicy(policy: System_Security_Principal_PrincipalPolicy /* System.Security.Principal.PrincipalPolicy */) throws {
		let policyC = policy.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetPrincipalPolicy(self.__handle, policyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setThreadPrincipal(principal: System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */) throws {
		let principalC = principal?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetThreadPrincipal(self.__handle, principalC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func createInstance(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance(self.__handle, assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstance(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance_1(self.__handle, assemblyNameC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstance(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance_2(self.__handle, assemblyNameC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceAndUnwrap(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap(self.__handle, assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceAndUnwrap(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap_1(self.__handle, assemblyNameC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceAndUnwrap(assemblyName: System_String? /* System.String */, typeName: System_String? /* System.String */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap_2(self.__handle, assemblyNameC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFrom(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom(self.__handle, assemblyFileC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFrom(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom_1(self.__handle, assemblyFileC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFrom(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom_2(self.__handle, assemblyFileC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFromAndUnwrap(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap(self.__handle, assemblyFileC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFromAndUnwrap(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */, ignoreCase: Bool /* System.Boolean */, bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, binder: System_Reflection_Binder? /* System.Reflection.Binder */, args: System_Object_Array? /* System.Object[] */, culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap_1(self.__handle, assemblyFileC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createInstanceFromAndUnwrap(assemblyFile: System_String? /* System.String */, typeName: System_String? /* System.String */, activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap_2(self.__handle, assemblyFileC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCurrentDomain() throws -> System_AppDomain? /* System.AppDomain */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CurrentDomain_Get(&__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getBaseDirectory() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_BaseDirectory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRelativeSearchPath() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_RelativeSearchPath_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getSetupInformation() throws -> System_AppDomainSetup? /* System.AppDomainSetup */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_SetupInformation_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_AppDomainSetup(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getPermissionSet() throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_PermissionSet_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDynamicDirectory() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_DynamicDirectory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getFriendlyName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_FriendlyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFullyTrusted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsFullyTrusted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsHomogenous() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsHomogenous_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getMonitoringIsEnabled() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringIsEnabled_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func setMonitoringIsEnabled(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_MonitoringIsEnabled_Set(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMonitoringSurvivedMemorySize() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringSurvivedMemorySize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getMonitoringSurvivedProcessMemorySize() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringSurvivedProcessMemorySize_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMonitoringTotalAllocatedMemorySize() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringTotalAllocatedMemorySize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getShadowCopyFiles() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ShadowCopyFiles_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getMonitoringTotalProcessorTime() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringTotalProcessorTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func addUnhandledException(value: System_UnhandledExceptionEventHandler? /* System.UnhandledExceptionEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_UnhandledException_Add(self.__handle, valueC)
		
		let __returnValue = System_UnhandledExceptionEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeUnhandledException(value: System_UnhandledExceptionEventHandler? /* System.UnhandledExceptionEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_UnhandledException_Remove(self.__handle, valueC)
		
		let __returnValue = System_UnhandledExceptionEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addDomainUnload(value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_DomainUnload_Add(self.__handle, valueC)
		
		let __returnValue = System_EventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeDomainUnload(value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_DomainUnload_Remove(self.__handle, valueC)
		
		let __returnValue = System_EventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addProcessExit(value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ProcessExit_Add(self.__handle, valueC)
		
		let __returnValue = System_EventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeProcessExit(value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ProcessExit_Remove(self.__handle, valueC)
		
		let __returnValue = System_EventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addAssemblyLoad(value: System_AssemblyLoadEventHandler? /* System.AssemblyLoadEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_AssemblyLoad_Add(self.__handle, valueC)
		
		let __returnValue = System_AssemblyLoadEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeAssemblyLoad(value: System_AssemblyLoadEventHandler? /* System.AssemblyLoadEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_AssemblyLoad_Remove(self.__handle, valueC)
		
		let __returnValue = System_AssemblyLoadEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addAssemblyResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_AssemblyResolve_Add(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeAssemblyResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_AssemblyResolve_Remove(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addReflectionOnlyAssemblyResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ReflectionOnlyAssemblyResolve_Add(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeReflectionOnlyAssemblyResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ReflectionOnlyAssemblyResolve_Remove(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addTypeResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_TypeResolve_Add(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeTypeResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_TypeResolve_Remove(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public func addResourceResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ResourceResolve_Add(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeResourceResolve(value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = System_AppDomain_ResourceResolve_Remove(self.__handle, valueC)
		
		let __returnValue = System_ResolveEventHandler(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_AppDomain_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_AppDomain_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_AppDomainSetup /* System.AppDomainSetup */: System_Object {
	public func getApplicationBase() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomainSetup_ApplicationBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getTargetFrameworkName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomainSetup_TargetFrameworkName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_AppDomainSetup_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_AppDomainSetup_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_PermissionSet /* System.Security.PermissionSet */: System_Object {
	public func addPermission(perm: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permC = perm?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_AddPermission(self.__handle, permC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func assert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Assert(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func containsNonCodeAccessPermissions() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ContainsNonCodeAccessPermissions(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func convertPermissionSet(inFormat: System_String? /* System.String */, inData: System_Byte_Array? /* System.Byte[] */, outFormat: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let inFormatC = inFormat?.__handle
		let inDataC = inData?.__handle
		let outFormatC = outFormat?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ConvertPermissionSet(inFormatC, inDataC, outFormatC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copy() throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */, index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deny() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Deny(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func equals(o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func fromXml(et: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let etC = et?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_FromXml(self.__handle, etC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getPermission(permClass: System_Type? /* System.Type */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permClassC = permClass?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetPermission(self.__handle, permClassC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func intersect(other: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Intersect(self.__handle, otherC, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isEmpty() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsEmpty(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isSubsetOf(target: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> Bool /* System.Boolean */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsSubsetOf(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func isUnrestricted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsUnrestricted(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func permitOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_PermitOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removePermission(permClass: System_Type? /* System.Type */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permClassC = permClass?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_RemovePermission(self.__handle, permClassC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func revertAssert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_RevertAssert(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setPermission(perm: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permC = perm?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_SetPermission(self.__handle, permC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toXml() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ToXml(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func union(other: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Union(self.__handle, otherC, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(state: System_Security_Permissions_PermissionState /* System.Security.Permissions.PermissionState */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Create(stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(permSet: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws {
		let permSetC = permSet?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Create_1(permSetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSynchronized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSyncRoot() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_PermissionSet_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_PermissionSet_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_ISecurityEncodable /* System.Security.ISecurityEncodable */: DNObject {
	public func fromXml(e: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let eC = e?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_ISecurityEncodable_FromXml(self.__handle, eC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func toXml() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_ISecurityEncodable_ToXml(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_ISecurityEncodable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_ISecurityEncodable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_SecurityElement /* System.Security.SecurityElement */: System_Object {
	public func addAttribute(name: System_String? /* System.String */, value: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_AddAttribute(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func addChild(child: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_AddChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func equal(other: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Equal(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func copy() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isValidTag(tag: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidTag(tagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isValidText(text: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidText(textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isValidAttributeName(name: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidAttributeName(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func isValidAttributeValue(value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidAttributeValue(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func escape(str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Escape(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func attribute(name: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Attribute(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func searchForChildByTag(tag: System_String? /* System.String */) throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_SearchForChildByTag(self.__handle, tagC, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func searchForTextOfTag(tag: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_SearchForTextOfTag(self.__handle, tagC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fromString(xml: System_String? /* System.String */) throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		let xmlC = xml?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_FromString(xmlC, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(tag: System_String? /* System.String */) throws {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Create(tagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(tag: System_String? /* System.String */, text: System_String? /* System.String */) throws {
		let tagC = tag?.__handle
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Create_1(tagC, textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getTag() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Tag_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setTag(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Tag_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAttributes() throws -> System_Collections_Hashtable? /* System.Collections.Hashtable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Hashtable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAttributes(value: System_Collections_Hashtable? /* System.Collections.Hashtable */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Attributes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getText() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Text_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setText(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Text_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getChildren() throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Children_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setChildren(value: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Children_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_SecurityElement_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_SecurityElement_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_Hashtable /* System.Collections.Hashtable */: System_Object {
	public func add(key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Add(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func contains(key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Contains(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func containsKey(key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_ContainsKey(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func containsValue(value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_ContainsValue(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */, arrayIndex: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_CopyTo(self.__handle, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getEnumerator() throws -> System_Collections_IDictionaryEnumerator? /* System.Collections.IDictionaryEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionaryEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(key: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Remove(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func synchronized(table: System_Collections_Hashtable? /* System.Collections.Hashtable */) throws -> System_Collections_Hashtable? /* System.Collections.Hashtable */ {
		let tableC = table?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Synchronized(tableC, &__exceptionC)
		
		let __returnValue = System_Collections_Hashtable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func onDeserialization(sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, loadFactor: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_2(capacity, loadFactor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, loadFactor: Float /* System.Single */, equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_3(capacity, loadFactor, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_4(hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_5(equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_6(capacity, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_7(capacity, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_8(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */, loadFactor: Float /* System.Single */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_9(dC, loadFactor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */, hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let dC = d?.__handle
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_10(dC, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */, equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let dC = d?.__handle
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_11(dC, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, loadFactor: Float /* System.Single */, hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_12(capacity, loadFactor, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */, loadFactor: Float /* System.Single */, hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let dC = d?.__handle
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_13(dC, loadFactor, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(d: System_Collections_IDictionary? /* System.Collections.IDictionary */, loadFactor: Float /* System.Single */, equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let dC = d?.__handle
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_14(dC, loadFactor, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFixedSize() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSynchronized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getKeys() throws -> System_Collections_ICollection? /* System.Collections.ICollection */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Keys_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValues() throws -> System_Collections_ICollection? /* System.Collections.ICollection */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Values_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getSyncRoot() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_Hashtable_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_Hashtable_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_IHashCodeProvider /* System.Collections.IHashCodeProvider */: DNObject {
	public func getHashCode(obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IHashCodeProvider_GetHashCode(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_IHashCodeProvider_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_IHashCodeProvider_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_ArrayList /* System.Collections.ArrayList */: System_Object {
	public class func adapter(list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Adapter(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func add(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Add(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func addRange(c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_AddRange(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func binarySearch(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, value: System_Object? /* System.Object */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch(self.__handle, index, count, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func binarySearch(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func binarySearch(value: System_Object? /* System.Object */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch_2(self.__handle, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func contains(item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Contains(self.__handle, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo(self.__handle, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(array: System_Array? /* System.Array */, arrayIndex: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo_1(self.__handle, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(index: Int32 /* System.Int32 */, array: System_Array? /* System.Array */, arrayIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo_2(self.__handle, index, arrayC, arrayIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func fixedSize(list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_FixedSize(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func fixedSize(list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_FixedSize_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getEnumerator(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetEnumerator_1(self.__handle, index, count, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func indexOf(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf_2(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Insert(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func insertRange(index: Int32 /* System.Int32 */, c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_InsertRange(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func lastIndexOf(value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(value: System_Object? /* System.Object */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf_2(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func readOnly(list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ReadOnly(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readOnly(list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ReadOnly_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Remove(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeAt(index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeRange(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_RemoveRange(self.__handle, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func repeat(value: System_Object? /* System.Object */, count: Int32 /* System.Int32 */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Repeat(valueC, count, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func reverse() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Reverse(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func reverse(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Reverse_1(self.__handle, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func setRange(index: Int32 /* System.Int32 */, c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_SetRange(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getRange(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetRange(self.__handle, index, count, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func sort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func sort(comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort_1(self.__handle, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func sort(index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */, comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort_2(self.__handle, index, count, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func synchronized(list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Synchronized(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func synchronized(list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Synchronized_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toArray() throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ToArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toArray(type: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ToArray_1(self.__handle, typeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimToSize() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_TrimToSize(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create_2(cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCapacity() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Capacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCapacity(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Capacity_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCount() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsFixedSize() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getIsSynchronized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getSyncRoot() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_ArrayList_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_ArrayList_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_IStackWalk /* System.Security.IStackWalk */: DNObject {
	public func assert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Assert(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func deny() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Deny(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func permitOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_PermitOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_IStackWalk_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_IStackWalk_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Security_IPermission /* System.Security.IPermission */: DNObject {
	public func copy() throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IPermission_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func intersect(target: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Intersect(self.__handle, targetC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func isSubsetOf(target: System_Security_IPermission? /* System.Security.IPermission */) throws -> Bool /* System.Boolean */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_IsSubsetOf(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func union(target: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Union(self.__handle, targetC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Security_IPermission_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Security_IPermission_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_UnhandledExceptionEventArgs /* System.UnhandledExceptionEventArgs */: System_EventArgs {
	public convenience init?(exception: System_Object? /* System.Object */, isTerminating: Bool /* System.Boolean */) throws {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_Create(exceptionC, isTerminating, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getExceptionObject() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_ExceptionObject_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsTerminating() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_IsTerminating_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_UnhandledExceptionEventArgs_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_UnhandledExceptionEventArgs_Destroy(self.__handle)
		
	
	}
	
	

}




public class System_Reflection_Assembly_Array /* System.Reflection.Assembly[] */: System_Array {
	

}















public class System_AssemblyLoadEventArgs /* System.AssemblyLoadEventArgs */: System_EventArgs {
	public convenience init?(loadedAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws {
		let loadedAssemblyC = loadedAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AssemblyLoadEventArgs_Create(loadedAssemblyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getLoadedAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AssemblyLoadEventArgs_LoadedAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_AssemblyLoadEventArgs_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_AssemblyLoadEventArgs_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Runtime_Remoting_ObjectHandle /* System.Runtime.Remoting.ObjectHandle */: System_MarshalByRefObject {
	public func unwrap() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Remoting_ObjectHandle_Unwrap(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(o: System_Object? /* System.Object */) throws {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Remoting_ObjectHandle_Create(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Runtime_Remoting_ObjectHandle_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Runtime_Remoting_ObjectHandle_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_Timer /* System.Threading.Timer */: System_MarshalByRefObject {
	public func change(dueTime: Int32 /* System.Int32 */, period: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func change(dueTime: System_TimeSpan? /* System.TimeSpan */, period: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let dueTimeC = dueTime?.__handle
		let periodC = period?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_1(self.__handle, dueTimeC, periodC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func change(dueTime: UInt32 /* System.UInt32 */, period: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_2(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func change(dueTime: Int64 /* System.Int64 */, period: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_3(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func dispose(notifyObject: System_Threading_WaitHandle? /* System.Threading.WaitHandle */) throws -> Bool /* System.Boolean */ {
		let notifyObjectC = notifyObject?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Dispose(self.__handle, notifyObjectC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Timer_Dispose_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (System_Threading_Timer_Create)
	// TODO: Method with Delegate parameter (System_Threading_Timer_Create_1)
	// TODO: Method with Delegate parameter (System_Threading_Timer_Create_2)
	// TODO: Method with Delegate parameter (System_Threading_Timer_Create_3)
	// TODO: Method with Delegate parameter (System_Threading_Timer_Create_4)
	public class func getActiveCount() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_ActiveCount_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_Timer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_Timer_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_CancellationTokenSource /* System.Threading.CancellationTokenSource */: System_Object {
	public func cancel() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Cancel(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func cancel(throwOnFirstException: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Cancel_1(self.__handle, throwOnFirstException, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func cancelAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CancelAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func cancelAfter(delay: System_TimeSpan? /* System.TimeSpan */) throws {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_CancelAfter(self.__handle, delayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func cancelAfter(millisecondsDelay: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_CancelAfter_1(self.__handle, millisecondsDelay, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func tryReset() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_TryReset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func createLinkedTokenSource(token1: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, token2: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let token1C = token1?.__handle
		let token2C = token2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource(token1C, token2C, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createLinkedTokenSource(token: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let tokenC = token?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource_1(tokenC, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createLinkedTokenSource(tokens: System_Threading_CancellationToken_Array? /* System.Threading.CancellationToken[] */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let tokensC = tokens?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource_2(tokensC, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(delay: System_TimeSpan? /* System.TimeSpan */) throws {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_2(delayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(millisecondsDelay: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_3(millisecondsDelay, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getIsCancellationRequested() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_IsCancellationRequested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getToken() throws -> System_Threading_CancellationToken? /* System.Threading.CancellationToken */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Token_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Threading_CancellationTokenSource_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Threading_CancellationTokenSource_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Threading_CancellationToken_Array /* System.Threading.CancellationToken[] */: System_Array {
	

}















public class System_Random /* System.Random */: System_Object {
	public func next() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func next(maxValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next_1(self.__handle, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func next(minValue: Int32 /* System.Int32 */, maxValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next_2(self.__handle, minValue, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextInt64() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextInt64(maxValue: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64_1(self.__handle, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextInt64(minValue: Int64 /* System.Int64 */, maxValue: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64_2(self.__handle, minValue, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextSingle() throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextSingle(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextDouble() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextDouble(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func nextBytes(buffer: System_Byte_Array? /* System.Byte[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Random_NextBytes(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getItems(T: System_Type /* System.Type */, choices: System_Array? /* System.Array */, length: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		let choicesC = choices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_GetItems_A1(self.__handle, TC, choicesC, length, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func shuffle(T: System_Type /* System.Type */, values: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Random_Shuffle_A1(self.__handle, TC, valuesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(Seed: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Create_1(Seed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public class func getShared() throws -> System_Random? /* System.Random */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Shared_Get(&__exceptionC)
		
		let __returnValue = System_Random(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Random_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Random_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_Text_StringBuilder /* System.Text.StringBuilder */: System_Object {
	public func ensureCapacity(capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_EnsureCapacity(self.__handle, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func toString(startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ToString_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func clear() throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Clear(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getChunks() throws -> System_Text_StringBuilder_ChunkEnumerator? /* System.Text.StringBuilder.ChunkEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_GetChunks(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder_ChunkEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt8 /* System.Char */, repeatCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append(self.__handle, value, repeatCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_1(self.__handle, valueC, startIndex, charCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_2(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_3(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_4(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Text_StringBuilder? /* System.Text.StringBuilder */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_5(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendLine() throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendLine(value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyTo(sourceIndex: Int32 /* System.Int32 */, destination: System_Char_Array? /* System.Char[] */, destinationIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_CopyTo(self.__handle, sourceIndex, destinationC, destinationIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_String? /* System.String */, count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert(self.__handle, index, valueC, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func remove(startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Remove(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Bool /* System.Boolean */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_6(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt8 /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_7(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Int8 /* System.SByte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_8(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt8 /* System.Byte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_9(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Int16 /* System.Int16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_10(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_11(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Int64 /* System.Int64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_12(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Float /* System.Single */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_13(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: Double /* System.Double */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_14(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Decimal? /* System.Decimal */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_15(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt16 /* System.UInt16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_16(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt32 /* System.UInt32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_17(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: UInt64 /* System.UInt64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_18(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_19(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_Char_Array? /* System.Char[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_20(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(value: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_21(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_22(self.__handle, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func append(provider: System_IFormatProvider? /* System.IFormatProvider */, handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_23(self.__handle, providerC, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendLine(handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_2(self.__handle, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendLine(provider: System_IFormatProvider? /* System.IFormatProvider */, handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_3(self.__handle, providerC, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendJoin(separator: System_String? /* System.String */, values: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendJoin(separator: System_String? /* System.String */, values: System_String_Array? /* System.String[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_1(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendJoin(separator: UInt8 /* System.Char */, values: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_2(self.__handle, separator, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendJoin(separator: UInt8 /* System.Char */, values: System_String_Array? /* System.String[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_3(self.__handle, separator, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_1(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Bool /* System.Boolean */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_2(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Int8 /* System.SByte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_3(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: UInt8 /* System.Byte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_4(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Int16 /* System.Int16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_5(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: UInt8 /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_6(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Char_Array? /* System.Char[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_7(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Char_Array? /* System.Char[] */, startIndex: Int32 /* System.Int32 */, charCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_8(self.__handle, index, valueC, startIndex, charCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_9(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Int64 /* System.Int64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_10(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Float /* System.Single */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_11(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: Double /* System.Double */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_12(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Decimal? /* System.Decimal */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_13(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: UInt16 /* System.UInt16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_14(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: UInt32 /* System.UInt32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_15(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: UInt64 /* System.UInt64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_16(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func insert(index: Int32 /* System.Int32 */, value: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_17(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat(self.__handle, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_1(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_2(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(format: System_String? /* System.String */, args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_3(self.__handle, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_4(self.__handle, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_5(self.__handle, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_6(self.__handle, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_String? /* System.String */, args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_7(self.__handle, providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(TArg0: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A1(self.__handle, TArg0C, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(TArg0: System_Type /* System.Type */, TArg1: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A2(self.__handle, TArg0C, TArg1C, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(TArg0: System_Type /* System.Type */, TArg1: System_Type /* System.Type */, TArg2: System_Type /* System.Type */, provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let TArg2C = TArg2.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A3(self.__handle, TArg0C, TArg1C, TArg2C, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendFormat(provider: System_IFormatProvider? /* System.IFormatProvider */, format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_8(self.__handle, providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldValue: System_String? /* System.String */, newValue: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace(self.__handle, oldValueC, newValueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func equals(sb: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws -> Bool /* System.Boolean */ {
		let sbC = sb?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Equals(self.__handle, sbC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func replace(oldValue: System_String? /* System.String */, newValue: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_1(self.__handle, oldValueC, newValueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldChar: UInt8 /* System.Char */, newChar: UInt8 /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_2(self.__handle, oldChar, newChar, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(oldChar: UInt8 /* System.Char */, newChar: UInt8 /* System.Char */, startIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_3(self.__handle, oldChar, newChar, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_2(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: System_String? /* System.String */, capacity: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_3(valueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(value: System_String? /* System.String */, startIndex: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */, capacity: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_4(valueC, startIndex, length, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(capacity: Int32 /* System.Int32 */, maxCapacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_5(capacity, maxCapacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCapacity() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Capacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCapacity(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_Capacity_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMaxCapacity() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_MaxCapacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getLength() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setLength(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_Length_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_StringBuilder_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_StringBuilder_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Text_StringBuilder_ChunkEnumerator /* System.Text.StringBuilder.ChunkEnumerator */: System_ValueType {
	public func getEnumerator() throws -> System_Text_StringBuilder_ChunkEnumerator? /* System.Text.StringBuilder.ChunkEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ChunkEnumerator_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder_ChunkEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ChunkEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getCurrent() throws -> System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ChunkEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_ReadOnlyMemory_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_StringBuilder_ChunkEnumerator_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_StringBuilder_ChunkEnumerator_Destroy(self.__handle)
		
	
	}
	
	

}














public class System_Text_StringBuilder_AppendInterpolatedStringHandler /* System.Text.StringBuilder.AppendInterpolatedStringHandler */: System_ValueType {
	public func appendLiteral(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendLiteral(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(T: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1(self.__handle, TC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(T: System_Type /* System.Type */, value: System_Object? /* System.Object */, format: System_String? /* System.String */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_1(self.__handle, TC, valueC, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(T: System_Type /* System.Type */, value: System_Object? /* System.Object */, alignment: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_2(self.__handle, TC, valueC, alignment, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(T: System_Type /* System.Type */, value: System_Object? /* System.Object */, alignment: Int32 /* System.Int32 */, format: System_String? /* System.String */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_3(self.__handle, TC, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(value: System_String? /* System.String */, alignment: Int32 /* System.Int32 */, format: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_2(self.__handle, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func appendFormatted(value: System_Object? /* System.Object */, alignment: Int32 /* System.Int32 */, format: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_3(self.__handle, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(literalLength: Int32 /* System.Int32 */, formattedCount: Int32 /* System.Int32 */, stringBuilder: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let stringBuilderC = stringBuilder?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendInterpolatedStringHandler_Create(literalLength, formattedCount, stringBuilderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(literalLength: Int32 /* System.Int32 */, formattedCount: Int32 /* System.Int32 */, stringBuilder: System_Text_StringBuilder? /* System.Text.StringBuilder */, provider: System_IFormatProvider? /* System.IFormatProvider */) throws {
		let stringBuilderC = stringBuilder?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendInterpolatedStringHandler_Create_1(literalLength, formattedCount, stringBuilderC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Text_StringBuilder_AppendInterpolatedStringHandler_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Text_StringBuilder_AppendInterpolatedStringHandler_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
public class System_IO_Path /* System.IO.Path */: System_Object {
	public class func changeExtension(path: System_String? /* System.String */, extension: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let extensionC = extension?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_ChangeExtension(pathC, extensionC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func exists(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getDirectoryName(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetDirectoryName(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getExtension(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetExtension(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileName(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFileName(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileNameWithoutExtension(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFileNameWithoutExtension(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getRandomFileName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetRandomFileName(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isPathFullyQualified(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_IsPathFullyQualified(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func hasExtension(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_HasExtension(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func combine(path1: System_String? /* System.String */, path2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine(path1C, path2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func combine(path1: System_String? /* System.String */, path2: System_String? /* System.String */, path3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_1(path1C, path2C, path3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func combine(path1: System_String? /* System.String */, path2: System_String? /* System.String */, path3: System_String? /* System.String */, path4: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		let path4C = path4?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_2(path1C, path2C, path3C, path4C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func combine(paths: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let pathsC = paths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_3(pathsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(path1: System_String? /* System.String */, path2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join(path1C, path2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(path1: System_String? /* System.String */, path2: System_String? /* System.String */, path3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_1(path1C, path2C, path3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(path1: System_String? /* System.String */, path2: System_String? /* System.String */, path3: System_String? /* System.String */, path4: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		let path4C = path4?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_2(path1C, path2C, path3C, path4C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func join(paths: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let pathsC = paths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_3(pathsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getRelativePath(relativeTo: System_String? /* System.String */, path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let relativeToC = relativeTo?.__handle
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetRelativePath(relativeToC, pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func trimEndingDirectorySeparator(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_TrimEndingDirectorySeparator(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func endsInDirectorySeparator(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_EndsInDirectorySeparator(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getInvalidFileNameChars() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetInvalidFileNameChars(&__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getInvalidPathChars() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetInvalidPathChars(&__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFullPath(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFullPath(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFullPath(path: System_String? /* System.String */, basePath: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let basePathC = basePath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFullPath_1(pathC, basePathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTempPath() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetTempPath(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getTempFileName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetTempFileName(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func isPathRooted(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_IsPathRooted(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getPathRoot(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetPathRoot(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectorySeparatorChar() -> UInt8 /* System.Char */ {
		
		
		let __returnValueC = System_IO_Path_DirectorySeparatorChar_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getAltDirectorySeparatorChar() -> UInt8 /* System.Char */ {
		
		
		let __returnValueC = System_IO_Path_AltDirectorySeparatorChar_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getVolumeSeparatorChar() -> UInt8 /* System.Char */ {
		
		
		let __returnValueC = System_IO_Path_VolumeSeparatorChar_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getPathSeparator() -> UInt8 /* System.Char */ {
		
		
		let __returnValueC = System_IO_Path_PathSeparator_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getInvalidPathChars() -> System_Char_Array? /* System.Char[] */ {
		
		
		let __returnValueC = System_IO_Path_InvalidPathChars_Get()
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_Path_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_Path_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_File /* System.IO.File */: System_Object {
	public class func openText(path: System_String? /* System.String */) throws -> System_IO_StreamReader? /* System.IO.StreamReader */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createText(path: System_String? /* System.String */) throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_CreateText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func appendText(path: System_String? /* System.String */) throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func copy(sourceFileName: System_String? /* System.String */, destFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Copy(sourceFileNameC, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func copy(sourceFileName: System_String? /* System.String */, destFileName: System_String? /* System.String */, overwrite: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Copy_1(sourceFileNameC, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func create(path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_1(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func create(path: System_String? /* System.String */, bufferSize: Int32 /* System.Int32 */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_2(pathC, bufferSize, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func create(path: System_String? /* System.String */, bufferSize: Int32 /* System.Int32 */, options: System_IO_FileOptions /* System.IO.FileOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_3(pathC, bufferSize, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func delete(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Delete(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func exists(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func open(path: System_String? /* System.String */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_1(pathC, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func open(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_2(pathC, modeC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func open(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_3(pathC, modeC, accessC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func open(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_4(pathC, modeC, accessC, shareC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func openHandle(path: System_String? /* System.String */, mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */, options: System_IO_FileOptions /* System.IO.FileOptions */, preallocationSize: Int64 /* System.Int64 */) throws -> Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenHandle(pathC, modeC, accessC, shareC, optionsC, preallocationSize, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeFileHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setCreationTime(path: System_String? /* System.String */, creationTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTime(pathC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setCreationTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, creationTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTime_1(fileHandleC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setCreationTimeUtc(path: System_String? /* System.String */, creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTimeUtc(pathC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setCreationTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTimeUtc_1(fileHandleC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getCreationTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCreationTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCreationTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCreationTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setLastAccessTime(path: System_String? /* System.String */, lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTime(pathC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastAccessTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTime_1(fileHandleC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastAccessTimeUtc(path: System_String? /* System.String */, lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTimeUtc(pathC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastAccessTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTimeUtc_1(fileHandleC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastAccessTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastAccessTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastAccessTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastAccessTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setLastWriteTime(path: System_String? /* System.String */, lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTime(pathC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastWriteTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTime_1(fileHandleC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastWriteTimeUtc(path: System_String? /* System.String */, lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTimeUtc(pathC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastWriteTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTimeUtc_1(fileHandleC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastWriteTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastWriteTime(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastWriteTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastWriteTimeUtc(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getAttributes(path: System_String? /* System.String */) throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetAttributes(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getAttributes(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetAttributes_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setAttributes(path: System_String? /* System.String */, fileAttributes: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let pathC = path?.__handle
		let fileAttributesC = fileAttributes.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetAttributes(pathC, fileAttributesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setAttributes(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, fileAttributes: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let fileHandleC = fileHandle?.__handle
		let fileAttributesC = fileAttributes.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetAttributes_1(fileHandleC, fileAttributesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getUnixFileMode(path: System_String? /* System.String */) throws -> System_IO_UnixFileMode /* System.IO.UnixFileMode */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetUnixFileMode(pathC, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getUnixFileMode(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_IO_UnixFileMode /* System.IO.UnixFileMode */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetUnixFileMode_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setUnixFileMode(path: System_String? /* System.String */, mode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetUnixFileMode(pathC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setUnixFileMode(fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, mode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let fileHandleC = fileHandle?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetUnixFileMode_1(fileHandleC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func openRead(path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenRead(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func openWrite(path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenWrite(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllText(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllText(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllText(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllText_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllText(path: System_String? /* System.String */, contents: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllText(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeAllText(path: System_String? /* System.String */, contents: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllText_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func readAllBytes(path: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllBytes(pathC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllBytes(path: System_String? /* System.String */, bytes: System_Byte_Array? /* System.Byte[] */) throws {
		let pathC = path?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllBytes(pathC, bytesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func readAllLines(path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLines(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllLines(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLines_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readLines(path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLines(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readLines(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLines_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readLinesAsync(path: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Collections_Generic_IAsyncEnumerable_A1? /* System.Collections.Generic.IAsyncEnumerable<System.String> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLinesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IAsyncEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readLinesAsync(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Collections_Generic_IAsyncEnumerable_A1? /* System.Collections.Generic.IAsyncEnumerable<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLinesAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IAsyncEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllLines(path: System_String? /* System.String */, contents: System_String_Array? /* System.String[] */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeAllLines(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_1(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeAllLines(path: System_String? /* System.String */, contents: System_String_Array? /* System.String[] */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_2(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func writeAllLines(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_3(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func appendAllText(path: System_String? /* System.String */, contents: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllText(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func appendAllText(path: System_String? /* System.String */, contents: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllText_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func appendAllLines(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllLines(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func appendAllLines(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllLines_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func replace(sourceFileName: System_String? /* System.String */, destinationFileName: System_String? /* System.String */, destinationBackupFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Replace(sourceFileNameC, destinationFileNameC, destinationBackupFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func replace(sourceFileName: System_String? /* System.String */, destinationFileName: System_String? /* System.String */, destinationBackupFileName: System_String? /* System.String */, ignoreMetadataErrors: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Replace_1(sourceFileNameC, destinationFileNameC, destinationBackupFileNameC, ignoreMetadataErrors, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func move(sourceFileName: System_String? /* System.String */, destFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Move(sourceFileNameC, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func move(sourceFileName: System_String? /* System.String */, destFileName: System_String? /* System.String */, overwrite: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Move_1(sourceFileNameC, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func encrypt(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Encrypt(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func decrypt(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Decrypt(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func readAllTextAsync(path: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllTextAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllTextAsync(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllTextAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllTextAsync(path: System_String? /* System.String */, contents: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllTextAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllTextAsync(path: System_String? /* System.String */, contents: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllTextAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllBytesAsync(path: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Byte[]> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllBytesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllBytesAsync(path: System_String? /* System.String */, bytes: System_Byte_Array? /* System.Byte[] */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let bytesC = bytes?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllBytesAsync(pathC, bytesC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllLinesAsync(path: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String[]> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLinesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func readAllLinesAsync(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String[]> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLinesAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllLinesAsync(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllLinesAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func writeAllLinesAsync(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllLinesAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func appendAllTextAsync(path: System_String? /* System.String */, contents: System_String? /* System.String */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllTextAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func appendAllTextAsync(path: System_String? /* System.String */, contents: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllTextAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func appendAllLinesAsync(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllLinesAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func appendAllLinesAsync(path: System_String? /* System.String */, contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, encoding: System_Text_Encoding? /* System.Text.Encoding */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllLinesAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createSymbolicLink(path: System_String? /* System.String */, pathToTarget: System_String? /* System.String */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let pathC = path?.__handle
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_CreateSymbolicLink(pathC, pathToTargetC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func resolveLinkTarget(linkPath: System_String? /* System.String */, returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let linkPathC = linkPath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ResolveLinkTarget(linkPathC, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_File_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_File_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_StreamReader /* System.IO.StreamReader */: System_IO_TextReader {
	public override func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamReader_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func discardBufferedData() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamReader_DiscardBufferedData(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func peek() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Peek(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func read() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Read(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func read(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Read_1(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func readToEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readBlock(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadBlock(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func readLine() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readLineAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readLineAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadLineAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readToEndAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEndAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readToEndAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEndAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readAsync(buffer: System_Memory_A1? /* System.Memory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readBlockAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadBlockAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func readBlockAsync(buffer: System_Memory_A1? /* System.Memory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadBlockAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create(streamC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_1(streamC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_2(streamC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_3(streamC, encodingC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, bufferSize: Int32 /* System.Int32 */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_4(streamC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, bufferSize: Int32 /* System.Int32 */, leaveOpen: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_5(streamC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_6(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_7(pathC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_8(pathC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_9(pathC, encodingC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_10(pathC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_11(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_12(pathC, encodingC, detectEncodingFromByteOrderMarks, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCurrentEncoding() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_CurrentEncoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getBaseStream() throws -> System_IO_Stream? /* System.IO.Stream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_BaseStream_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEndOfStream() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_EndOfStream_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public class func getNull() -> System_IO_StreamReader? /* System.IO.StreamReader */ {
		
		
		let __returnValueC = System_IO_StreamReader_Null_Get()
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_StreamReader_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_StreamReader_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_TextReader /* System.IO.TextReader */: System_MarshalByRefObject {
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextReader_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextReader_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func peek() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Peek(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func read() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Read(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func read(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Read_1(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func readToEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readBlock(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadBlock(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func readLine() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readLineAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readLineAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadLineAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readToEndAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEndAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readToEndAsync(cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEndAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readAsync(buffer: System_Memory_A1? /* System.Memory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readBlockAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadBlockAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func readBlockAsync(buffer: System_Memory_A1? /* System.Memory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask_A1? /* System.Threading.Tasks.ValueTask<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadBlockAsync_1(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func synchronized(reader: System_IO_TextReader? /* System.IO.TextReader */) throws -> System_IO_TextReader? /* System.IO.TextReader */ {
		let readerC = reader?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Synchronized(readerC, &__exceptionC)
		
		let __returnValue = System_IO_TextReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getNull() -> System_IO_TextReader? /* System.IO.TextReader */ {
		
		
		let __returnValueC = System_IO_TextReader_Null_Get()
		
		let __returnValue = System_IO_TextReader(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_TextReader_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_TextReader_Destroy(self.__handle)
		
	
	}
	
	

}
























public class System_IO_StreamWriter /* System.IO.StreamWriter */: System_IO_TextWriter {
	public override func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(value: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_1(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeLine(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_4(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_5(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_6(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func write(format: System_String? /* System.String */, arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_7(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_1(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_2(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_3(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeLine(format: System_String? /* System.String */, arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_4(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func writeAsync(value: UInt8 /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeAsync(value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync_3(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeLineAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeLineAsync(value: UInt8 /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_1(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeLineAsync(value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_2(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeLineAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_3(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func writeLineAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_4(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create(streamC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_1(streamC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */, bufferSize: Int32 /* System.Int32 */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_2(streamC, encodingC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(stream: System_IO_Stream? /* System.IO.Stream */, encoding: System_Text_Encoding? /* System.Text.Encoding */, bufferSize: Int32 /* System.Int32 */, leaveOpen: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_3(streamC, encodingC, bufferSize, leaveOpen, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_4(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, append: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_5(pathC, append, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, append: Bool /* System.Boolean */, encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_6(pathC, append, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, append: Bool /* System.Boolean */, encoding: System_Text_Encoding? /* System.Text.Encoding */, bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_7(pathC, append, encodingC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_8(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */, encoding: System_Text_Encoding? /* System.Text.Encoding */, options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_9(pathC, encodingC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getAutoFlush() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_AutoFlush_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setAutoFlush(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_AutoFlush_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getBaseStream() throws -> System_IO_Stream? /* System.IO.Stream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_BaseStream_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override func getEncoding() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Encoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getNull() -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		
		
		let __returnValueC = System_IO_StreamWriter_Null_Get()
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_StreamWriter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_StreamWriter_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_TextWriter /* System.IO.TextWriter */: System_MarshalByRefObject {
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_1(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_3(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_4(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_5(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_6(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_7(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_8(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_9(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: System_Decimal? /* System.Decimal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_10(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_11(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_12(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_13(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_14(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_15(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_16(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func write(format: System_String? /* System.String */, arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_17(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: UInt8 /* System.Char */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_1(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_2(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_3(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_4(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_5(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_6(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_7(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_8(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_9(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_10(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: System_Decimal? /* System.Decimal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_11(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_12(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_13(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_14(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_15(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_16(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(format: System_String? /* System.String */, arg0: System_Object? /* System.Object */, arg1: System_Object? /* System.Object */, arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_17(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeLine(format: System_String? /* System.String */, arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_18(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func writeAsync(value: UInt8 /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(value: System_Text_StringBuilder? /* System.Text.StringBuilder */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_2(self.__handle, valueC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(buffer: System_Char_Array? /* System.Char[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_3(self.__handle, bufferC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_4(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_5(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(value: UInt8 /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(value: System_Text_StringBuilder? /* System.Text.StringBuilder */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_2(self.__handle, valueC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(buffer: System_Char_Array? /* System.Char[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_3(self.__handle, bufferC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(buffer: System_Char_Array? /* System.Char[] */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_4(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync(buffer: System_ReadOnlyMemory_A1? /* System.ReadOnlyMemory<System.Char> */, cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_5(self.__handle, bufferC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func writeLineAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_6(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func synchronized(writer: System_IO_TextWriter? /* System.IO.TextWriter */) throws -> System_IO_TextWriter? /* System.IO.TextWriter */ {
		let writerC = writer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_Synchronized(writerC, &__exceptionC)
		
		let __returnValue = System_IO_TextWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFormatProvider() throws -> System_IFormatProvider? /* System.IFormatProvider */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_FormatProvider_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IFormatProvider(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getEncoding() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_Encoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNewLine() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_NewLine_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNewLine(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_NewLine_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public class func getNull() -> System_IO_TextWriter? /* System.IO.TextWriter */ {
		
		
		let __returnValueC = System_IO_TextWriter_Null_Get()
		
		let __returnValue = System_IO_TextWriter(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_TextWriter_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_TextWriter_Destroy(self.__handle)
		
	
	}
	
	

}
















































public class System_IO_FileSystemInfo /* System.IO.FileSystemInfo */: System_MarshalByRefObject {
	public func getObjectData(info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func createAsSymbolicLink(pathToTarget: System_String? /* System.String */) throws {
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreateAsSymbolicLink(self.__handle, pathToTargetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func resolveLinkTarget(returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_ResolveLinkTarget(self.__handle, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func refresh() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Refresh(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getFullName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getExtension() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Extension_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getExists() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getCreationTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_CreationTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCreationTime(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreationTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCreationTimeUtc() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_CreationTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setCreationTimeUtc(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreationTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLastAccessTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastAccessTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLastAccessTime(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastAccessTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLastAccessTimeUtc() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastAccessTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLastAccessTimeUtc(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastAccessTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLastWriteTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastWriteTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLastWriteTime(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastWriteTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLastWriteTimeUtc() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastWriteTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLastWriteTimeUtc(value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastWriteTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLinkTarget() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LinkTarget_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getUnixFileMode() throws -> System_IO_UnixFileMode /* System.IO.UnixFileMode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_UnixFileMode_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setUnixFileMode(value: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_UnixFileMode_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAttributes() throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAttributes(value: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Attributes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_FileSystemInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_FileSystemInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_FileInfo /* System.IO.FileInfo */: System_IO_FileSystemInfo {
	public func open(options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open(self.__handle, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func openText() throws -> System_IO_StreamReader? /* System.IO.StreamReader */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func createText() throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CreateText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func appendText() throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_AppendText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyTo(destFileName: System_String? /* System.String */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CopyTo(self.__handle, destFileNameC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func copyTo(destFileName: System_String? /* System.String */, overwrite: Bool /* System.Boolean */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CopyTo_1(self.__handle, destFileNameC, overwrite, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func create() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Create_1(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func open(mode: System_IO_FileMode /* System.IO.FileMode */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_1(self.__handle, modeC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func open(mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_2(self.__handle, modeC, accessC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func open(mode: System_IO_FileMode /* System.IO.FileMode */, access: System_IO_FileAccess /* System.IO.FileAccess */, share: System_IO_FileShare /* System.IO.FileShare */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_3(self.__handle, modeC, accessC, shareC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func openRead() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenRead(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func openWrite() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenWrite(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func moveTo(destFileName: System_String? /* System.String */) throws {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_MoveTo(self.__handle, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func moveTo(destFileName: System_String? /* System.String */, overwrite: Bool /* System.Boolean */) throws {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_MoveTo_1(self.__handle, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func replace(destinationFileName: System_String? /* System.String */, destinationBackupFileName: System_String? /* System.String */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Replace(self.__handle, destinationFileNameC, destinationBackupFileNameC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func replace(destinationFileName: System_String? /* System.String */, destinationBackupFileName: System_String? /* System.String */, ignoreMetadataErrors: Bool /* System.Boolean */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Replace_1(self.__handle, destinationFileNameC, destinationBackupFileNameC, ignoreMetadataErrors, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func decrypt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Decrypt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func encrypt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Encrypt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(fileName: System_String? /* System.String */) throws {
		let fileNameC = fileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Create_2(fileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getLength() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func getDirectoryName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_DirectoryName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getDirectory() throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Directory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getIsReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setIsReadOnly(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_IsReadOnly_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override func getExists() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_FileInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_FileInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_DirectoryInfo /* System.IO.DirectoryInfo */: System_IO_FileSystemInfo {
	public func createSubdirectory(path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_CreateSubdirectory(self.__handle, pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func create() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Create_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getFiles() throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFiles(searchPattern: System_String? /* System.String */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFiles(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFiles(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFileSystemInfos() throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFileSystemInfos(searchPattern: System_String? /* System.String */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFileSystemInfos(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getFileSystemInfos(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDirectories() throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDirectories(searchPattern: System_String? /* System.String */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDirectories(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDirectories(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateDirectories() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateDirectories(searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateDirectories(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateDirectories(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFiles() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFiles(searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFiles(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFiles(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFileSystemInfos() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFileSystemInfos(searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFileSystemInfos(searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func enumerateFileSystemInfos(searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func moveTo(destDirName: System_String? /* System.String */) throws {
		let destDirNameC = destDirName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_MoveTo(self.__handle, destDirNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func delete(recursive: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Delete_1(self.__handle, recursive, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Create_2(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getParent() throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Parent_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getRoot() throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Root_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override func getExists() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_DirectoryInfo_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_DirectoryInfo_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_FileInfo_Array /* System.IO.FileInfo[] */: System_Array {
	

}















public class System_IO_EnumerationOptions /* System.IO.EnumerationOptions */: System_Object {
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getRecurseSubdirectories() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_RecurseSubdirectories_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setRecurseSubdirectories(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_RecurseSubdirectories_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getIgnoreInaccessible() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_IgnoreInaccessible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setIgnoreInaccessible(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_IgnoreInaccessible_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getBufferSize() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_BufferSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setBufferSize(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_BufferSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAttributesToSkip() throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_AttributesToSkip_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAttributesToSkip(value: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_AttributesToSkip_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMatchType() throws -> System_IO_MatchType /* System.IO.MatchType */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MatchType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_MatchType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMatchType(value: System_IO_MatchType /* System.IO.MatchType */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MatchType_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMatchCasing() throws -> System_IO_MatchCasing /* System.IO.MatchCasing */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MatchCasing_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_MatchCasing(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setMatchCasing(value: System_IO_MatchCasing /* System.IO.MatchCasing */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MatchCasing_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getMaxRecursionDepth() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MaxRecursionDepth_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setMaxRecursionDepth(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MaxRecursionDepth_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getReturnSpecialDirectories() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_ReturnSpecialDirectories_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setReturnSpecialDirectories(value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_ReturnSpecialDirectories_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_EnumerationOptions_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_EnumerationOptions_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_IO_FileSystemInfo_Array /* System.IO.FileSystemInfo[] */: System_Array {
	

}















public class System_IO_DirectoryInfo_Array /* System.IO.DirectoryInfo[] */: System_Array {
	

}















public class System_IO_Directory /* System.IO.Directory */: System_Object {
	public class func getParent(path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetParent(pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createDirectory(path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateDirectory(pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createDirectory(path: System_String? /* System.String */, unixCreateMode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		let unixCreateModeC = unixCreateMode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateDirectory_1(pathC, unixCreateModeC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createTempSubdirectory(prefix: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let prefixC = prefix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateTempSubdirectory(prefixC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func exists(path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func setCreationTime(path: System_String? /* System.String */, creationTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCreationTime(pathC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setCreationTimeUtc(path: System_String? /* System.String */, creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCreationTimeUtc(pathC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getCreationTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCreationTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCreationTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCreationTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setLastWriteTime(path: System_String? /* System.String */, lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastWriteTime(pathC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastWriteTimeUtc(path: System_String? /* System.String */, lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastWriteTimeUtc(pathC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastWriteTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastWriteTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastWriteTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastWriteTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setLastAccessTime(path: System_String? /* System.String */, lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastAccessTime(pathC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func setLastAccessTimeUtc(path: System_String? /* System.String */, lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastAccessTimeUtc(pathC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLastAccessTime(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastAccessTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getLastAccessTimeUtc(path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastAccessTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFiles(path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectories(path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileSystemEntries(path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateDirectories(path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateDirectories(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFiles(path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFiles(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFileSystemEntries(path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func enumerateFileSystemEntries(path: System_String? /* System.String */, searchPattern: System_String? /* System.String */, enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDirectoryRoot(path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectoryRoot(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getCurrentDirectory() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCurrentDirectory(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setCurrentDirectory(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCurrentDirectory(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func move(sourceDirName: System_String? /* System.String */, destDirName: System_String? /* System.String */) throws {
		let sourceDirNameC = sourceDirName?.__handle
		let destDirNameC = destDirName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Move(sourceDirNameC, destDirNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func delete(path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Delete(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func delete(path: System_String? /* System.String */, recursive: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Delete_1(pathC, recursive, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func getLogicalDrives() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLogicalDrives(&__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func createSymbolicLink(path: System_String? /* System.String */, pathToTarget: System_String? /* System.String */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let pathC = path?.__handle
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateSymbolicLink(pathC, pathToTargetC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func resolveLinkTarget(linkPath: System_String? /* System.String */, returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let linkPathC = linkPath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_ResolveLinkTarget(linkPathC, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_IO_Directory_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_IO_Directory_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_Generic_IEnumerable_A1 /* System.Collections.Generic.IEnumerable<> */: DNObject {
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_Generic_IEnumerable_A1_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_Generic_IEnumerable_A1_Destroy(self.__handle)
		
	
	}
	
	

}


public class System_Collections_Generic_IList_A1 /* System.Collections.Generic.IList<> */: DNObject {
	public func indexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IList_A1_IndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func insert(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IList_A1_Insert(self.__handle, TC, index, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeAt(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IList_A1_RemoveAt(self.__handle, TC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_Generic_IList_A1_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_Generic_IList_A1_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.
public class System_Collections_Generic_List_A1 /* System.Collections.Generic.List<> */: System_Object {
	public func add(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Add(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func binarySearch(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_BinarySearch(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func clear(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Clear(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func contains(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Contains(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func copyTo(T: System_Type /* System.Type */, array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo(self.__handle, TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, array: System_Array? /* System.Array */, arrayIndex: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo_1(self.__handle, TC, index, arrayC, arrayIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func copyTo(T: System_Type /* System.Type */, array: System_Array? /* System.Array */, arrayIndex: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo_2(self.__handle, TC, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func ensureCapacity(T: System_Type /* System.Type */, capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_EnsureCapacity(self.__handle, TC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getRange(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_GetRange(self.__handle, TC, index, count, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func slice(T: System_Type /* System.Type */, start: Int32 /* System.Int32 */, length: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Slice(self.__handle, TC, start, length, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func indexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */, index: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf_1(self.__handle, TC, itemC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func indexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf_2(self.__handle, TC, itemC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func insert(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Insert(self.__handle, TC, index, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func lastIndexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */, index: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf_1(self.__handle, TC, itemC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func lastIndexOf(T: System_Type /* System.Type */, item: System_Object? /* System.Object */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf_2(self.__handle, TC, itemC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func remove(T: System_Type /* System.Type */, item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Remove(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func removeAt(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_RemoveAt(self.__handle, TC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeRange(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_RemoveRange(self.__handle, TC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func reverse(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Reverse(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func reverse(T: System_Type /* System.Type */, index: Int32 /* System.Int32 */, count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Reverse_1(self.__handle, TC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func sort(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Sort(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func toArray(T: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_ToArray(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func trimExcess(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_TrimExcess(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Create(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(T: System_Type /* System.Type */, capacity: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Create_1(TC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCapacity(T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Capacity_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setCapacity(T: System_Type /* System.Type */, value: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Capacity_Set(self.__handle, TC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getCount(T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Count_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_Generic_List_A1_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_Generic_List_A1_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

public class System_Collections_Generic_Dictionary_A2 /* System.Collections.Generic.Dictionary<,> */: System_Object {
	public func add(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_Add(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func clear(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_Clear(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func containsKey(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_ContainsKey(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func containsValue(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_ContainsValue(self.__handle, TKeyC, TValueC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func getObjectData(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_GetObjectData(self.__handle, TKeyC, TValueC, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func onDeserialization(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, sender: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_OnDeserialization(self.__handle, TKeyC, TValueC, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func remove(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Remove(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func remove(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */, value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Remove_1(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func tryGetValue(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */, value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_TryGetValue(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func tryAdd(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_TryAdd(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func ensureCapacity(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_EnsureCapacity(self.__handle, TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func trimExcess(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_TrimExcess(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func trimExcess(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, capacity: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_TrimExcess_1(self.__handle, TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public convenience init?(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Create(TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, capacity: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Create_1(TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCount(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Count_Get(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Collections_Generic_Dictionary_A2_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Collections_Generic_Dictionary_A2_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TValue" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

public class System_Tuple_A1 /* System.Tuple<> */: System_Object {
	public override func equals(T1: System_Type /* System.Type */, obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Equals(self.__handle, T1C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode(T1: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_GetHashCode(self.__handle, T1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString(T1: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_ToString(self.__handle, T1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(T1: System_Type /* System.Type */, item1: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let item1C = item1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Create(T1C, item1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getItem1(T1: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Item1_Get(self.__handle, T1C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Tuple_A1_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Tuple_A1_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T1" was skipped. Reason: It has no full name.
public class System_Tuple_A2 /* System.Tuple<,> */: System_Object {
	public override func equals(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Equals(self.__handle, T1C, T2C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_GetHashCode(self.__handle, T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_ToString(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, item1: System_Object? /* System.Object */, item2: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Create(T1C, T2C, item1C, item2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getItem1(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Item1_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getItem2(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Item2_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Tuple_A2_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Tuple_A2_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
public class System_Tuple_A3 /* System.Tuple<,,> */: System_Object {
	public override func equals(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */, obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Equals(self.__handle, T1C, T2C, T3C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func getHashCode(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_GetHashCode(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public override func toString(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_ToString(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */, item1: System_Object? /* System.Object */, item2: System_Object? /* System.Object */, item3: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Create(T1C, T2C, T3C, item1C, item2C, item3C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getItem1(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item1_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getItem2(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item2_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getItem3(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item3_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: System_Tuple_A3_TypeOf())
		
	
	}
	
	internal override func destroy() {
		System_Tuple_A3_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
public class NativeAOT_CodeGeneratorInputSample_Address /* NativeAOT.CodeGeneratorInputSample.Address */: System_Object {
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_Address_Move)
	public convenience init?(street: System_String? /* System.String */, city: System_String? /* System.String */) throws {
		let streetC = street?.__handle
		let cityC = city?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_Create(streetC, cityC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getStreet() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_Street_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getCity() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_City_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Address_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Address_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_IAnimal /* NativeAOT.CodeGeneratorInputSample.IAnimal */: DNObject {
	public func eat(food: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let foodC = food?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IAnimal_Eat(self.__handle, foodC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_IAnimal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_AnimalFactory /* NativeAOT.CodeGeneratorInputSample.AnimalFactory */: System_Object {
	public class func createAnimal(animalName: System_String? /* System.String */) throws -> NativeAOT_CodeGeneratorInputSample_IAnimal? /* NativeAOT.CodeGeneratorInputSample.IAnimal */ {
		let animalNameC = animalName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal(animalNameC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_IAnimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_1)
	public class func createAnimal(T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_A1(TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func getDEFAULT_CREATOR() -> NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate? /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_DEFAULT_CREATOR_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_AnimalFactory_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.
public class NativeAOT_CodeGeneratorInputSample_BaseAnimal /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */: System_Object {
	public func eat(food: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let foodC = food?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat(self.__handle, foodC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_BaseAnimal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_Cat /* NativeAOT.CodeGeneratorInputSample.Cat */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public override func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Cat_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getCatName() -> System_String? /* System.String */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Cat_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Cat_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_Dog /* NativeAOT.CodeGeneratorInputSample.Dog */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public override func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Dog_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getDogName() -> System_String? /* System.String */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Dog_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Dog_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_GenericAnimal /* NativeAOT.CodeGeneratorInputSample.GenericAnimal */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public convenience init?(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericAnimal_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public override func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericAnimal_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericAnimal_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1 /* NativeAOT.CodeGeneratorInputSample.GenericTestClass<> */: System_Object {
	public func returnGenericClassType(T: System_Type /* System.Type */) throws -> System_Type? /* System.Type */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_ReturnGenericClassType(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnGenericClassTypeAndGenericMethodType(T: System_Type /* System.Type */, TM: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let TC = T.__handle
		let TMC = TM.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_ReturnGenericClassTypeAndGenericMethodType_A1(TC, TMC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func extreme(T: System_Type /* System.Type */, TM: System_Type /* System.Type */, countIn: Int32 /* System.Int32 */, countOut: inout Int32? /* System.Int32 */, typeGenericInput: System_Object? /* System.Object */, typeGenericOutput: inout System_Object? /* System.Object */, methodGenericInputThatIsToBeReplacedWithDefault: inout System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let TMC = TM.__handle
		let typeGenericInputC = typeGenericInput?.__handle
		var typeGenericOutputC = typeGenericOutput?.__handle
		var methodGenericInputThatIsToBeReplacedWithDefaultC = methodGenericInputThatIsToBeReplacedWithDefault?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Extreme_A1(self.__handle, TC, TMC, countIn, countOut, typeGenericInputC, &typeGenericOutputC, &methodGenericInputThatIsToBeReplacedWithDefaultC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Create(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getAProperty(T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AProperty_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setAProperty(T: System_Type /* System.Type */, value: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AProperty_Set(self.__handle, TC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAField(T: System_Type /* System.Type */) -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AField_Get(self.__handle, TC)
		
		return __returnValueC
		
	
	}
	
	public func setAField(T: System_Type /* System.Type */, value: Int32 /* System.Int32 */) {
		let TC = T.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AField_Set(self.__handle, TC, value)
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "T" was skipped. Reason: It has no full name.

// Type "TM" was skipped. Reason: It has no full name.

public class NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2 /* NativeAOT.CodeGeneratorInputSample.GenericTestClass<,> */: System_Object {
	public func returnGenericClassTypes(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_ReturnGenericClassTypes(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnGenericClassTypeAndGenericMethodType(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, TM: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let TMC = TM.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_ReturnGenericClassTypeAndGenericMethodType_A1(T1C, T2C, TMC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_Create(T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getAProperty(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AProperty_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setAProperty(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, value: Int32 /* System.Int32 */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AProperty_Set(self.__handle, T1C, T2C, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAField(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AField_Get(self.__handle, T1C, T2C)
		
		return __returnValueC
		
	
	}
	
	public func setAField(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */, value: Int32 /* System.Int32 */) {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AField_Set(self.__handle, T1C, T2C, value)
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_GenericTests /* NativeAOT.CodeGeneratorInputSample.GenericTests */: System_Object {
	public func joinListOfStrings(listOfString: System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */, separator: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let listOfStringC = listOfString?.__handle
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_JoinListOfStrings(self.__handle, listOfStringC, separatorC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnGenericType(T: System_Type /* System.Type */) throws -> System_Type? /* System.Type */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericType_A1(TC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnGenericTypeAsOutParameter(T: System_Type /* System.Type */, typeOfT: inout System_Type? /* System.Type */) throws {
		let TC = T.__handle
		var typeOfTC = typeOfT?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypeAsOutParameter_A1(TC, &typeOfTC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func returnGenericTypeAsRefParameter(T: System_Type /* System.Type */, typeOfT: inout System_Type? /* System.Type */) throws {
		let TC = T.__handle
		var typeOfTC = typeOfT?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypeAsRefParameter_A1(TC, &typeOfTC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public class func returnGenericTypes(T1: System_Type /* System.Type */, T2: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypes_A2(T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnSimpleKeyValuePair(TKey: System_Type /* System.Type */, TValue: System_Type /* System.Type */, key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws -> NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair? /* NativeAOT.CodeGeneratorInputSample.GenericTests.SimpleKeyValuePair */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnSimpleKeyValuePair_A2(TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnDefaultValueOfGenericType(T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnDefaultValueOfGenericType_A1(TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnArrayOfDefaultValuesOfGenericType(T: System_Type /* System.Type */, numberOfElements: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfDefaultValuesOfGenericType_A1(TC, numberOfElements, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func returnArrayOfRepeatedValues(T: System_Type /* System.Type */, value: System_Object? /* System.Object */, numberOfElements: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfRepeatedValues_A1(self.__handle, TC, valueC, numberOfElements, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func returnStringOfJoinedArray(T: System_Type /* System.Type */, values: System_Array? /* System.Array */, separator: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let TC = T.__handle
		let valuesC = values?.__handle
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnStringOfJoinedArray_A1(TC, valuesC, separatorC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getListOfStrings() throws -> System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ListOfStrings_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_List_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setListOfStrings(value: System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ListOfStrings_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getDictionaryOfStringKeysAndExceptionValues() throws -> System_Collections_Generic_Dictionary_A2? /* System.Collections.Generic.Dictionary<System.String,System.Exception> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_DictionaryOfStringKeysAndExceptionValues_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_Dictionary_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setDictionaryOfStringKeysAndExceptionValues(value: System_Collections_Generic_Dictionary_A2? /* System.Collections.Generic.Dictionary<System.String,System.Exception> */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_DictionaryOfStringKeysAndExceptionValues_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTests_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTests_Destroy(self.__handle)
		
	
	}
	
	

}






































public class NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair /* NativeAOT.CodeGeneratorInputSample.GenericTests.SimpleKeyValuePair */: System_ValueType {
	public convenience init?(key: System_Object? /* System.Object */, value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Create(keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getKey() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Destroy(self.__handle)
		
	
	}
	
	

}


// Type "TKey" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class NativeAOT_CodeGeneratorInputSample_Person /* NativeAOT.CodeGeneratorInputSample.Person */: System_Object {
	public func getNiceLevelString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getWelcomeMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func addChild(child: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_AddChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeChild(child: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_RemoveChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func removeChildAt(index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func childAt(index: Int32 /* System.Int32 */) throws -> NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_ChildAt(self.__handle, index, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_Person_ChangeAge)
	public convenience init?(firstName: System_String? /* System.String */, lastName: System_String? /* System.String */, age: Int32 /* System.Int32 */) throws {
		let firstNameC = firstName?.__handle
		let lastNameC = lastName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Create(firstNameC, lastNameC, age, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public convenience init?(firstName: System_String? /* System.String */, lastName: System_String? /* System.String */) throws {
		let firstNameC = firstName?.__handle
		let lastNameC = lastName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Create_1(firstNameC, lastNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getFirstName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setFirstName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getLastName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_LastName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setLastName(value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_LastName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAge() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Age_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func setAge(value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Age_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getAddress() throws -> NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Address_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Address(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setAddress(value: NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Address_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getChildren() throws -> NativeAOT_CodeGeneratorInputSample_Person_Array? /* NativeAOT.CodeGeneratorInputSample.Person[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Children_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setChildren(value: NativeAOT_CodeGeneratorInputSample_Person_Array? /* NativeAOT.CodeGeneratorInputSample.Person[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Children_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getNiceLevel() throws -> NativeAOT_CodeGeneratorInputSample_NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_NiceLevels(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func setNiceLevel(value: NativeAOT_CodeGeneratorInputSample_NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public func getFullName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public func getNumberOfChildren() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	
	public func addNumberOfChildrenChanged(value: NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate? /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Add(self.__handle, valueC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func removeNumberOfChildrenChanged(value: NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate? /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */) {
		let valueC = value?.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Remove(self.__handle, valueC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getAGE_WHEN_BORN() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get()
		
		return __returnValueC
		
	
	}
	
	
	public class func getDEFAULT_AGE() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get()
		
		return __returnValueC
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_Person_Array /* NativeAOT.CodeGeneratorInputSample.Person[] */: System_Array {
	

}















public class NativeAOT_CodeGeneratorInputSample_Person_Extensions /* NativeAOT.CodeGeneratorInputSample.Person_Extensions */: System_Object {
	public class func increaseAge(person: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */, byYears: Int32 /* System.Int32 */) throws {
		let personC = person?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge(personC, byYears, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_Extensions_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_Book /* NativeAOT.CodeGeneratorInputSample.Book */: System_Object {
	public convenience init?(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	
	public class func getDonQuixote() -> NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_DonQuixote_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getATaleOfTwoCities() -> NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_ATaleOfTwoCities_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public class func getTheLordOfTheRings() -> NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_TheLordOfTheRings_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Book_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Book_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_TestClass /* NativeAOT.CodeGeneratorInputSample.TestClass */: System_Object {
	public func sayHello() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_SayHello(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func sayHello(name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_SayHello_1(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getHello() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetHello(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func getDate() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetDate(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func add(number1: Int32 /* System.Int32 */, number2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Add(self.__handle, number1, number2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func divide(number1: Int32 /* System.Int32 */, number2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Divide(self.__handle, number1, number2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public class func getTestEnumName(testEnum: NativeAOT_CodeGeneratorInputSample_TestEnum /* NativeAOT.CodeGeneratorInputSample.TestEnum */) throws -> System_String? /* System.String */ {
		let testEnumC = testEnum.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName(testEnumC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func modifyByRefValueAndReturnOriginalValue(valueToModify: inout Int32? /* System.Int32 */, targetValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefValueAndReturnOriginalValue(self.__handle, &valueToModify, targetValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public func modifyByRefEnum(enumToModify: inout NativeAOT_CodeGeneratorInputSample_TestEnum? /* NativeAOT.CodeGeneratorInputSample.TestEnum */) throws {
		var enumToModifyC = enumToModify.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefEnum(self.__handle, &enumToModifyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func modifyByRefBookAndReturnOriginalBookAsOutParameter(bookToModify: inout NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */, targetBook: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */, originalBook: inout NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */) throws {
		var bookToModifyC = bookToModify?.__handle
		let targetBookC = targetBook?.__handle
		var originalBookC = originalBook?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefBookAndReturnOriginalBookAsOutParameter(self.__handle, &bookToModifyC, targetBookC, &originalBookC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	public func getCurrentBookByRef() throws -> inout NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetCurrentBookByRef(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public func increaseAndGetCurrentIntValueByRef() throws -> inout Int32? /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_IncreaseAndGetCurrentIntValueByRef(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	
	}
	
	public func getCurrentBook() -> NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Get(self.__handle)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	
	}
	
	public func setCurrentBook(value: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */) {
		let valueC = value?.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Set(self.__handle, valueC)
		
		
	
	}
	
	
	public func getCurrentIntValue() -> Int32 /* System.Int32 */ {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Get(self.__handle)
		
		return __returnValueC
		
	
	}
	
	public func setCurrentIntValue(value: Int32 /* System.Int32 */) {
		
		
		NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Set(self.__handle, value)
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_TestClass_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_TestClass_Destroy(self.__handle)
		
	
	}
	
	

}




public class NativeAOT_CodeGeneratorInputSample_Transformer /* NativeAOT.CodeGeneratorInputSample.Transformer */: System_Object {
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_Transformer_TransformString)
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_Transformer_TransformDoubles)
	// TODO: Method with Delegate parameter (NativeAOT_CodeGeneratorInputSample_Transformer_GetAndTransformString)
	public class func uppercaseString(inputString: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let inputStringC = inputString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_UppercaseString(inputStringC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_Destroy(self.__handle)
		
	
	}
	
	

}


public class NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers /* NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers */: System_Object {
	public class func getUppercaseStringTransformer() throws -> NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Get(&__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	
	}
	
	public class func setUppercaseStringTransformer(value: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	
	}
	
	
	public override class func typeOf() -> System_Type? /* System.Type */ {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_TypeOf())
		
	
	}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_Destroy(self.__handle)
		
	
	}
	
	

}


// TODO: Delegate Type Defition (System.Action)
	internal override func destroy() {
		System_Action_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.MulticastDelegate)
	internal override func destroy() {
		System_MulticastDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Delegate)
	internal override func destroy() {
		System_Delegate_Destroy(self.__handle)
		
	
	}
	
	



// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// TODO: Delegate Type Defition (System.Reflection.TypeFilter)
	internal override func destroy() {
		System_Reflection_TypeFilter_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.AsyncCallback)
	internal override func destroy() {
		System_AsyncCallback_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Reflection.ModuleResolveEventHandler)
	internal override func destroy() {
		System_Reflection_ModuleResolveEventHandler_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Reflection.MemberFilter)
	internal override func destroy() {
		System_Reflection_MemberFilter_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Threading.ContextCallback)
	internal override func destroy() {
		System_Threading_ContextCallback_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.UnhandledExceptionEventHandler)
	internal override func destroy() {
		System_UnhandledExceptionEventHandler_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.EventHandler)
	internal override func destroy() {
		System_EventHandler_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.AssemblyLoadEventHandler)
	internal override func destroy() {
		System_AssemblyLoadEventHandler_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.ResolveEventHandler)
	internal override func destroy() {
		System_ResolveEventHandler_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Threading.ThreadStart)
	internal override func destroy() {
		System_Threading_ThreadStart_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Threading.ParameterizedThreadStart)
	internal override func destroy() {
		System_Threading_ParameterizedThreadStart_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (System.Threading.TimerCallback)
	internal override func destroy() {
		System_Threading_TimerCallback_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.MoveDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_MoveDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.ByRefReturnValueDelegate)
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.ByRefParametersDelegate)
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.OutParametersDelegate)
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Destroy(self.__handle)
		
	
	}
	
	



// TODO: Delegate Type Defition (NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate)
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Destroy(self.__handle)
		
	
	}
	
	




// MARK: - END APIs

// MARK: - BEGIN Footer


// MARK: - END Footer

