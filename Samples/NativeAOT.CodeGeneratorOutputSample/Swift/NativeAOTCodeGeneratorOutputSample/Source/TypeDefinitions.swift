// Number of generated types: 1490
// Number of generated members: 4638

// MARK: - BEGIN Header
import Foundation

// MARK: - END Header

// MARK: - BEGIN Utils
public struct DNChar: Equatable {
    public let cValue: wchar_t

    public init(cValue: wchar_t) {
        self.cValue = cValue
    }

    public static func == (lhs: DNChar, rhs: DNChar) -> Bool {
        lhs.cValue == rhs.cValue
    }
}

public class DNObject {
    let __handle: UnsafeMutableRawPointer
    var __skipDestroy = false

    public class var typeName: String { "" }
    public class var fullTypeName: String { "" }

    required init(handle: UnsafeMutableRawPointer) {
		self.__handle = handle
	}

	convenience init?(handle: UnsafeMutableRawPointer?) {
		guard let handle else { return nil }

		self.init(handle: handle)
	}

    public class var typeOf: System_Type /* System.Type */ {
        fatalError("Override in subclass")
    }

    internal func destroy() {
        // Override in subclass
    }

    deinit {
        guard !__skipDestroy else { return }
        
        // Enable for debugging
        // print("[DEBUG] Will destroy \(Self.fullTypeName)")

		destroy()

        // Enable for debugging
        // print("[DEBUG] Did destroy \(Self.fullTypeName)")
	}
}

// MARK: - Type Conversion Extensions
public extension DNObject {
    func `is`(_ type: System_Type) -> Bool {
        return DNObjectIs(self.__handle, type.__handle)
    }

    func `is`<T>(_ type: T.Type? = nil) -> Bool where T: DNObject {
        let dnType: System_Type
        
        if let type {
            dnType = type.typeOf
        } else {
            dnType = T.typeOf
        }
        
        return DNObjectIs(self.__handle, dnType.__handle)
    }

    func castAs<T>(_ type: T.Type? = nil) -> T? where T: DNObject {
        let dnType: System_Type
        
        if let type {
            dnType = type.typeOf
        } else {
            dnType = T.typeOf
        }
        
        guard let castedObjectC = DNObjectCastAs(self.__handle, dnType.__handle) else {
            return nil
        }
        
        let castedObject = T(handle: castedObjectC)
        
        return castedObject
    }

    func castTo<T>(_ type: T.Type? = nil) throws -> T where T: DNObject {
        let dnType: System_Type
        
        if let type {
            dnType = type.typeOf
        } else {
            dnType = T.typeOf
        }
    
        var exceptionC: System_Exception_t?
        
        let castedObjectC = DNObjectCastTo(self.__handle, dnType.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
    
        guard let castedObjectC else {
            fatalError("DNObjectCastTo didn't throw an exception but returned nil") 
        }
        
        let castedObject = T(handle: castedObjectC)
        
        return castedObject
    }
}

// MARK: - Primitive Conversion Extensions
public extension DNObject {
    func castToBool() throws -> Bool {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToBool(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromBool(_ boolValue: Bool) -> System_Object {
        let castedObjectC = DNObjectFromBool(boolValue)
		let castedObject = System_Object(handle: castedObjectC)

        return castedObject
	}

    func castToFloat() throws -> Float {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToFloat(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromFloat(_ floatValue: Float) -> System_Object {
        let castedObjectC = DNObjectFromFloat(floatValue)
		let castedObject = System_Object(handle: castedObjectC)

        return castedObject
	}

    func castToDouble() throws -> Double {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToDouble(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromDouble(_ doubleValue: Double) -> System_Object {
        let castedObjectC = DNObjectFromDouble(doubleValue)
		let castedObject = System_Object(handle: castedObjectC)

        return castedObject
	}

    func castToInt8() throws -> Int8 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToInt8(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromInt8(_ int8Value: Int8) -> System_Object {
        let castedObjectC = DNObjectFromInt8(int8Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToUInt8() throws -> UInt8 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToUInt8(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromUInt8(_ uint8Value: UInt8) -> System_Object {
        let castedObjectC = DNObjectFromUInt8(uint8Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToInt16() throws -> Int16 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToInt16(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromInt16(_ int16Value: Int16) -> System_Object {
        let castedObjectC = DNObjectFromInt16(int16Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToUInt16() throws -> UInt16 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToUInt16(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromUInt16(_ uint16Value: UInt16) -> System_Object {
        let castedObjectC = DNObjectFromUInt16(uint16Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToInt32() throws -> Int32 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToInt32(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromInt32(_ int32Value: Int32) -> System_Object {
        let castedObjectC = DNObjectFromInt32(int32Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToUInt32() throws -> UInt32 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToUInt32(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromUInt32(_ uint32Value: UInt32) -> System_Object {
        let castedObjectC = DNObjectFromUInt32(uint32Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToInt64() throws -> Int64 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToInt64(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromInt64(_ int64Value: Int64) -> System_Object {
        let castedObjectC = DNObjectFromInt64(int64Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }

    func castToUInt64() throws -> UInt64 {
        var exceptionC: System_Exception_t?
        
        let castedValue = DNObjectCastToUInt64(self.__handle, &exceptionC)
        
        if let exceptionC {
            let exception = System_Exception(handle: exceptionC)
            let exceptionError = exception.error
            
            throw exceptionError
        }
        
        return castedValue 
    }

    static func fromUInt64(_ uint64Value: UInt64) -> System_Object {
        let castedObjectC = DNObjectFromUInt64(uint64Value)
        let castedObject = System_Object(handle: castedObjectC)

        return castedObject
    }
}

public class DNError: LocalizedError {
    public let exception: System_Exception
    
    public init(exception: System_Exception) {
        self.exception = exception
    }
    
    public func stackTrace() -> String? {
        do {
            return try String(dotNETString: exception.stackTrace)
        } catch {
            return nil
        }
    }
    
    public var errorDescription: String? {
        do {
            return try String(dotNETString: exception.message)
        } catch {
            return nil
        }
    }
}

public extension System_Exception {
    var error: DNError {
        return DNError(exception: self)
    }
}

public extension String {
	func dotNETString() -> System_String {
		let dotNetStringHandle = DNStringFromC(self)
		
		return System_String(handle: dotNetStringHandle)
	}
	
	init?(dotNETString: System_String?) {
		guard let dotNETString else { return nil }
		
		self.init(dotNETString: dotNETString)
	}
	
	init(dotNETString: System_String) {
		let cString = DNStringToC(dotNETString.__handle)
		
		self.init(cString: cString)
		
		cString.deallocate()
	}
}

public extension System_String {
    func string() -> String {
        return String(dotNETString: self)
    }
}

extension System_Object: Equatable {
    public static func == (lhs: System_Object,
                           rhs: System_Object) -> Bool {
        return (try? Self.equals(lhs, rhs)) ?? false
    }
    
    public static func === (lhs: System_Object,
                            rhs: System_Object) -> Bool {
        return (try? Self.referenceEquals(lhs, rhs)) ?? false
    }
}

public final class NativeBox<T> {
    public let value: T
    
    public init(value: T) {
        self.value = value
    }
    
    public convenience init(_ value: T) {
        self.init(value: value)
    }
    
//    deinit {
//        print("Deinitializing \(Self.self)")
//    }
}

// MARK: - To Pointer
public extension NativeBox {
    func unretainedPointer() -> UnsafeRawPointer {
        pointer(retained: false)
    }
    
    func retainedPointer() -> UnsafeRawPointer {
        pointer(retained: true)
    }
}

private extension NativeBox {
    func pointer(retained: Bool) -> UnsafeRawPointer {
        let unmanaged: Unmanaged<NativeBox<T>>
        
        if retained {
            unmanaged = Unmanaged.passRetained(self)
        } else {
            unmanaged = Unmanaged.passUnretained(self)
        }
        
        let opaque = unmanaged.toOpaque()
        
        let pointer = UnsafeRawPointer(opaque)
        
        return pointer
    }
}

// MARK: - From Pointer
public extension NativeBox {
    static func fromPointer(_ pointer: UnsafeRawPointer) -> Self {
        let unmanaged = Unmanaged<Self>.fromOpaque(pointer)
        
        let box = unmanaged.takeUnretainedValue()
        
        return box
    }
}

// MARK: - Release
public extension NativeBox {
    static func release(_ pointer: UnsafeRawPointer) {
        let unmanaged = Unmanaged<Self>.fromOpaque(pointer)
        
        unmanaged.release()
    }
    
    func release(_ pointer: UnsafeRawPointer) {
        Self.release(pointer)
    }
}

extension UUID {
    public func dotNETGuid() -> System_Guid? {
        let guidString = self.uuidString
        let guidStringDN = guidString.dotNETString()
        
        var guid: System_Guid?
        
        guard (try? System_Guid.tryParse(guidStringDN,
                                         &guid)) ?? false else {
            return nil
        }
        
        return guid
    }
    
    public init?(dotNETGuid: System_Guid) {
        guard let uuidStringDN = try? dotNETGuid.toString() else {
            return nil
        }
        
        let uuidString = uuidStringDN.string()
        
        self.init(uuidString: uuidString)
    }
}

extension System_Guid {
    public func uuid() -> UUID? {
        return UUID(dotNETGuid: self)
    }
}

extension System_Array: Collection {
	public typealias Index = Int32
	public typealias Element = System_Object?
	
	public struct Iterator: IteratorProtocol {
		private let array: System_Array
		private var index: Index = 0
		
		private var length: Int32 {
			let arrayLength = (try? self.array.length) ?? 0
			
			return arrayLength
		}
		
		init(_ array: System_Array) {
			self.array = array
		}
		
		public mutating func next() -> Element? {
			defer { index += 1 }
			guard index < length else { return nil }
			
			let element = try? self.array.getValue(index)
			
			return element
		}
	}
	
	public var startIndex: Index {
		return 0
	}
	
	public var endIndex: Index {
		let length = (try? self.length) ?? 0
		
		guard length > 0 else {
			return 0
		}
		
		let theEndIndex = length - 1
		
		return theEndIndex
	}
	
	public func index(after i: Index) -> Index {
		return i + 1
	}
	
	public subscript (position: Index) -> System_Object? {
		precondition(position >= startIndex && position <= endIndex, "Out of bounds")
		
		guard let element = try? self.getValue(position) else {
			return nil
		}
		
		return element
	}
	
	public func makeIterator() -> Iterator {
		return Iterator(self)
	}
}



// MARK: - END Utils

// MARK: - BEGIN Common Types


// MARK: - END Common Types

// MARK: - BEGIN Unsupported Types
// Omitted due to settings

// MARK: - END Unsupported Types

// MARK: - BEGIN APIs
public enum System_TypeCode: Int32 {
	init(cValue: System_TypeCode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_TypeCode_t { get {
		System_TypeCode_t(rawValue: rawValue)!
	}}

	case empty = 0
	case object = 1
	case dBNull = 2
	case boolean = 3
	case char = 4
	case sByte = 5
	case byte = 6
	case int16 = 7
	case uInt16 = 8
	case int32 = 9
	case uInt32 = 10
	case int64 = 11
	case uInt64 = 12
	case single = 13
	case double = 14
	case decimal = 15
	case dateTime = 16
	case string = 18
}

extension System_TypeCode {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_TypeCode_TypeOf())
		
	}}
	
	
	
}

public struct System_Globalization_NumberStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_NumberStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_NumberStyles_t { get {
		System_Globalization_NumberStyles_t(rawValue: rawValue)
	}}

	public static let none = System_Globalization_NumberStyles([])
	public static let allowLeadingWhite = System_Globalization_NumberStyles(rawValue: 1)
	public static let allowTrailingWhite = System_Globalization_NumberStyles(rawValue: 2)
	public static let allowLeadingSign = System_Globalization_NumberStyles(rawValue: 4)
	public static let integer = System_Globalization_NumberStyles(rawValue: 7)
	public static let allowTrailingSign = System_Globalization_NumberStyles(rawValue: 8)
	public static let allowParentheses = System_Globalization_NumberStyles(rawValue: 16)
	public static let allowDecimalPoint = System_Globalization_NumberStyles(rawValue: 32)
	public static let allowThousands = System_Globalization_NumberStyles(rawValue: 64)
	public static let number = System_Globalization_NumberStyles(rawValue: 111)
	public static let allowExponent = System_Globalization_NumberStyles(rawValue: 128)
	public static let float = System_Globalization_NumberStyles(rawValue: 167)
	public static let allowCurrencySymbol = System_Globalization_NumberStyles(rawValue: 256)
	public static let currency = System_Globalization_NumberStyles(rawValue: 383)
	public static let any = System_Globalization_NumberStyles(rawValue: 511)
	public static let allowHexSpecifier = System_Globalization_NumberStyles(rawValue: 512)
	public static let hexNumber = System_Globalization_NumberStyles(rawValue: 515)
}

extension System_Globalization_NumberStyles {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_NumberStyles_TypeOf())
		
	}}
	
	
	
}

public struct System_Globalization_CultureTypes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_CultureTypes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_CultureTypes_t { get {
		System_Globalization_CultureTypes_t(rawValue: rawValue)
	}}

	public static let neutralCultures = System_Globalization_CultureTypes(rawValue: 1)
	public static let specificCultures = System_Globalization_CultureTypes(rawValue: 2)
	public static let installedWin32Cultures = System_Globalization_CultureTypes(rawValue: 4)
	public static let allCultures = System_Globalization_CultureTypes(rawValue: 7)
	public static let userCustomCulture = System_Globalization_CultureTypes(rawValue: 8)
	public static let replacementCultures = System_Globalization_CultureTypes(rawValue: 16)
	public static let windowsOnlyCultures = System_Globalization_CultureTypes(rawValue: 32)
	public static let frameworkCultures = System_Globalization_CultureTypes(rawValue: 64)
}

extension System_Globalization_CultureTypes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CultureTypes_TypeOf())
		
	}}
	
	
	
}

public enum System_MidpointRounding: Int32 {
	init(cValue: System_MidpointRounding_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_MidpointRounding_t { get {
		System_MidpointRounding_t(rawValue: rawValue)!
	}}

	case toEven = 0
	case awayFromZero = 1
	case toZero = 2
	case toNegativeInfinity = 3
	case toPositiveInfinity = 4
}

extension System_MidpointRounding {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_MidpointRounding_TypeOf())
		
	}}
	
	
	
}

public struct System_Globalization_TimeSpanStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_TimeSpanStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_TimeSpanStyles_t { get {
		System_Globalization_TimeSpanStyles_t(rawValue: rawValue)
	}}

	public static let none = System_Globalization_TimeSpanStyles([])
	public static let assumeNegative = System_Globalization_TimeSpanStyles(rawValue: 1)
}

extension System_Globalization_TimeSpanStyles {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_TimeSpanStyles_TypeOf())
		
	}}
	
	
	
}

public enum System_DateTimeKind: Int32 {
	init(cValue: System_DateTimeKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_DateTimeKind_t { get {
		System_DateTimeKind_t(rawValue: rawValue)!
	}}

	case unspecified = 0
	case utc = 1
	case local = 2
}

extension System_DateTimeKind {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_DateTimeKind_TypeOf())
		
	}}
	
	
	
}

public enum System_DayOfWeek: Int32 {
	init(cValue: System_DayOfWeek_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_DayOfWeek_t { get {
		System_DayOfWeek_t(rawValue: rawValue)!
	}}

	case sunday = 0
	case monday = 1
	case tuesday = 2
	case wednesday = 3
	case thursday = 4
	case friday = 5
	case saturday = 6
}

extension System_DayOfWeek {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_DayOfWeek_TypeOf())
		
	}}
	
	
	
}

public struct System_Globalization_DateTimeStyles: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_DateTimeStyles_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_DateTimeStyles_t { get {
		System_Globalization_DateTimeStyles_t(rawValue: rawValue)
	}}

	public static let none = System_Globalization_DateTimeStyles([])
	public static let allowLeadingWhite = System_Globalization_DateTimeStyles(rawValue: 1)
	public static let allowTrailingWhite = System_Globalization_DateTimeStyles(rawValue: 2)
	public static let allowInnerWhite = System_Globalization_DateTimeStyles(rawValue: 4)
	public static let allowWhiteSpaces = System_Globalization_DateTimeStyles(rawValue: 7)
	public static let noCurrentDateDefault = System_Globalization_DateTimeStyles(rawValue: 8)
	public static let adjustToUniversal = System_Globalization_DateTimeStyles(rawValue: 16)
	public static let assumeLocal = System_Globalization_DateTimeStyles(rawValue: 32)
	public static let assumeUniversal = System_Globalization_DateTimeStyles(rawValue: 64)
	public static let roundtripKind = System_Globalization_DateTimeStyles(rawValue: 128)
}

extension System_Globalization_DateTimeStyles {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_DateTimeStyles_TypeOf())
		
	}}
	
	
	
}

public enum System_Globalization_CalendarAlgorithmType: Int32 {
	init(cValue: System_Globalization_CalendarAlgorithmType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_CalendarAlgorithmType_t { get {
		System_Globalization_CalendarAlgorithmType_t(rawValue: rawValue)!
	}}

	case unknown = 0
	case solarCalendar = 1
	case lunarCalendar = 2
	case lunisolarCalendar = 3
}

extension System_Globalization_CalendarAlgorithmType {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CalendarAlgorithmType_TypeOf())
		
	}}
	
	
	
}

public enum System_Globalization_CalendarWeekRule: Int32 {
	init(cValue: System_Globalization_CalendarWeekRule_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_CalendarWeekRule_t { get {
		System_Globalization_CalendarWeekRule_t(rawValue: rawValue)!
	}}

	case firstDay = 0
	case firstFullWeek = 1
	case firstFourDayWeek = 2
}

extension System_Globalization_CalendarWeekRule {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CalendarWeekRule_TypeOf())
		
	}}
	
	
	
}

public struct System_Runtime_Serialization_StreamingContextStates: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Runtime_Serialization_StreamingContextStates_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Runtime_Serialization_StreamingContextStates_t { get {
		System_Runtime_Serialization_StreamingContextStates_t(rawValue: rawValue)
	}}

	public static let crossProcess = System_Runtime_Serialization_StreamingContextStates(rawValue: 1)
	public static let crossMachine = System_Runtime_Serialization_StreamingContextStates(rawValue: 2)
	public static let file = System_Runtime_Serialization_StreamingContextStates(rawValue: 4)
	public static let persistence = System_Runtime_Serialization_StreamingContextStates(rawValue: 8)
	public static let remoting = System_Runtime_Serialization_StreamingContextStates(rawValue: 16)
	public static let other = System_Runtime_Serialization_StreamingContextStates(rawValue: 32)
	public static let clone = System_Runtime_Serialization_StreamingContextStates(rawValue: 64)
	public static let crossAppDomain = System_Runtime_Serialization_StreamingContextStates(rawValue: 128)
	public static let all = System_Runtime_Serialization_StreamingContextStates(rawValue: 255)
}

extension System_Runtime_Serialization_StreamingContextStates {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_StreamingContextStates_TypeOf())
		
	}}
	
	
	
}

public enum System_Reflection_ProcessorArchitecture: Int32 {
	init(cValue: System_Reflection_ProcessorArchitecture_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_ProcessorArchitecture_t { get {
		System_Reflection_ProcessorArchitecture_t(rawValue: rawValue)!
	}}

	case none = 0
	case mSIL = 1
	case x86 = 2
	case iA64 = 3
	case amd64 = 4
	case arm = 5
}

extension System_Reflection_ProcessorArchitecture {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ProcessorArchitecture_TypeOf())
		
	}}
	
	
	
}

public enum System_Reflection_AssemblyContentType: Int32 {
	init(cValue: System_Reflection_AssemblyContentType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_AssemblyContentType_t { get {
		System_Reflection_AssemblyContentType_t(rawValue: rawValue)!
	}}

	case `default` = 0
	case windowsRuntime = 1
}

extension System_Reflection_AssemblyContentType {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_AssemblyContentType_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_AssemblyNameFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_AssemblyNameFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_AssemblyNameFlags_t { get {
		System_Reflection_AssemblyNameFlags_t(rawValue: rawValue)
	}}

	public static let none = System_Reflection_AssemblyNameFlags([])
	public static let publicKey = System_Reflection_AssemblyNameFlags(rawValue: 1)
	public static let retargetable = System_Reflection_AssemblyNameFlags(rawValue: 256)
	public static let enableJITcompileOptimizer = System_Reflection_AssemblyNameFlags(rawValue: 16384)
	public static let enableJITcompileTracking = System_Reflection_AssemblyNameFlags(rawValue: 32768)
}

extension System_Reflection_AssemblyNameFlags {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_AssemblyNameFlags_TypeOf())
		
	}}
	
	
	
}

public enum System_Configuration_Assemblies_AssemblyHashAlgorithm: Int32 {
	init(cValue: System_Configuration_Assemblies_AssemblyHashAlgorithm_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Configuration_Assemblies_AssemblyHashAlgorithm_t { get {
		System_Configuration_Assemblies_AssemblyHashAlgorithm_t(rawValue: rawValue)!
	}}

	case none = 0
	case mD5 = 32771
	case sHA1 = 32772
	case sHA256 = 32780
	case sHA384 = 32781
	case sHA512 = 32782
}

extension System_Configuration_Assemblies_AssemblyHashAlgorithm {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Configuration_Assemblies_AssemblyHashAlgorithm_TypeOf())
		
	}}
	
	
	
}

public enum System_Configuration_Assemblies_AssemblyVersionCompatibility: Int32 {
	init(cValue: System_Configuration_Assemblies_AssemblyVersionCompatibility_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Configuration_Assemblies_AssemblyVersionCompatibility_t { get {
		System_Configuration_Assemblies_AssemblyVersionCompatibility_t(rawValue: rawValue)!
	}}

	case sameMachine = 1
	case sameProcess = 2
	case sameDomain = 3
}

extension System_Configuration_Assemblies_AssemblyVersionCompatibility {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Configuration_Assemblies_AssemblyVersionCompatibility_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_ParameterAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ParameterAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ParameterAttributes_t { get {
		System_Reflection_ParameterAttributes_t(rawValue: rawValue)
	}}

	public static let none = System_Reflection_ParameterAttributes([])
	public static let `in` = System_Reflection_ParameterAttributes(rawValue: 1)
	public static let out = System_Reflection_ParameterAttributes(rawValue: 2)
	public static let lcid = System_Reflection_ParameterAttributes(rawValue: 4)
	public static let retval = System_Reflection_ParameterAttributes(rawValue: 8)
	public static let optional = System_Reflection_ParameterAttributes(rawValue: 16)
	public static let hasDefault = System_Reflection_ParameterAttributes(rawValue: 4096)
	public static let hasFieldMarshal = System_Reflection_ParameterAttributes(rawValue: 8192)
	public static let reserved3 = System_Reflection_ParameterAttributes(rawValue: 16384)
	public static let reserved4 = System_Reflection_ParameterAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_ParameterAttributes(rawValue: 61440)
}

extension System_Reflection_ParameterAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ParameterAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_PortableExecutableKinds: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_PortableExecutableKinds_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_PortableExecutableKinds_t { get {
		System_Reflection_PortableExecutableKinds_t(rawValue: rawValue)
	}}

	public static let notAPortableExecutableImage = System_Reflection_PortableExecutableKinds([])
	public static let iLOnly = System_Reflection_PortableExecutableKinds(rawValue: 1)
	public static let required32Bit = System_Reflection_PortableExecutableKinds(rawValue: 2)
	public static let pE32Plus = System_Reflection_PortableExecutableKinds(rawValue: 4)
	public static let unmanaged32Bit = System_Reflection_PortableExecutableKinds(rawValue: 8)
	public static let preferred32Bit = System_Reflection_PortableExecutableKinds(rawValue: 16)
}

extension System_Reflection_PortableExecutableKinds {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_PortableExecutableKinds_TypeOf())
		
	}}
	
	
	
}

public enum System_Reflection_ImageFileMachine: Int32 {
	init(cValue: System_Reflection_ImageFileMachine_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_ImageFileMachine_t { get {
		System_Reflection_ImageFileMachine_t(rawValue: rawValue)!
	}}

	case i386 = 332
	case aRM = 452
	case iA64 = 512
	case aMD64 = 34404
}

extension System_Reflection_ImageFileMachine {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ImageFileMachine_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_MemberTypes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_MemberTypes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_MemberTypes_t { get {
		System_Reflection_MemberTypes_t(rawValue: rawValue)
	}}

	public static let constructor = System_Reflection_MemberTypes(rawValue: 1)
	public static let event = System_Reflection_MemberTypes(rawValue: 2)
	public static let field = System_Reflection_MemberTypes(rawValue: 4)
	public static let method = System_Reflection_MemberTypes(rawValue: 8)
	public static let property = System_Reflection_MemberTypes(rawValue: 16)
	public static let typeInfo = System_Reflection_MemberTypes(rawValue: 32)
	public static let custom = System_Reflection_MemberTypes(rawValue: 64)
	public static let nestedType = System_Reflection_MemberTypes(rawValue: 128)
	public static let all = System_Reflection_MemberTypes(rawValue: 191)
}

extension System_Reflection_MemberTypes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MemberTypes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_BindingFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_BindingFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_BindingFlags_t { get {
		System_Reflection_BindingFlags_t(rawValue: rawValue)
	}}

	public static let `default` = System_Reflection_BindingFlags([])
	public static let ignoreCase = System_Reflection_BindingFlags(rawValue: 1)
	public static let declaredOnly = System_Reflection_BindingFlags(rawValue: 2)
	public static let instance = System_Reflection_BindingFlags(rawValue: 4)
	public static let `static` = System_Reflection_BindingFlags(rawValue: 8)
	public static let `public` = System_Reflection_BindingFlags(rawValue: 16)
	public static let nonPublic = System_Reflection_BindingFlags(rawValue: 32)
	public static let flattenHierarchy = System_Reflection_BindingFlags(rawValue: 64)
	public static let invokeMethod = System_Reflection_BindingFlags(rawValue: 256)
	public static let createInstance = System_Reflection_BindingFlags(rawValue: 512)
	public static let getField = System_Reflection_BindingFlags(rawValue: 1024)
	public static let setField = System_Reflection_BindingFlags(rawValue: 2048)
	public static let getProperty = System_Reflection_BindingFlags(rawValue: 4096)
	public static let setProperty = System_Reflection_BindingFlags(rawValue: 8192)
	public static let putDispProperty = System_Reflection_BindingFlags(rawValue: 16384)
	public static let putRefDispProperty = System_Reflection_BindingFlags(rawValue: 32768)
	public static let exactBinding = System_Reflection_BindingFlags(rawValue: 65536)
	public static let suppressChangeType = System_Reflection_BindingFlags(rawValue: 131072)
	public static let optionalParamBinding = System_Reflection_BindingFlags(rawValue: 262144)
	public static let ignoreReturn = System_Reflection_BindingFlags(rawValue: 16777216)
	public static let doNotWrapExceptions = System_Reflection_BindingFlags(rawValue: 33554432)
}

extension System_Reflection_BindingFlags {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_BindingFlags_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_FieldAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_FieldAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_FieldAttributes_t { get {
		System_Reflection_FieldAttributes_t(rawValue: rawValue)
	}}

	public static let privateScope = System_Reflection_FieldAttributes([])
	public static let `private` = System_Reflection_FieldAttributes(rawValue: 1)
	public static let famANDAssem = System_Reflection_FieldAttributes(rawValue: 2)
	public static let assembly = System_Reflection_FieldAttributes(rawValue: 3)
	public static let family = System_Reflection_FieldAttributes(rawValue: 4)
	public static let famORAssem = System_Reflection_FieldAttributes(rawValue: 5)
	public static let `public` = System_Reflection_FieldAttributes(rawValue: 6)
	public static let fieldAccessMask = System_Reflection_FieldAttributes(rawValue: 7)
	public static let `static` = System_Reflection_FieldAttributes(rawValue: 16)
	public static let initOnly = System_Reflection_FieldAttributes(rawValue: 32)
	public static let literal = System_Reflection_FieldAttributes(rawValue: 64)
	public static let notSerialized = System_Reflection_FieldAttributes(rawValue: 128)
	public static let hasFieldRVA = System_Reflection_FieldAttributes(rawValue: 256)
	public static let specialName = System_Reflection_FieldAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_FieldAttributes(rawValue: 1024)
	public static let hasFieldMarshal = System_Reflection_FieldAttributes(rawValue: 4096)
	public static let pinvokeImpl = System_Reflection_FieldAttributes(rawValue: 8192)
	public static let hasDefault = System_Reflection_FieldAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_FieldAttributes(rawValue: 38144)
}

extension System_Reflection_FieldAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_FieldAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_PropertyAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_PropertyAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_PropertyAttributes_t { get {
		System_Reflection_PropertyAttributes_t(rawValue: rawValue)
	}}

	public static let none = System_Reflection_PropertyAttributes([])
	public static let specialName = System_Reflection_PropertyAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_PropertyAttributes(rawValue: 1024)
	public static let hasDefault = System_Reflection_PropertyAttributes(rawValue: 4096)
	public static let reserved2 = System_Reflection_PropertyAttributes(rawValue: 8192)
	public static let reserved3 = System_Reflection_PropertyAttributes(rawValue: 16384)
	public static let reserved4 = System_Reflection_PropertyAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_PropertyAttributes(rawValue: 62464)
}

extension System_Reflection_PropertyAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_PropertyAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_CallingConventions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_CallingConventions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_CallingConventions_t { get {
		System_Reflection_CallingConventions_t(rawValue: rawValue)
	}}

	public static let standard = System_Reflection_CallingConventions(rawValue: 1)
	public static let varArgs = System_Reflection_CallingConventions(rawValue: 2)
	public static let any = System_Reflection_CallingConventions(rawValue: 3)
	public static let hasThis = System_Reflection_CallingConventions(rawValue: 32)
	public static let explicitThis = System_Reflection_CallingConventions(rawValue: 64)
}

extension System_Reflection_CallingConventions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_CallingConventions_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_MethodAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_MethodAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_MethodAttributes_t { get {
		System_Reflection_MethodAttributes_t(rawValue: rawValue)
	}}

	public static let privateScope = System_Reflection_MethodAttributes([])
	public static let reuseSlot = System_Reflection_MethodAttributes([])
	public static let `private` = System_Reflection_MethodAttributes(rawValue: 1)
	public static let famANDAssem = System_Reflection_MethodAttributes(rawValue: 2)
	public static let assembly = System_Reflection_MethodAttributes(rawValue: 3)
	public static let family = System_Reflection_MethodAttributes(rawValue: 4)
	public static let famORAssem = System_Reflection_MethodAttributes(rawValue: 5)
	public static let `public` = System_Reflection_MethodAttributes(rawValue: 6)
	public static let memberAccessMask = System_Reflection_MethodAttributes(rawValue: 7)
	public static let unmanagedExport = System_Reflection_MethodAttributes(rawValue: 8)
	public static let `static` = System_Reflection_MethodAttributes(rawValue: 16)
	public static let `final` = System_Reflection_MethodAttributes(rawValue: 32)
	public static let virtual = System_Reflection_MethodAttributes(rawValue: 64)
	public static let hideBySig = System_Reflection_MethodAttributes(rawValue: 128)
	public static let newSlot = System_Reflection_MethodAttributes(rawValue: 256)
	public static let vtableLayoutMask = System_Reflection_MethodAttributes(rawValue: 256)
	public static let checkAccessOnOverride = System_Reflection_MethodAttributes(rawValue: 512)
	public static let abstract = System_Reflection_MethodAttributes(rawValue: 1024)
	public static let specialName = System_Reflection_MethodAttributes(rawValue: 2048)
	public static let rTSpecialName = System_Reflection_MethodAttributes(rawValue: 4096)
	public static let pinvokeImpl = System_Reflection_MethodAttributes(rawValue: 8192)
	public static let hasSecurity = System_Reflection_MethodAttributes(rawValue: 16384)
	public static let requireSecObject = System_Reflection_MethodAttributes(rawValue: 32768)
	public static let reservedMask = System_Reflection_MethodAttributes(rawValue: 53248)
}

extension System_Reflection_MethodAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MethodAttributes_TypeOf())
		
	}}
	
	
	
}

public enum System_Reflection_MethodImplAttributes: Int32 {
	init(cValue: System_Reflection_MethodImplAttributes_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Reflection_MethodImplAttributes_t { get {
		System_Reflection_MethodImplAttributes_t(rawValue: rawValue)!
	}}

	case iL = 0
	public static let managed = System_Reflection_MethodImplAttributes.iL
	case native = 1
	case oPTIL = 2
	case codeTypeMask = 3
	public static let runtime = System_Reflection_MethodImplAttributes.codeTypeMask
	case managedMask = 4
	public static let unmanaged = System_Reflection_MethodImplAttributes.managedMask
	case noInlining = 8
	case forwardRef = 16
	case synchronized = 32
	case noOptimization = 64
	case preserveSig = 128
	case aggressiveInlining = 256
	case aggressiveOptimization = 512
	case internalCall = 4096
	case maxMethodImplVal = 65535
}

extension System_Reflection_MethodImplAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MethodImplAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_ExceptionHandlingClauseOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ExceptionHandlingClauseOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ExceptionHandlingClauseOptions_t { get {
		System_Reflection_ExceptionHandlingClauseOptions_t(rawValue: rawValue)
	}}

	public static let clause = System_Reflection_ExceptionHandlingClauseOptions([])
	public static let filter = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 1)
	public static let finally = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 2)
	public static let fault = System_Reflection_ExceptionHandlingClauseOptions(rawValue: 4)
}

extension System_Reflection_ExceptionHandlingClauseOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ExceptionHandlingClauseOptions_TypeOf())
		
	}}
	
	
	
}

public enum System_Threading_Tasks_TaskStatus: Int32 {
	init(cValue: System_Threading_Tasks_TaskStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_Tasks_TaskStatus_t { get {
		System_Threading_Tasks_TaskStatus_t(rawValue: rawValue)!
	}}

	case created = 0
	case waitingForActivation = 1
	case waitingToRun = 2
	case running = 3
	case waitingForChildrenToComplete = 4
	case ranToCompletion = 5
	case canceled = 6
	case faulted = 7
}

extension System_Threading_Tasks_TaskStatus {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_TaskStatus_TypeOf())
		
	}}
	
	
	
}

public struct System_Threading_Tasks_TaskCreationOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_TaskCreationOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_TaskCreationOptions_t { get {
		System_Threading_Tasks_TaskCreationOptions_t(rawValue: rawValue)
	}}

	public static let none = System_Threading_Tasks_TaskCreationOptions([])
	public static let preferFairness = System_Threading_Tasks_TaskCreationOptions(rawValue: 1)
	public static let longRunning = System_Threading_Tasks_TaskCreationOptions(rawValue: 2)
	public static let attachedToParent = System_Threading_Tasks_TaskCreationOptions(rawValue: 4)
	public static let denyChildAttach = System_Threading_Tasks_TaskCreationOptions(rawValue: 8)
	public static let hideScheduler = System_Threading_Tasks_TaskCreationOptions(rawValue: 16)
	public static let runContinuationsAsynchronously = System_Threading_Tasks_TaskCreationOptions(rawValue: 64)
}

extension System_Threading_Tasks_TaskCreationOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_TaskCreationOptions_TypeOf())
		
	}}
	
	
	
}

public struct System_Threading_Tasks_TaskContinuationOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_TaskContinuationOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_TaskContinuationOptions_t { get {
		System_Threading_Tasks_TaskContinuationOptions_t(rawValue: rawValue)
	}}

	public static let none = System_Threading_Tasks_TaskContinuationOptions([])
	public static let preferFairness = System_Threading_Tasks_TaskContinuationOptions(rawValue: 1)
	public static let longRunning = System_Threading_Tasks_TaskContinuationOptions(rawValue: 2)
	public static let attachedToParent = System_Threading_Tasks_TaskContinuationOptions(rawValue: 4)
	public static let denyChildAttach = System_Threading_Tasks_TaskContinuationOptions(rawValue: 8)
	public static let hideScheduler = System_Threading_Tasks_TaskContinuationOptions(rawValue: 16)
	public static let lazyCancellation = System_Threading_Tasks_TaskContinuationOptions(rawValue: 32)
	public static let runContinuationsAsynchronously = System_Threading_Tasks_TaskContinuationOptions(rawValue: 64)
	public static let notOnRanToCompletion = System_Threading_Tasks_TaskContinuationOptions(rawValue: 65536)
	public static let notOnFaulted = System_Threading_Tasks_TaskContinuationOptions(rawValue: 131072)
	public static let onlyOnCanceled = System_Threading_Tasks_TaskContinuationOptions(rawValue: 196608)
	public static let notOnCanceled = System_Threading_Tasks_TaskContinuationOptions(rawValue: 262144)
	public static let onlyOnFaulted = System_Threading_Tasks_TaskContinuationOptions(rawValue: 327680)
	public static let onlyOnRanToCompletion = System_Threading_Tasks_TaskContinuationOptions(rawValue: 393216)
	public static let executeSynchronously = System_Threading_Tasks_TaskContinuationOptions(rawValue: 524288)
}

extension System_Threading_Tasks_TaskContinuationOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_TaskContinuationOptions_TypeOf())
		
	}}
	
	
	
}

public enum System_Threading_Tasks_Sources_ValueTaskSourceStatus: Int32 {
	init(cValue: System_Threading_Tasks_Sources_ValueTaskSourceStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_Tasks_Sources_ValueTaskSourceStatus_t { get {
		System_Threading_Tasks_Sources_ValueTaskSourceStatus_t(rawValue: rawValue)!
	}}

	case pending = 0
	case succeeded = 1
	case faulted = 2
	case canceled = 3
}

extension System_Threading_Tasks_Sources_ValueTaskSourceStatus {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_Sources_ValueTaskSourceStatus_TypeOf())
		
	}}
	
	
	
}

public struct System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t { get {
		System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_t(rawValue: rawValue)
	}}

	public static let none = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags([])
	public static let useSchedulingContext = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags(rawValue: 1)
	public static let flowExecutionContext = System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags(rawValue: 2)
}

extension System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_TypeOf())
		
	}}
	
	
	
}

public enum System_IO_SeekOrigin: Int32 {
	init(cValue: System_IO_SeekOrigin_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_SeekOrigin_t { get {
		System_IO_SeekOrigin_t(rawValue: rawValue)!
	}}

	case begin = 0
	case current = 1
	case end = 2
}

extension System_IO_SeekOrigin {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_SeekOrigin_TypeOf())
		
	}}
	
	
	
}

public struct System_IO_FileAccess: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileAccess_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileAccess_t { get {
		System_IO_FileAccess_t(rawValue: rawValue)
	}}

	public static let read = System_IO_FileAccess(rawValue: 1)
	public static let write = System_IO_FileAccess(rawValue: 2)
	public static let readWrite = System_IO_FileAccess(rawValue: 3)
}

extension System_IO_FileAccess {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileAccess_TypeOf())
		
	}}
	
	
	
}

public enum System_IO_FileMode: Int32 {
	init(cValue: System_IO_FileMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_FileMode_t { get {
		System_IO_FileMode_t(rawValue: rawValue)!
	}}

	case createNew = 1
	case create = 2
	case `open` = 3
	case openOrCreate = 4
	case truncate = 5
	case append = 6
}

extension System_IO_FileMode {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileMode_TypeOf())
		
	}}
	
	
	
}

public struct System_IO_FileShare: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileShare_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileShare_t { get {
		System_IO_FileShare_t(rawValue: rawValue)
	}}

	public static let none = System_IO_FileShare([])
	public static let read = System_IO_FileShare(rawValue: 1)
	public static let write = System_IO_FileShare(rawValue: 2)
	public static let readWrite = System_IO_FileShare(rawValue: 3)
	public static let delete = System_IO_FileShare(rawValue: 4)
	public static let inheritable = System_IO_FileShare(rawValue: 16)
}

extension System_IO_FileShare {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileShare_TypeOf())
		
	}}
	
	
	
}

public struct System_IO_FileOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileOptions_t { get {
		System_IO_FileOptions_t(rawValue: rawValue)
	}}

	public static let none = System_IO_FileOptions([])
	public static let encrypted = System_IO_FileOptions(rawValue: 16384)
	public static let deleteOnClose = System_IO_FileOptions(rawValue: 67108864)
	public static let sequentialScan = System_IO_FileOptions(rawValue: 134217728)
	public static let randomAccess = System_IO_FileOptions(rawValue: 268435456)
	public static let asynchronous = System_IO_FileOptions(rawValue: 1073741824)
	public static let writeThrough = System_IO_FileOptions(rawValue: -2147483648)
}

extension System_IO_FileOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileOptions_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_EventAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_EventAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_EventAttributes_t { get {
		System_Reflection_EventAttributes_t(rawValue: rawValue)
	}}

	public static let none = System_Reflection_EventAttributes([])
	public static let specialName = System_Reflection_EventAttributes(rawValue: 512)
	public static let rTSpecialName = System_Reflection_EventAttributes(rawValue: 1024)
	public static let reservedMask = System_Reflection_EventAttributes(rawValue: 1024)
}

extension System_Reflection_EventAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_EventAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_ResourceLocation: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_ResourceLocation_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_ResourceLocation_t { get {
		System_Reflection_ResourceLocation_t(rawValue: rawValue)
	}}

	public static let embedded = System_Reflection_ResourceLocation(rawValue: 1)
	public static let containedInAnotherAssembly = System_Reflection_ResourceLocation(rawValue: 2)
	public static let containedInManifestFile = System_Reflection_ResourceLocation(rawValue: 4)
}

extension System_Reflection_ResourceLocation {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ResourceLocation_TypeOf())
		
	}}
	
	
	
}

public enum System_Security_SecurityRuleSet: UInt8 {
	init(cValue: System_Security_SecurityRuleSet_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_SecurityRuleSet_t { get {
		System_Security_SecurityRuleSet_t(rawValue: rawValue)!
	}}

	case none = 0
	case level1 = 1
	case level2 = 2
}

extension System_Security_SecurityRuleSet {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_SecurityRuleSet_TypeOf())
		
	}}
	
	
	
}

public enum System_Buffers_OperationStatus: Int32 {
	init(cValue: System_Buffers_OperationStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Buffers_OperationStatus_t { get {
		System_Buffers_OperationStatus_t(rawValue: rawValue)!
	}}

	case done = 0
	case destinationTooSmall = 1
	case needMoreData = 2
	case invalidData = 3
}

extension System_Buffers_OperationStatus {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Buffers_OperationStatus_TypeOf())
		
	}}
	
	
	
}

public enum System_Globalization_UnicodeCategory: Int32 {
	init(cValue: System_Globalization_UnicodeCategory_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_UnicodeCategory_t { get {
		System_Globalization_UnicodeCategory_t(rawValue: rawValue)!
	}}

	case uppercaseLetter = 0
	case lowercaseLetter = 1
	case titlecaseLetter = 2
	case modifierLetter = 3
	case otherLetter = 4
	case nonSpacingMark = 5
	case spacingCombiningMark = 6
	case enclosingMark = 7
	case decimalDigitNumber = 8
	case letterNumber = 9
	case otherNumber = 10
	case spaceSeparator = 11
	case lineSeparator = 12
	case paragraphSeparator = 13
	case control = 14
	case format = 15
	case surrogate = 16
	case privateUse = 17
	case connectorPunctuation = 18
	case dashPunctuation = 19
	case openPunctuation = 20
	case closePunctuation = 21
	case initialQuotePunctuation = 22
	case finalQuotePunctuation = 23
	case otherPunctuation = 24
	case mathSymbol = 25
	case currencySymbol = 26
	case modifierSymbol = 27
	case otherSymbol = 28
	case otherNotAssigned = 29
}

extension System_Globalization_UnicodeCategory {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_UnicodeCategory_TypeOf())
		
	}}
	
	
	
}

public struct System_Globalization_CompareOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Globalization_CompareOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Globalization_CompareOptions_t { get {
		System_Globalization_CompareOptions_t(rawValue: rawValue)
	}}

	public static let none = System_Globalization_CompareOptions([])
	public static let ignoreCase = System_Globalization_CompareOptions(rawValue: 1)
	public static let ignoreNonSpace = System_Globalization_CompareOptions(rawValue: 2)
	public static let ignoreSymbols = System_Globalization_CompareOptions(rawValue: 4)
	public static let ignoreKanaType = System_Globalization_CompareOptions(rawValue: 8)
	public static let ignoreWidth = System_Globalization_CompareOptions(rawValue: 16)
	public static let ordinalIgnoreCase = System_Globalization_CompareOptions(rawValue: 268435456)
	public static let stringSort = System_Globalization_CompareOptions(rawValue: 536870912)
	public static let ordinal = System_Globalization_CompareOptions(rawValue: 1073741824)
}

extension System_Globalization_CompareOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CompareOptions_TypeOf())
		
	}}
	
	
	
}

public enum System_Globalization_DigitShapes: Int32 {
	init(cValue: System_Globalization_DigitShapes_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Globalization_DigitShapes_t { get {
		System_Globalization_DigitShapes_t(rawValue: rawValue)!
	}}

	case context = 0
	case none = 1
	case nativeNational = 2
}

extension System_Globalization_DigitShapes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_DigitShapes_TypeOf())
		
	}}
	
	
	
}

public enum System_StringComparison: Int32 {
	init(cValue: System_StringComparison_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_StringComparison_t { get {
		System_StringComparison_t(rawValue: rawValue)!
	}}

	case currentCulture = 0
	case currentCultureIgnoreCase = 1
	case invariantCulture = 2
	case invariantCultureIgnoreCase = 3
	case ordinal = 4
	case ordinalIgnoreCase = 5
}

extension System_StringComparison {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_StringComparison_TypeOf())
		
	}}
	
	
	
}

public enum System_Text_NormalizationForm: Int32 {
	init(cValue: System_Text_NormalizationForm_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Text_NormalizationForm_t { get {
		System_Text_NormalizationForm_t(rawValue: rawValue)!
	}}

	case formC = 1
	case formD = 2
	case formKC = 5
	case formKD = 6
}

extension System_Text_NormalizationForm {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_NormalizationForm_TypeOf())
		
	}}
	
	
	
}

public struct System_StringSplitOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_StringSplitOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_StringSplitOptions_t { get {
		System_StringSplitOptions_t(rawValue: rawValue)
	}}

	public static let none = System_StringSplitOptions([])
	public static let removeEmptyEntries = System_StringSplitOptions(rawValue: 1)
	public static let trimEntries = System_StringSplitOptions(rawValue: 2)
}

extension System_StringSplitOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_StringSplitOptions_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_GenericParameterAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_GenericParameterAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_GenericParameterAttributes_t { get {
		System_Reflection_GenericParameterAttributes_t(rawValue: rawValue)
	}}

	public static let none = System_Reflection_GenericParameterAttributes([])
	public static let covariant = System_Reflection_GenericParameterAttributes(rawValue: 1)
	public static let contravariant = System_Reflection_GenericParameterAttributes(rawValue: 2)
	public static let varianceMask = System_Reflection_GenericParameterAttributes(rawValue: 3)
	public static let referenceTypeConstraint = System_Reflection_GenericParameterAttributes(rawValue: 4)
	public static let notNullableValueTypeConstraint = System_Reflection_GenericParameterAttributes(rawValue: 8)
	public static let defaultConstructorConstraint = System_Reflection_GenericParameterAttributes(rawValue: 16)
	public static let specialConstraintMask = System_Reflection_GenericParameterAttributes(rawValue: 28)
}

extension System_Reflection_GenericParameterAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_GenericParameterAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_Reflection_TypeAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Reflection_TypeAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Reflection_TypeAttributes_t { get {
		System_Reflection_TypeAttributes_t(rawValue: rawValue)
	}}

	public static let notPublic = System_Reflection_TypeAttributes([])
	public static let autoLayout = System_Reflection_TypeAttributes([])
	public static let ansiClass = System_Reflection_TypeAttributes([])
	public static let `class` = System_Reflection_TypeAttributes([])
	public static let `public` = System_Reflection_TypeAttributes(rawValue: 1)
	public static let nestedPublic = System_Reflection_TypeAttributes(rawValue: 2)
	public static let nestedPrivate = System_Reflection_TypeAttributes(rawValue: 3)
	public static let nestedFamily = System_Reflection_TypeAttributes(rawValue: 4)
	public static let nestedAssembly = System_Reflection_TypeAttributes(rawValue: 5)
	public static let nestedFamANDAssem = System_Reflection_TypeAttributes(rawValue: 6)
	public static let visibilityMask = System_Reflection_TypeAttributes(rawValue: 7)
	public static let nestedFamORAssem = System_Reflection_TypeAttributes(rawValue: 7)
	public static let sequentialLayout = System_Reflection_TypeAttributes(rawValue: 8)
	public static let explicitLayout = System_Reflection_TypeAttributes(rawValue: 16)
	public static let layoutMask = System_Reflection_TypeAttributes(rawValue: 24)
	public static let interface = System_Reflection_TypeAttributes(rawValue: 32)
	public static let classSemanticsMask = System_Reflection_TypeAttributes(rawValue: 32)
	public static let abstract = System_Reflection_TypeAttributes(rawValue: 128)
	public static let sealed = System_Reflection_TypeAttributes(rawValue: 256)
	public static let specialName = System_Reflection_TypeAttributes(rawValue: 1024)
	public static let rTSpecialName = System_Reflection_TypeAttributes(rawValue: 2048)
	public static let `import` = System_Reflection_TypeAttributes(rawValue: 4096)
	public static let serializable = System_Reflection_TypeAttributes(rawValue: 8192)
	public static let windowsRuntime = System_Reflection_TypeAttributes(rawValue: 16384)
	public static let unicodeClass = System_Reflection_TypeAttributes(rawValue: 65536)
	public static let autoClass = System_Reflection_TypeAttributes(rawValue: 131072)
	public static let stringFormatMask = System_Reflection_TypeAttributes(rawValue: 196608)
	public static let customFormatClass = System_Reflection_TypeAttributes(rawValue: 196608)
	public static let hasSecurity = System_Reflection_TypeAttributes(rawValue: 262144)
	public static let reservedMask = System_Reflection_TypeAttributes(rawValue: 264192)
	public static let beforeFieldInit = System_Reflection_TypeAttributes(rawValue: 1048576)
	public static let customFormatMask = System_Reflection_TypeAttributes(rawValue: 12582912)
}

extension System_Reflection_TypeAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_TypeAttributes_TypeOf())
		
	}}
	
	
	
}

public enum System_Runtime_InteropServices_LayoutKind: Int32 {
	init(cValue: System_Runtime_InteropServices_LayoutKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_LayoutKind_t { get {
		System_Runtime_InteropServices_LayoutKind_t(rawValue: rawValue)!
	}}

	case sequential = 0
	case explicit = 2
	case auto = 3
}

extension System_Runtime_InteropServices_LayoutKind {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_LayoutKind_TypeOf())
		
	}}
	
	
	
}

public enum System_Runtime_InteropServices_CharSet: Int32 {
	init(cValue: System_Runtime_InteropServices_CharSet_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_CharSet_t { get {
		System_Runtime_InteropServices_CharSet_t(rawValue: rawValue)!
	}}

	case none = 1
	case ansi = 2
	case unicode = 3
	case auto = 4
}

extension System_Runtime_InteropServices_CharSet {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_CharSet_TypeOf())
		
	}}
	
	
	
}

public enum System_Runtime_InteropServices_CustomQueryInterfaceMode: Int32 {
	init(cValue: System_Runtime_InteropServices_CustomQueryInterfaceMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Runtime_InteropServices_CustomQueryInterfaceMode_t { get {
		System_Runtime_InteropServices_CustomQueryInterfaceMode_t(rawValue: rawValue)!
	}}

	case ignore = 0
	case allow = 1
}

extension System_Runtime_InteropServices_CustomQueryInterfaceMode {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_CustomQueryInterfaceMode_TypeOf())
		
	}}
	
	
	
}

public enum System_GCKind: Int32 {
	init(cValue: System_GCKind_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCKind_t { get {
		System_GCKind_t(rawValue: rawValue)!
	}}

	case any = 0
	case ephemeral = 1
	case fullBlocking = 2
	case background = 3
}

extension System_GCKind {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_GCKind_TypeOf())
		
	}}
	
	
	
}

public enum System_GCCollectionMode: Int32 {
	init(cValue: System_GCCollectionMode_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCCollectionMode_t { get {
		System_GCCollectionMode_t(rawValue: rawValue)!
	}}

	case `default` = 0
	case forced = 1
	case optimized = 2
	case aggressive = 3
}

extension System_GCCollectionMode {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_GCCollectionMode_TypeOf())
		
	}}
	
	
	
}

public enum System_GCNotificationStatus: Int32 {
	init(cValue: System_GCNotificationStatus_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_GCNotificationStatus_t { get {
		System_GCNotificationStatus_t(rawValue: rawValue)!
	}}

	case succeeded = 0
	case failed = 1
	case canceled = 2
	case timeout = 3
	case notApplicable = 4
}

extension System_GCNotificationStatus {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_GCNotificationStatus_TypeOf())
		
	}}
	
	
	
}

public struct System_Base64FormattingOptions: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Base64FormattingOptions_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Base64FormattingOptions_t { get {
		System_Base64FormattingOptions_t(rawValue: rawValue)
	}}

	public static let none = System_Base64FormattingOptions([])
	public static let insertLineBreaks = System_Base64FormattingOptions(rawValue: 1)
}

extension System_Base64FormattingOptions {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Base64FormattingOptions_TypeOf())
		
	}}
	
	
	
}

public enum System_Threading_ThreadPriority: Int32 {
	init(cValue: System_Threading_ThreadPriority_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_ThreadPriority_t { get {
		System_Threading_ThreadPriority_t(rawValue: rawValue)!
	}}

	case lowest = 0
	case belowNormal = 1
	case normal = 2
	case aboveNormal = 3
	case highest = 4
}

extension System_Threading_ThreadPriority {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ThreadPriority_TypeOf())
		
	}}
	
	
	
}

public struct System_Threading_ThreadState: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_Threading_ThreadState_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_Threading_ThreadState_t { get {
		System_Threading_ThreadState_t(rawValue: rawValue)
	}}

	public static let running = System_Threading_ThreadState([])
	public static let stopRequested = System_Threading_ThreadState(rawValue: 1)
	public static let suspendRequested = System_Threading_ThreadState(rawValue: 2)
	public static let background = System_Threading_ThreadState(rawValue: 4)
	public static let unstarted = System_Threading_ThreadState(rawValue: 8)
	public static let stopped = System_Threading_ThreadState(rawValue: 16)
	public static let waitSleepJoin = System_Threading_ThreadState(rawValue: 32)
	public static let suspended = System_Threading_ThreadState(rawValue: 64)
	public static let abortRequested = System_Threading_ThreadState(rawValue: 128)
	public static let aborted = System_Threading_ThreadState(rawValue: 256)
}

extension System_Threading_ThreadState {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ThreadState_TypeOf())
		
	}}
	
	
	
}

public enum System_Threading_ApartmentState: Int32 {
	init(cValue: System_Threading_ApartmentState_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Threading_ApartmentState_t { get {
		System_Threading_ApartmentState_t(rawValue: rawValue)!
	}}

	case sTA = 0
	case mTA = 1
	case unknown = 2
}

extension System_Threading_ApartmentState {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ApartmentState_TypeOf())
		
	}}
	
	
	
}

public enum System_Security_Permissions_PermissionState: Int32 {
	init(cValue: System_Security_Permissions_PermissionState_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_Permissions_PermissionState_t { get {
		System_Security_Permissions_PermissionState_t(rawValue: rawValue)!
	}}

	case none = 0
	case unrestricted = 1
}

extension System_Security_Permissions_PermissionState {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_Permissions_PermissionState_TypeOf())
		
	}}
	
	
	
}

public enum System_Security_Principal_PrincipalPolicy: Int32 {
	init(cValue: System_Security_Principal_PrincipalPolicy_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_Security_Principal_PrincipalPolicy_t { get {
		System_Security_Principal_PrincipalPolicy_t(rawValue: rawValue)!
	}}

	case unauthenticatedPrincipal = 0
	case noPrincipal = 1
	case windowsPrincipal = 2
}

extension System_Security_Principal_PrincipalPolicy {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_Principal_PrincipalPolicy_TypeOf())
		
	}}
	
	
	
}

public struct System_IO_FileAttributes: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_FileAttributes_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_FileAttributes_t { get {
		System_IO_FileAttributes_t(rawValue: rawValue)
	}}

	public static let readOnly = System_IO_FileAttributes(rawValue: 1)
	public static let hidden = System_IO_FileAttributes(rawValue: 2)
	public static let system = System_IO_FileAttributes(rawValue: 4)
	public static let directory = System_IO_FileAttributes(rawValue: 16)
	public static let archive = System_IO_FileAttributes(rawValue: 32)
	public static let device = System_IO_FileAttributes(rawValue: 64)
	public static let normal = System_IO_FileAttributes(rawValue: 128)
	public static let temporary = System_IO_FileAttributes(rawValue: 256)
	public static let sparseFile = System_IO_FileAttributes(rawValue: 512)
	public static let reparsePoint = System_IO_FileAttributes(rawValue: 1024)
	public static let compressed = System_IO_FileAttributes(rawValue: 2048)
	public static let offline = System_IO_FileAttributes(rawValue: 4096)
	public static let notContentIndexed = System_IO_FileAttributes(rawValue: 8192)
	public static let encrypted = System_IO_FileAttributes(rawValue: 16384)
	public static let integrityStream = System_IO_FileAttributes(rawValue: 32768)
	public static let noScrubData = System_IO_FileAttributes(rawValue: 131072)
}

extension System_IO_FileAttributes {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileAttributes_TypeOf())
		
	}}
	
	
	
}

public struct System_IO_UnixFileMode: OptionSet {
	public typealias RawValue = Int32
	public let rawValue: RawValue

	public init(rawValue: RawValue) {
		self.rawValue = rawValue
	}

	init(cValue: System_IO_UnixFileMode_t) {
		self.init(rawValue: cValue.rawValue)
	}

	var cValue: System_IO_UnixFileMode_t { get {
		System_IO_UnixFileMode_t(rawValue: rawValue)
	}}

	public static let none = System_IO_UnixFileMode([])
	public static let otherExecute = System_IO_UnixFileMode(rawValue: 1)
	public static let otherWrite = System_IO_UnixFileMode(rawValue: 2)
	public static let otherRead = System_IO_UnixFileMode(rawValue: 4)
	public static let groupExecute = System_IO_UnixFileMode(rawValue: 8)
	public static let groupWrite = System_IO_UnixFileMode(rawValue: 16)
	public static let groupRead = System_IO_UnixFileMode(rawValue: 32)
	public static let userExecute = System_IO_UnixFileMode(rawValue: 64)
	public static let userWrite = System_IO_UnixFileMode(rawValue: 128)
	public static let userRead = System_IO_UnixFileMode(rawValue: 256)
	public static let stickyBit = System_IO_UnixFileMode(rawValue: 512)
	public static let setGroup = System_IO_UnixFileMode(rawValue: 1024)
	public static let setUser = System_IO_UnixFileMode(rawValue: 2048)
}

extension System_IO_UnixFileMode {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_UnixFileMode_TypeOf())
		
	}}
	
	
	
}

public enum System_IO_SearchOption: Int32 {
	init(cValue: System_IO_SearchOption_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_SearchOption_t { get {
		System_IO_SearchOption_t(rawValue: rawValue)!
	}}

	case topDirectoryOnly = 0
	case allDirectories = 1
}

extension System_IO_SearchOption {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_SearchOption_TypeOf())
		
	}}
	
	
	
}

public enum System_IO_MatchType: Int32 {
	init(cValue: System_IO_MatchType_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_MatchType_t { get {
		System_IO_MatchType_t(rawValue: rawValue)!
	}}

	case simple = 0
	case win32 = 1
}

extension System_IO_MatchType {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_MatchType_TypeOf())
		
	}}
	
	
	
}

public enum System_IO_MatchCasing: Int32 {
	init(cValue: System_IO_MatchCasing_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: System_IO_MatchCasing_t { get {
		System_IO_MatchCasing_t(rawValue: rawValue)!
	}}

	case platformDefault = 0
	case caseSensitive = 1
	case caseInsensitive = 2
}

extension System_IO_MatchCasing {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_MatchCasing_TypeOf())
		
	}}
	
	
	
}

public enum NativeAOT_CodeGeneratorInputSample_NiceLevels: UInt32 {
	init(cValue: NativeAOT_CodeGeneratorInputSample_NiceLevels_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: NativeAOT_CodeGeneratorInputSample_NiceLevels_t { get {
		NativeAOT_CodeGeneratorInputSample_NiceLevels_t(rawValue: rawValue)!
	}}

	case notNice = 0
	case littleBitNice = 1
	case nice = 2
	case veryNice = 3
}

extension NativeAOT_CodeGeneratorInputSample_NiceLevels {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_NiceLevels_TypeOf())
		
	}}
	
	
	
}

public enum NativeAOT_CodeGeneratorInputSample_TestEnum: Int32 {
	init(cValue: NativeAOT_CodeGeneratorInputSample_TestEnum_t) {
		self.init(rawValue: cValue.rawValue)!
	}

	var cValue: NativeAOT_CodeGeneratorInputSample_TestEnum_t { get {
		NativeAOT_CodeGeneratorInputSample_TestEnum_t(rawValue: rawValue)!
	}}

	case firstCase = 0
	case secondCase = 1
}

extension NativeAOT_CodeGeneratorInputSample_TestEnum {
	public static var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_TestEnum_TypeOf())
		
	}}
	
	
	
}

public class System_Object /* System.Object */: DNObject {
	public override class var typeName: String { get {
		"Object"
	}}

	public override class var fullTypeName: String { get {
		"System.Object"
	}}

	public func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_GetType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ objA: System_Object? /* System.Object */, _ objB: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objAC = objA?.__handle
		let objBC = objB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Equals_1(objAC, objBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func referenceEquals(_ objA: System_Object? /* System.Object */, _ objB: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objAC = objA?.__handle
		let objBC = objB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_ReferenceEquals(objAC, objBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Object_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Object_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Object_Destroy(self.__handle)
		
	}
	
	
}


public class System_Type /* System.Type */: System_Reflection_MemberInfo {
	public override class var typeName: String { get {
		"Type"
	}}

	public override class var fullTypeName: String { get {
		"System.Type"
	}}

	public class func getType(_ typeName: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType(typeNameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getType(_ typeName: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_1(typeNameC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getType(_ typeName: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_2(typeNameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromHandle(_ handle: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Type? /* System.Type */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetType_3(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getElementType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetElementType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getArrayRank() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetArrayRank(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getGenericTypeDefinition() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericTypeDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGenericParameterConstraints() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetGenericParameterConstraints(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isAssignableTo(_ targetType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let targetTypeC = targetType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAssignableTo(self.__handle, targetTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getConstructor(_ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor(self.__handle, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstructor(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_1(self.__handle, bindingAttrC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstructor(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_2(self.__handle, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstructor(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructor_3(self.__handle, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstructors() throws -> System_Reflection_ConstructorInfo_Array? /* System.Reflection.ConstructorInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructors(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstructors(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_ConstructorInfo_Array? /* System.Reflection.ConstructorInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetConstructors_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEvent(_ name: System_String? /* System.String */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvent(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEvent(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvent_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEvents() throws -> System_Reflection_EventInfo_Array? /* System.Reflection.EventInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvents(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEvents(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_EventInfo_Array? /* System.Reflection.EventInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEvents_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getField(_ name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getField(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetField_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFields() throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFields(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFields(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFields_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFunctionPointerCallingConventions() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerCallingConventions(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFunctionPointerReturnType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerReturnType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFunctionPointerParameterTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetFunctionPointerParameterTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMember(_ name: System_String? /* System.String */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMember(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMember(_ name: System_String? /* System.String */, _ type: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let typeC = type.cValue
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMember_2(self.__handle, nameC, typeC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMembers() throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMembers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMemberWithSameMetadataDefinitionAs(_ member: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		let memberC = member?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMemberWithSameMetadataDefinitionAs(self.__handle, memberC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMembers(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMembers_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_2(self.__handle, nameC, bindingAttrC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_3(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_4(self.__handle, nameC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_5(self.__handle, nameC, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_6(self.__handle, nameC, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ genericParameterCount: Int32 /* System.Int32 */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_7(self.__handle, nameC, genericParameterCount, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ genericParameterCount: Int32 /* System.Int32 */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_8(self.__handle, nameC, genericParameterCount, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ genericParameterCount: Int32 /* System.Int32 */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_9(self.__handle, nameC, genericParameterCount, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ genericParameterCount: Int32 /* System.Int32 */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethod_10(self.__handle, nameC, genericParameterCount, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethods(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetMethods_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getNestedType(_ name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedType(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getNestedType(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedType_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getNestedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getNestedTypes(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Type_Array? /* System.Type[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetNestedTypes_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ returnType: System_Type? /* System.Type */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_2(self.__handle, nameC, returnTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_3(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ returnType: System_Type? /* System.Type */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_4(self.__handle, nameC, returnTypeC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ returnType: System_Type? /* System.Type */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_5(self.__handle, nameC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ returnType: System_Type? /* System.Type */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperty_6(self.__handle, nameC, bindingAttrC, binderC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperties() throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperties(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperties(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetProperties_1(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDefaultMembers() throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetDefaultMembers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeHandle(_ o: System_Object? /* System.Object */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeHandle(oC, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeArray(_ args: System_Object_Array? /* System.Object[] */) throws -> System_Type_Array? /* System.Type[] */ {
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeArray(argsC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeCode(_ type: System_Type? /* System.Type */) throws -> System_TypeCode /* System.TypeCode */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeCode(typeC, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromCLSID(_ clsid: System_Guid? /* System.Guid */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID(clsidC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromCLSID(_ clsid: System_Guid? /* System.Guid */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_1(clsidC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromCLSID(_ clsid: System_Guid? /* System.Guid */, _ server: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_2(clsidC, serverC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromCLSID(_ clsid: System_Guid? /* System.Guid */, _ server: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromCLSID_3(clsidC, serverC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromProgID(_ progID: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID(progIDC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromProgID(_ progID: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_1(progIDC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromProgID(_ progID: System_String? /* System.String */, _ server: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_2(progIDC, serverC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromProgID(_ progID: System_String? /* System.String */, _ server: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let progIDC = progID?.__handle
		let serverC = server?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetTypeFromProgID_3(progIDC, serverC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invokeMember(_ name: System_String? /* System.String */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ target: System_Object? /* System.Object */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invokeMember(_ name: System_String? /* System.String */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ target: System_Object? /* System.Object */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember_1(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invokeMember(_ name: System_String? /* System.String */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ target: System_Object? /* System.Object */, _ args: System_Object_Array? /* System.Object[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ namedParameters: System_String_Array? /* System.String[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namedParametersC = namedParameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_InvokeMember_2(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, modifiersC, cultureC, namedParametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getInterface(_ name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterface(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getInterface(_ name: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterface_1(self.__handle, nameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getInterfaces() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterfaces(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getInterfaceMap(_ interfaceType: System_Type? /* System.Type */) throws -> System_Reflection_InterfaceMapping? /* System.Reflection.InterfaceMapping */ {
		let interfaceTypeC = interfaceType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetInterfaceMap(self.__handle, interfaceTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_InterfaceMapping(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isInstanceOfType(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsInstanceOfType(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isEquivalentTo(_ other: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEquivalentTo(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getEnumUnderlyingType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumUnderlyingType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumValues() throws -> System_Array? /* System.Array */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumValues(self.__handle, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumValuesAsUnderlyingType() throws -> System_Array? /* System.Array */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumValuesAsUnderlyingType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makeArrayType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeArrayType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makeArrayType(_ rank: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeArrayType_1(self.__handle, rank, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makeByRefType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeByRefType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makeGenericType(_ typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericType(self.__handle, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makePointerType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakePointerType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func makeGenericSignatureType(_ genericTypeDefinition: System_Type? /* System.Type */, _ typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let genericTypeDefinitionC = genericTypeDefinition?.__handle
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericSignatureType(genericTypeDefinitionC, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func makeGenericMethodParameter(_ position: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MakeGenericMethodParameter(position, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ o: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Equals_1(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func reflectionOnlyGetType(_ typeName: System_String? /* System.String */, _ throwIfNotFound: Bool /* System.Boolean */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ReflectionOnlyGetType(typeNameC, throwIfNotFound, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isEnumDefined(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEnumDefined(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getEnumName(_ value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumName(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GetEnumNames(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func findInterfaces(_ filter: System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */, _ filterCriteria: System_Object? /* System.Object */) throws -> System_Type_Array? /* System.Type[] */ {
		let filterC = filter?.__handle
		let filterCriteriaC = filterCriteria?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_FindInterfaces(self.__handle, filterC, filterCriteriaC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func findMembers(_ memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ filter: System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */, _ filterCriteria: System_Object? /* System.Object */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let memberTypeC = memberType.cValue
		let bindingAttrC = bindingAttr.cValue
		let filterC = filter?.__handle
		let filterCriteriaC = filterCriteria?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_FindMembers(self.__handle, memberTypeC, bindingAttrC, filterC, filterCriteriaC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isSubclassOf(_ c: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSubclassOf(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isAssignableFrom(_ c: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAssignableFrom(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var isInterface: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsInterface_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var namespace: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Namespace_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var assemblyQualifiedName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_AssemblyQualifiedName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var fullName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Assembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override var module: System_Reflection_Module? /* System.Reflection.Module */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Module_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isNested: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var declaringType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DeclaringType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaringMethod: System_Reflection_MethodBase? /* System.Reflection.MethodBase */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DeclaringMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override var reflectedType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ReflectedType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var underlyingSystemType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_UnderlyingSystemType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isTypeDefinition: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsTypeDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isArray: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isByRef: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsByRef_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPointer: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isConstructedGenericType: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsConstructedGenericType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericParameter: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericTypeParameter: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericTypeParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericMethodParameter: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericMethodParameter_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericType: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericTypeDefinition: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsGenericTypeDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSZArray: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSZArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isVariableBoundArray: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsVariableBoundArray_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isByRefLike: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsByRefLike_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFunctionPointer: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsFunctionPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isUnmanagedFunctionPointer: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsUnmanagedFunctionPointer_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var hasElementType: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_HasElementType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var genericTypeArguments: System_Type_Array? /* System.Type[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericTypeArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var genericParameterPosition: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericParameterPosition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var genericParameterAttributes: System_Reflection_GenericParameterAttributes /* System.Reflection.GenericParameterAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GenericParameterAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_GenericParameterAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var attributes: System_Reflection_TypeAttributes /* System.Reflection.TypeAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isAbstract: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAbstract_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isImport: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsImport_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSealed: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSealed_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSpecialName: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isClass: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedFamANDAssem: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamANDAssem_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedFamily: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedFamORAssem: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedFamORAssem_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedPrivate: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNestedPublic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNestedPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNotPublic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsNotPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPublic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAutoLayout: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAutoLayout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isExplicitLayout: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsExplicitLayout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isLayoutSequential: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsLayoutSequential_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAnsiClass: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAnsiClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAutoClass: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsAutoClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isUnicodeClass: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsUnicodeClass_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCOMObject: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsCOMObject_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isContextful: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsContextful_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isEnum: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsEnum_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isMarshalByRef: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsMarshalByRef_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPrimitive: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsPrimitive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isValueType: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsValueType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSignatureType: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSignatureType_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecurityCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecuritySafeCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecurityTransparent: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var structLayoutAttribute: System_Runtime_InteropServices_StructLayoutAttribute? /* System.Runtime.InteropServices.StructLayoutAttribute */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_StructLayoutAttribute_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_StructLayoutAttribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var typeInitializer: System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_TypeInitializer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var typeHandle: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_TypeHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var gUID: System_Guid? /* System.Guid */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_GUID_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var baseType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_BaseType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var defaultBinder: System_Reflection_Binder? /* System.Reflection.Binder */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_DefaultBinder_Get(&__exceptionC)
		
		let __returnValue = System_Reflection_Binder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isSerializable: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsSerializable_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var containsGenericParameters: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_ContainsGenericParameters_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isVisible: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Type_IsVisible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var delimiter: DNChar /* System.Char */ { get {
		
		
		let __returnValueC = System_Type_Delimiter_Get()
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var emptyTypes: System_Type_Array? /* System.Type[] */ { get {
		
		
		let __returnValueC = System_Type_EmptyTypes_Get()
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var missing: System_Object? /* System.Object */ { get {
		
		
		let __returnValueC = System_Type_Missing_Get()
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var filterAttribute: System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ { get {
		
		
		let __returnValueC = System_Type_FilterAttribute_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var filterName: System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ { get {
		
		
		let __returnValueC = System_Type_FilterName_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var filterNameIgnoreCase: System_Reflection_MemberFilter? /* System.Reflection.MemberFilter */ { get {
		
		
		let __returnValueC = System_Type_FilterNameIgnoreCase_Get()
		
		let __returnValue = System_Reflection_MemberFilter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Type_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Type_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_MemberInfo /* System.Reflection.MemberInfo */: System_Object {
	public override class var typeName: String { get {
		"MemberInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MemberInfo"
	}}

	public func hasSameMetadataDefinitionAs(_ other: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_HasSameMetadataDefinitionAs(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isDefined(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCustomAttributes(_ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributes(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributes_1(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaringType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_DeclaringType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var reflectedType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_ReflectedType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var module: System_Reflection_Module? /* System.Reflection.Module */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_Module_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var customAttributes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isCollectible: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_IsCollectible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var metadataToken: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MemberInfo_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MemberInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_MemberInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_ICustomAttributeProvider /* System.Reflection.ICustomAttributeProvider */: DNObject {
	public override class var typeName: String { get {
		"ICustomAttributeProvider"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ICustomAttributeProvider"
	}}

	public func getCustomAttributes(_ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_GetCustomAttributes(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_GetCustomAttributes_1(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isDefined(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ICustomAttributeProvider_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ICustomAttributeProvider_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ICustomAttributeProvider_Destroy(self.__handle)
		
	}
	
	
}


public class System_Object_Array /* System.Object[] */: System_Array {
	public override class var typeName: String { get {
		"Object[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Object[]"
	}}

	
}


public class System_Array /* System.Array */: System_Object {
	public override class var typeName: String { get {
		"Array"
	}}

	public override class var fullTypeName: String { get {
		"System.Array"
	}}

	public class func constrainedCopy(_ sourceArray: System_Array? /* System.Array */, _ sourceIndex: Int32 /* System.Int32 */, _ destinationArray: System_Array? /* System.Array */, _ destinationIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_ConstrainedCopy(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func clear(_ array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Clear(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func clear(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Clear_1(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getLength(_ dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLength(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getUpperBound(_ dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetUpperBound(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getLowerBound(_ dimension: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLowerBound(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func initialize() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Initialize(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ length: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance(elementTypeC, length, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ length1: Int32 /* System.Int32 */, _ length2: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_1(elementTypeC, length1, length2, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ length1: Int32 /* System.Int32 */, _ length2: Int32 /* System.Int32 */, _ length3: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_2(elementTypeC, length1, length2, length3, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ lengths: System_Int32_Array? /* System.Int32[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_3(elementTypeC, lengthsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ lengths: System_Int32_Array? /* System.Int32[] */, _ lowerBounds: System_Int32_Array? /* System.Int32[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		let lowerBoundsC = lowerBounds?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_4(elementTypeC, lengthsC, lowerBoundsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createInstance(_ elementType: System_Type? /* System.Type */, _ lengths: System_Int64_Array? /* System.Int64[] */) throws -> System_Array? /* System.Array */ {
		let elementTypeC = elementType?.__handle
		let lengthsC = lengths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_CreateInstance_5(elementTypeC, lengthsC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func copy(_ sourceArray: System_Array? /* System.Array */, _ destinationArray: System_Array? /* System.Array */, _ length: Int64 /* System.Int64 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy(sourceArrayC, destinationArrayC, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ sourceArray: System_Array? /* System.Array */, _ sourceIndex: Int64 /* System.Int64 */, _ destinationArray: System_Array? /* System.Array */, _ destinationIndex: Int64 /* System.Int64 */, _ length: Int64 /* System.Int64 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_1(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ sourceArray: System_Array? /* System.Array */, _ destinationArray: System_Array? /* System.Array */, _ length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_2(sourceArrayC, destinationArrayC, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ sourceArray: System_Array? /* System.Array */, _ sourceIndex: Int32 /* System.Int32 */, _ destinationArray: System_Array? /* System.Array */, _ destinationIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let sourceArrayC = sourceArray?.__handle
		let destinationArrayC = destinationArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Copy_3(sourceArrayC, sourceIndex, destinationArrayC, destinationIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getValue(_ indices: System_Int32_Array? /* System.Int32[] */) throws -> System_Object? /* System.Object */ {
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue(self.__handle, indicesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_1(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ index1: Int32 /* System.Int32 */, _ index2: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_2(self.__handle, index1, index2, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ index1: Int32 /* System.Int32 */, _ index2: Int32 /* System.Int32 */, _ index3: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_3(self.__handle, index1, index2, index3, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue(self.__handle, valueC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index1: Int32 /* System.Int32 */, _ index2: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_1(self.__handle, valueC, index1, index2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index1: Int32 /* System.Int32 */, _ index2: Int32 /* System.Int32 */, _ index3: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_2(self.__handle, valueC, index1, index2, index3, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ indices: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_3(self.__handle, valueC, indicesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getValue(_ index: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_4(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ index1: Int64 /* System.Int64 */, _ index2: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_5(self.__handle, index1, index2, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ index1: Int64 /* System.Int64 */, _ index2: Int64 /* System.Int64 */, _ index3: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_6(self.__handle, index1, index2, index3, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ indices: System_Int64_Array? /* System.Int64[] */) throws -> System_Object? /* System.Object */ {
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetValue_7(self.__handle, indicesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_4(self.__handle, valueC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index1: Int64 /* System.Int64 */, _ index2: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_5(self.__handle, valueC, index1, index2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ index1: Int64 /* System.Int64 */, _ index2: Int64 /* System.Int64 */, _ index3: Int64 /* System.Int64 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_6(self.__handle, valueC, index1, index2, index3, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ value: System_Object? /* System.Object */, _ indices: System_Int64_Array? /* System.Int64[] */) throws {
		let valueC = value?.__handle
		let indicesC = indices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_SetValue_7(self.__handle, valueC, indicesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getLongLength(_ dimension: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetLongLength(self.__handle, dimension, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func binarySearch(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func binarySearch(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_1(arrayC, index, length, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func binarySearch(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_2(arrayC, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func binarySearch(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_3(arrayC, index, length, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func binarySearch(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func binarySearch(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_BinarySearch_A1_1(TC, arrayC, index, length, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */, _ index: Int64 /* System.Int64 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_CopyTo_1(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func empty(_ T: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Empty_A1(TC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fill(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Fill_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func fill(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Fill_A1_1(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func indexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func indexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_1(arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func indexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_2(arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func indexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func indexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1_1(TC, arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func indexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IndexOf_A1_2(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf(arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_1(arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_2(arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1(TC, arrayC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1_1(TC, arrayC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func lastIndexOf(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let arrayC = array?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LastIndexOf_A1_2(TC, arrayC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func reverse(_ array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reverse(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_1(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reverse(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_A1(TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reverse(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Reverse_A1_1(TC, arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort(arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_1(keysC, itemsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_2(arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_3(keysC, itemsC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ array: System_Array? /* System.Array */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let arrayC = array?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_4(arrayC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_5(keysC, itemsC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let arrayC = array?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_6(arrayC, index, length, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_7(keysC, itemsC, index, length, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A1(TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A2(TKeyC, TValueC, keysC, itemsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A1_1(TC, arrayC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sort(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ keys: System_Array? /* System.Array */, _ items: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keysC = keys?.__handle
		let itemsC = items?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Array_Sort_A2_1(TKeyC, TValueC, keysC, itemsC, index, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var length: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var longLength: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_LongLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var rank: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_Rank_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var syncRoot: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFixedSize: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSynchronized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var maxLength: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Array_MaxLength_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Array_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Array_Destroy(self.__handle)
		
	}
	
	
}


public class System_ICloneable /* System.ICloneable */: DNObject {
	public override class var typeName: String { get {
		"ICloneable"
	}}

	public override class var fullTypeName: String { get {
		"System.ICloneable"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ICloneable_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ICloneable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ICloneable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IList /* System.Collections.IList */: DNObject {
	public override class var typeName: String { get {
		"IList"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IList"
	}}

	public func add(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_Add(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func contains(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_Contains(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func indexOf(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Insert(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func remove(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Remove(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeAt(_ index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func item(_ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_Item_Get(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IList_Item_Set(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFixedSize: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IList_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IList_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IList_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_ICollection /* System.Collections.ICollection */: DNObject {
	public override class var typeName: String { get {
		"ICollection"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.ICollection"
	}}

	public func copyTo(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ICollection_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var count: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var syncRoot: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isSynchronized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ICollection_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_ICollection_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_ICollection_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IEnumerable /* System.Collections.IEnumerable */: DNObject {
	public override class var typeName: String { get {
		"IEnumerable"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IEnumerable"
	}}

	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerable_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IEnumerable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IEnumerable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IEnumerator /* System.Collections.IEnumerator */: DNObject {
	public override class var typeName: String { get {
		"IEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IEnumerator"
	}}

	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var current: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IEnumerator_Destroy(self.__handle)
		
	}
	
	
}



public class System_ValueType /* System.ValueType */: System_Object {
	public override class var typeName: String { get {
		"ValueType"
	}}

	public override class var fullTypeName: String { get {
		"System.ValueType"
	}}

	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ValueType_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ValueType_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ValueType_Destroy(self.__handle)
		
	}
	
	
}



public class System_IComparable /* System.IComparable */: DNObject {
	public override class var typeName: String { get {
		"IComparable"
	}}

	public override class var fullTypeName: String { get {
		"System.IComparable"
	}}

	public func compareTo(_ obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IComparable_CompareTo(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IComparable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IComparable_Destroy(self.__handle)
		
	}
	
	
}


public class System_IConvertible /* System.IConvertible */: DNObject {
	public override class var typeName: String { get {
		"IConvertible"
	}}

	public override class var fullTypeName: String { get {
		"System.IConvertible"
	}}

	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toBoolean(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToBoolean(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toChar(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> DNChar /* System.Char */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToChar(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toSByte(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToSByte(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toByte(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToByte(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt16(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt16(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt16(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt16(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt32(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt32(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt32(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt32(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt64(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToInt64(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt64(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToUInt64(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toSingle(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToSingle(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toDouble(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDouble(self.__handle, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toDecimal(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDecimal(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toDateTime(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToDateTime(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToString(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toType(_ conversionType: System_Type? /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let conversionTypeC = conversionType?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IConvertible_ToType(self.__handle, conversionTypeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IConvertible_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IConvertible_Destroy(self.__handle)
		
	}
	
	
}


public class System_Enum /* System.Enum */: System_ValueType {
	public override class var typeName: String { get {
		"Enum"
	}}

	public override class var fullTypeName: String { get {
		"System.Enum"
	}}

	public class func getName(_ TEnum: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetName_A1(TEnumC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getName(_ enumType: System_Type? /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetName_1(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getNames(_ TEnum: System_Type /* System.Type */) throws -> System_String_Array? /* System.String[] */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetNames_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getNames(_ enumType: System_Type? /* System.Type */) throws -> System_String_Array? /* System.String[] */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetNames_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getUnderlyingType(_ enumType: System_Type? /* System.Type */) throws -> System_Type? /* System.Type */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetUnderlyingType(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getValues(_ TEnum: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValues_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getValues(_ enumType: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValues_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getValuesAsUnderlyingType(_ TEnum: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TEnumC = TEnum.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValuesAsUnderlyingType_A1(TEnumC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getValuesAsUnderlyingType(_ enumType: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetValuesAsUnderlyingType_1(enumTypeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func hasFlag(_ flag: System_Enum? /* System.Enum */) throws -> Bool /* System.Boolean */ {
		let flagC = flag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_HasFlag(self.__handle, flagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ TEnum: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_IsDefined_A1(TEnumC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ enumType: System_Type? /* System.Type */, _ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_IsDefined_1(enumTypeC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func parse(_ enumType: System_Type? /* System.Type */, _ value: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ enumType: System_Type? /* System.Type */, _ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_1(enumTypeC, valueC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ TEnum: System_Type /* System.Type */, _ value: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_A1(TEnumC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ TEnum: System_Type /* System.Type */, _ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Parse_A1_1(TEnumC, valueC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ enumType: System_Type? /* System.Type */, _ value: System_String? /* System.String */, _ result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse(enumTypeC, valueC, &resultC, &__exceptionC)
		
		result = System_Object(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ enumType: System_Type? /* System.Type */, _ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_1(enumTypeC, valueC, ignoreCase, &resultC, &__exceptionC)
		
		result = System_Object(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ TEnum: System_Type /* System.Type */, _ value: System_String? /* System.String */, _ result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_A1(TEnumC, valueC, &resultC, &__exceptionC)
		
		result = System_Object(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ TEnum: System_Type /* System.Type */, _ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ result: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TEnumC = TEnum.__handle
		let valueC = value?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_TryParse_A1_1(TEnumC, valueC, ignoreCase, &resultC, &__exceptionC)
		
		result = System_Object(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ target: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_CompareTo(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ enumType: System_Type? /* System.Type */, _ value: System_Object? /* System.Object */, _ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_Format(enumTypeC, valueC, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject(enumTypeC, valueC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: Int8 /* System.SByte */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_1(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: Int16 /* System.Int16 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_2(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_3(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: UInt8 /* System.Byte */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_4(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: UInt16 /* System.UInt16 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_5(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: UInt32 /* System.UInt32 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_6(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: Int64 /* System.Int64 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_7(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toObject(_ enumType: System_Type? /* System.Type */, _ value: UInt64 /* System.UInt64 */) throws -> System_Object? /* System.Object */ {
		let enumTypeC = enumType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Enum_ToObject_8(enumTypeC, value, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Enum_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Enum_Destroy(self.__handle)
		
	}
	
	
}


public class System_ISpanFormattable /* System.ISpanFormattable */: DNObject {
	public override class var typeName: String { get {
		"ISpanFormattable"
	}}

	public override class var fullTypeName: String { get {
		"System.ISpanFormattable"
	}}

	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ISpanFormattable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ISpanFormattable_Destroy(self.__handle)
		
	}
	
	
}


public class System_IFormattable /* System.IFormattable */: DNObject {
	public override class var typeName: String { get {
		"IFormattable"
	}}

	public override class var fullTypeName: String { get {
		"System.IFormattable"
	}}

	public func toString(_ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IFormattable_ToString(self.__handle, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IFormattable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IFormattable_Destroy(self.__handle)
		
	}
	
	
}


public class System_String /* System.String */: System_Object {
	public override class var typeName: String { get {
		"String"
	}}

	public override class var fullTypeName: String { get {
		"System.String"
	}}

	public class func intern(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Intern(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isInterned(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsInterned(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare(strAC, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_1(strAC, strBC, ignoreCase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_2(strAC, strBC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_3(strAC, strBC, cultureC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_4(strAC, strBC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_5(strAC, indexA, strBC, indexB, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ ignoreCase: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_6(strAC, indexA, strBC, indexB, length, ignoreCase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ ignoreCase: Bool /* System.Boolean */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_7(strAC, indexA, strBC, indexB, length, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let cultureC = culture?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_8(strAC, indexA, strBC, indexB, length, cultureC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compare(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Compare_9(strAC, indexA, strBC, indexB, length, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compareOrdinal(_ strA: System_String? /* System.String */, _ strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareOrdinal(strAC, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func compareOrdinal(_ strA: System_String? /* System.String */, _ indexA: Int32 /* System.Int32 */, _ strB: System_String? /* System.String */, _ indexB: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let strAC = strA?.__handle
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareOrdinal_1(strAC, indexA, strBC, indexB, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ strB: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let strBC = strB?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_CompareTo_1(self.__handle, strBC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func endsWith(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func endsWith(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func endsWith(_ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_2(self.__handle, valueC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func endsWith(_ value: DNChar /* System.Char */) throws -> Bool /* System.Boolean */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EndsWith_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_2(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ a: System_String? /* System.String */, _ b: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let aC = a?.__handle
		let bC = b?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_3(aC, bC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ a: System_String? /* System.String */, _ b: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let aC = a?.__handle
		let bC = b?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Equals_4(aC, bC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetHashCode_1(self.__handle, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func startsWith(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func startsWith(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func startsWith(_ value: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_2(self.__handle, valueC, ignoreCase, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func startsWith(_ value: DNChar /* System.Char */) throws -> Bool /* System.Boolean */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_StartsWith_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func copy(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Copy(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyTo(_ sourceIndex: Int32 /* System.Int32 */, _ destination: System_Char_Array? /* System.Char[] */, _ destinationIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_String_CopyTo(self.__handle, sourceIndex, destinationC, destinationIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func toCharArray() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToCharArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toCharArray(_ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToCharArray_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isNullOrEmpty(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNullOrEmpty(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isNullOrWhiteSpace(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNullOrWhiteSpace(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToString_1(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumerator() throws -> System_CharEnumerator? /* System.CharEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_CharEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateRunes() throws -> System_Text_StringRuneEnumerator? /* System.Text.StringRuneEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_EnumerateRunes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringRuneEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isNormalized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNormalized(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isNormalized(_ normalizationForm: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> Bool /* System.Boolean */ {
		let normalizationFormC = normalizationForm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IsNormalized_1(self.__handle, normalizationFormC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func normalize() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Normalize(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func normalize(_ normalizationForm: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> System_String? /* System.String */ {
		let normalizationFormC = normalizationForm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Normalize_1(self.__handle, normalizationFormC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat(arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_1(arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_2(arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_3(argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ values: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws -> System_String? /* System.String */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_4(valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ str0: System_String? /* System.String */, _ str1: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_5(str0C, str1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ str0: System_String? /* System.String */, _ str1: System_String? /* System.String */, _ str2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		let str2C = str2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_6(str0C, str1C, str2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ str0: System_String? /* System.String */, _ str1: System_String? /* System.String */, _ str2: System_String? /* System.String */, _ str3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let str0C = str0?.__handle
		let str1C = str1?.__handle
		let str2C = str2?.__handle
		let str3C = str3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_7(str0C, str1C, str2C, str3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func concat(_ values: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Concat_8(valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format(formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_1(formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_2(formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ format: System_String? /* System.String */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_3(formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_4(providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_5(providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_6(providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_7(providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ TArg0: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A1(TArg0C, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ TArg0: System_Type /* System.Type */, _ TArg1: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A2(TArg0C, TArg1C, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ TArg0: System_Type /* System.Type */, _ TArg1: System_Type /* System.Type */, _ TArg2: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let TArg2C = TArg2.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_A3(TArg0C, TArg1C, TArg2C, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func format(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Format_8(providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ startIndex: Int32 /* System.Int32 */, _ value: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Insert(self.__handle, startIndex, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: DNChar /* System.Char */, _ value: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator.cValue
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join(separatorC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: System_String? /* System.String */, _ value: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_1(separatorC, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: DNChar /* System.Char */, _ value: System_String_Array? /* System.String[] */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let separatorC = separator.cValue
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_2(separatorC, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: System_String? /* System.String */, _ value: System_String_Array? /* System.String[] */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_3(separatorC, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: System_String? /* System.String */, _ values: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_4(separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: DNChar /* System.Char */, _ values: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator.cValue
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_5(separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ separator: System_String? /* System.String */, _ values: System_Object_Array? /* System.Object[] */) throws -> System_String? /* System.String */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Join_6(separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func padLeft(_ totalWidth: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadLeft(self.__handle, totalWidth, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func padLeft(_ totalWidth: Int32 /* System.Int32 */, _ paddingChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let paddingCharC = paddingChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadLeft_1(self.__handle, totalWidth, paddingCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func padRight(_ totalWidth: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadRight(self.__handle, totalWidth, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func padRight(_ totalWidth: Int32 /* System.Int32 */, _ paddingChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let paddingCharC = paddingChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_PadRight_1(self.__handle, totalWidth, paddingCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Remove(self.__handle, startIndex, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ startIndex: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Remove_1(self.__handle, startIndex, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldValue: System_String? /* System.String */, _ newValue: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace(self.__handle, oldValueC, newValueC, ignoreCase, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldValue: System_String? /* System.String */, _ newValue: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_1(self.__handle, oldValueC, newValueC, comparisonTypeC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldChar: DNChar /* System.Char */, _ newChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let oldCharC = oldChar.cValue
		let newCharC = newChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_2(self.__handle, oldCharC, newCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldValue: System_String? /* System.String */, _ newValue: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Replace_3(self.__handle, oldValueC, newValueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replaceLineEndings() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ReplaceLineEndings(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replaceLineEndings(_ replacementText: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let replacementTextC = replacementText?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ReplaceLineEndings_1(self.__handle, replacementTextC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: DNChar /* System.Char */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: DNChar /* System.Char */, _ count: Int32 /* System.Int32 */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_1(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_Char_Array? /* System.Char[] */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_2(self.__handle, separatorC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_Char_Array? /* System.Char[] */, _ count: Int32 /* System.Int32 */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_3(self.__handle, separatorC, count, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_Char_Array? /* System.Char[] */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_4(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_Char_Array? /* System.Char[] */, _ count: Int32 /* System.Int32 */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_5(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_String? /* System.String */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_6(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_String? /* System.String */, _ count: Int32 /* System.Int32 */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_7(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_String_Array? /* System.String[] */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_8(self.__handle, separatorC, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func split(_ separator: System_String_Array? /* System.String[] */, _ count: Int32 /* System.Int32 */, _ options: System_StringSplitOptions /* System.StringSplitOptions */) throws -> System_String_Array? /* System.String[] */ {
		let separatorC = separator?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Split_9(self.__handle, separatorC, count, optionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func substring(_ startIndex: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Substring(self.__handle, startIndex, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func substring(_ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Substring_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLower() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLower(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLower(_ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLower_1(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLowerInvariant() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToLowerInvariant(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUpper() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpper(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUpper(_ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_String? /* System.String */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpper_1(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUpperInvariant() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_ToUpperInvariant(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trim() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trim(_ trimChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let trimCharC = trimChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim_1(self.__handle, trimCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trim(_ trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Trim_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimStart() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimStart(_ trimChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let trimCharC = trimChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart_1(self.__handle, trimCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimStart(_ trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimStart_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimEnd(_ trimChar: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let trimCharC = trimChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd_1(self.__handle, trimCharC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimEnd(_ trimChars: System_Char_Array? /* System.Char[] */) throws -> System_String? /* System.String */ {
		let trimCharsC = trimChars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_TrimEnd_2(self.__handle, trimCharsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func contains(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func contains(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_1(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func contains(_ value: DNChar /* System.Char */) throws -> Bool /* System.Boolean */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_2(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func contains(_ value: DNChar /* System.Char */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Bool /* System.Boolean */ {
		let valueC = value.cValue
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Contains_3(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: DNChar /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: DNChar /* System.Char */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_2(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_3(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny(self.__handle, anyOfC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny_1(self.__handle, anyOfC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOfAny_2(self.__handle, anyOfC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_4(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_5(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_6(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_7(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_8(self.__handle, valueC, startIndex, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_IndexOf_9(self.__handle, valueC, startIndex, count, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: DNChar /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_2(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny(self.__handle, anyOfC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny_1(self.__handle, anyOfC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOfAny(_ anyOf: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let anyOfC = anyOf?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOfAny_2(self.__handle, anyOfC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_4(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_5(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_6(self.__handle, valueC, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_7(self.__handle, valueC, startIndex, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ comparisonType: System_StringComparison /* System.StringComparison */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparisonTypeC = comparisonType.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_LastIndexOf_8(self.__handle, valueC, startIndex, count, comparisonTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ value: System_Char_Array? /* System.Char[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create_1(valueC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ c: DNChar /* System.Char */, _ count: Int32 /* System.Int32 */) throws {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Create_2(cC, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func chars(_ index: Int32 /* System.Int32 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Chars_Get(self.__handle, index, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public var length: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_String_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var empty: System_String? /* System.String */ { get {
		
		
		let __returnValueC = System_String_Empty_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_String_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_String_Destroy(self.__handle)
		
	}
	
	
}






public class System_IDisposable /* System.IDisposable */: DNObject {
	public override class var typeName: String { get {
		"IDisposable"
	}}

	public override class var fullTypeName: String { get {
		"System.IDisposable"
	}}

	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IDisposable_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IDisposable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IDisposable_Destroy(self.__handle)
		
	}
	
	
}









































public class System_IFormatProvider /* System.IFormatProvider */: DNObject {
	public override class var typeName: String { get {
		"IFormatProvider"
	}}

	public override class var fullTypeName: String { get {
		"System.IFormatProvider"
	}}

	public func getFormat(_ formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IFormatProvider_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IFormatProvider_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IFormatProvider_Destroy(self.__handle)
		
	}
	
	
}








// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


public class System_Byte_Array /* System.Byte[] */: System_Array {
	public override class var typeName: String { get {
		"Byte[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Byte[]"
	}}

	
}


public class System_Collections_IStructuralComparable /* System.Collections.IStructuralComparable */: DNObject {
	public override class var typeName: String { get {
		"IStructuralComparable"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IStructuralComparable"
	}}

	public func compareTo(_ other: System_Object? /* System.Object */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let otherC = other?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralComparable_CompareTo(self.__handle, otherC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IStructuralComparable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IStructuralComparable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IComparer /* System.Collections.IComparer */: DNObject {
	public override class var typeName: String { get {
		"IComparer"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IComparer"
	}}

	public func compare(_ x: System_Object? /* System.Object */, _ y: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IComparer_Compare(self.__handle, xC, yC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IComparer_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IComparer_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IStructuralEquatable /* System.Collections.IStructuralEquatable */: DNObject {
	public override class var typeName: String { get {
		"IStructuralEquatable"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IStructuralEquatable"
	}}

	public func equals(_ other: System_Object? /* System.Object */, _ comparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralEquatable_Equals(self.__handle, otherC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ comparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws -> Int32 /* System.Int32 */ {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IStructuralEquatable_GetHashCode(self.__handle, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IStructuralEquatable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IStructuralEquatable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IEqualityComparer /* System.Collections.IEqualityComparer */: DNObject {
	public override class var typeName: String { get {
		"IEqualityComparer"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IEqualityComparer"
	}}

	public func equals(_ x: System_Object? /* System.Object */, _ y: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEqualityComparer_Equals(self.__handle, xC, yC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IEqualityComparer_GetHashCode(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IEqualityComparer_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IEqualityComparer_Destroy(self.__handle)
		
	}
	
	
}































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.








public class System_Globalization_CultureInfo /* System.Globalization.CultureInfo */: System_Object {
	public override class var typeName: String { get {
		"CultureInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.CultureInfo"
	}}

	public class func createSpecificCulture(_ name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CreateSpecificCulture(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultures(_ types: System_Globalization_CultureTypes /* System.Globalization.CultureTypes */) throws -> System_Globalization_CultureInfo_Array? /* System.Globalization.CultureInfo[] */ {
		let typesC = types.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultures(typesC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFormat(_ formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clearCachedData() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_ClearCachedData(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getConsoleFallbackUICulture() throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetConsoleFallbackUICulture(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ ci: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let ciC = ci?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ReadOnly(ciC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultureInfo(_ culture: Int32 /* System.Int32 */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo(culture, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultureInfo(_ name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_1(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultureInfo(_ name: System_String? /* System.String */, _ altName: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		let altNameC = altName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_2(nameC, altNameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultureInfo(_ name: System_String? /* System.String */, _ predefinedOnly: Bool /* System.Boolean */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfo_3(nameC, predefinedOnly, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCultureInfoByIetfLanguageTag(_ name: System_String? /* System.String */) throws -> System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_1(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ name: System_String? /* System.String */, _ useUserOverride: Bool /* System.Boolean */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_2(nameC, useUserOverride, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ culture: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_3(culture, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ culture: Int32 /* System.Int32 */, _ useUserOverride: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Create_4(culture, useUserOverride, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var currentCulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CurrentCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func currentCulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_CurrentCulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var currentUICulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CurrentUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func currentUICulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_CurrentUICulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var installedUICulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_InstalledUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var defaultThreadCurrentCulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func defaultThreadCurrentCulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var defaultThreadCurrentUICulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func defaultThreadCurrentUICulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var invariantCulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_InvariantCulture_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var parent: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Parent_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var lCID: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var keyboardLayoutId: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_KeyboardLayoutId_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var ietfLanguageTag: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IetfLanguageTag_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var displayName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DisplayName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var nativeName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_NativeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var englishName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_EnglishName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var twoLetterISOLanguageName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var threeLetterISOLanguageName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var threeLetterWindowsLanguageName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var compareInfo: System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CompareInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var textInfo: System_Globalization_TextInfo? /* System.Globalization.TextInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_TextInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_TextInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isNeutralCulture: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IsNeutralCulture_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var cultureTypes: System_Globalization_CultureTypes /* System.Globalization.CultureTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_CultureTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var numberFormat: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_NumberFormat_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func numberFormat_set(_ value: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_NumberFormat_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var dateTimeFormat: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_DateTimeFormat_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func dateTimeFormat_set(_ value: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_CultureInfo_DateTimeFormat_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_Calendar_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var optionalCalendars: System_Globalization_Calendar_Array? /* System.Globalization.Calendar[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_OptionalCalendars_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var useUserOverride: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_UseUserOverride_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CultureInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CultureInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_CultureInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Globalization_CultureInfo_Array /* System.Globalization.CultureInfo[] */: System_Array {
	public override class var typeName: String { get {
		"CultureInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.CultureInfo[]"
	}}

	
}















public class System_Globalization_CompareInfo /* System.Globalization.CompareInfo */: System_Object {
	public override class var typeName: String { get {
		"CompareInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.CompareInfo"
	}}

	public class func getCompareInfo(_ culture: Int32 /* System.Int32 */, _ assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let assemblyC = assembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo(culture, assemblyC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCompareInfo(_ name: System_String? /* System.String */, _ assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let nameC = name?.__handle
		let assemblyC = assembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_1(nameC, assemblyC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCompareInfo(_ culture: Int32 /* System.Int32 */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_2(culture, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCompareInfo(_ name: System_String? /* System.String */) throws -> System_Globalization_CompareInfo? /* System.Globalization.CompareInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetCompareInfo_3(nameC, &__exceptionC)
		
		let __returnValue = System_Globalization_CompareInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isSortable(_ ch: DNChar /* System.Char */) throws -> Bool /* System.Boolean */ {
		let chC = ch.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable(chC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isSortable(_ text: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable_1(textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isSortable(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSortable_2(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ string2: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare(self.__handle, string1C, string2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ string2: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_1(self.__handle, string1C, string2C, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ offset1: Int32 /* System.Int32 */, _ length1: Int32 /* System.Int32 */, _ string2: System_String? /* System.String */, _ offset2: Int32 /* System.Int32 */, _ length2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_2(self.__handle, string1C, offset1, length1, string2C, offset2, length2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ offset1: Int32 /* System.Int32 */, _ string2: System_String? /* System.String */, _ offset2: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_3(self.__handle, string1C, offset1, string2C, offset2, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ offset1: Int32 /* System.Int32 */, _ string2: System_String? /* System.String */, _ offset2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_4(self.__handle, string1C, offset1, string2C, offset2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compare(_ string1: System_String? /* System.String */, _ offset1: Int32 /* System.Int32 */, _ length1: Int32 /* System.Int32 */, _ string2: System_String? /* System.String */, _ offset2: Int32 /* System.Int32 */, _ length2: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let string1C = string1?.__handle
		let string2C = string2?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Compare_5(self.__handle, string1C, offset1, length1, string2C, offset2, length2, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isPrefix(_ source: System_String? /* System.String */, _ prefix: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let prefixC = prefix?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsPrefix(self.__handle, sourceC, prefixC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isPrefix(_ source: System_String? /* System.String */, _ prefix: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let prefixC = prefix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsPrefix_1(self.__handle, sourceC, prefixC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isSuffix(_ source: System_String? /* System.String */, _ suffix: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let suffixC = suffix?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSuffix(self.__handle, sourceC, suffixC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isSuffix(_ source: System_String? /* System.String */, _ suffix: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let sourceC = source?.__handle
		let suffixC = suffix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IsSuffix_1(self.__handle, sourceC, suffixC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_1(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_2(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_3(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_4(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_5(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_6(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_7(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_8(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_9(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_10(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_IndexOf_11(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_1(self.__handle, sourceC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_2(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_3(self.__handle, sourceC, valueC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_4(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_5(self.__handle, sourceC, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_6(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_7(self.__handle, sourceC, valueC, startIndex, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_8(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_9(self.__handle, sourceC, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_10(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ source: System_String? /* System.String */, _ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let valueC = value?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LastIndexOf_11(self.__handle, sourceC, valueC, startIndex, count, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getSortKey(_ source: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> System_Globalization_SortKey? /* System.Globalization.SortKey */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetSortKey(self.__handle, sourceC, optionsC, &__exceptionC)
		
		let __returnValue = System_Globalization_SortKey(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSortKey(_ source: System_String? /* System.String */) throws -> System_Globalization_SortKey? /* System.Globalization.SortKey */ {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetSortKey_1(self.__handle, sourceC, &__exceptionC)
		
		let __returnValue = System_Globalization_SortKey(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ source: System_String? /* System.String */, _ options: System_Globalization_CompareOptions /* System.Globalization.CompareOptions */) throws -> Int32 /* System.Int32 */ {
		let sourceC = source?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_GetHashCode_1(self.__handle, sourceC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var version: System_Globalization_SortVersion? /* System.Globalization.SortVersion */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_Version_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_SortVersion(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var lCID: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_CompareInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_CompareInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_CompareInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_IDeserializationCallback /* System.Runtime.Serialization.IDeserializationCallback */: DNObject {
	public override class var typeName: String { get {
		"IDeserializationCallback"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.IDeserializationCallback"
	}}

	public func onDeserialization(_ sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_IDeserializationCallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_IDeserializationCallback_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_Assembly /* System.Reflection.Assembly */: System_Object {
	public override class var typeName: String { get {
		"Assembly"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.Assembly"
	}}

	public class func load(_ assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load(assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func loadWithPartialName(_ partialName: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let partialNameC = partialName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadWithPartialName(partialNameC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func load(_ assemblyRef: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyRefC = assemblyRef?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_1(assemblyRefC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getExecutingAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetExecutingAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCallingAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCallingAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getExportedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetExportedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getForwardedTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetForwardedTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getManifestResourceInfo(_ resourceName: System_String? /* System.String */) throws -> System_Reflection_ManifestResourceInfo? /* System.Reflection.ManifestResourceInfo */ {
		let resourceNameC = resourceName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceInfo(self.__handle, resourceNameC, &__exceptionC)
		
		let __returnValue = System_Reflection_ManifestResourceInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getManifestResourceNames() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceNames(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getManifestResourceStream(_ name: System_String? /* System.String */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceStream(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getManifestResourceStream(_ type: System_Type? /* System.Type */, _ name: System_String? /* System.String */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let typeC = type?.__handle
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetManifestResourceStream_1(self.__handle, typeC, nameC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getName() throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetName(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getName(_ copiedName: Bool /* System.Boolean */) throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetName_1(self.__handle, copiedName, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ name: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_1(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ name: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_2(self.__handle, nameC, throwOnError, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ name: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetType_3(self.__handle, nameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isDefined(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstance(_ typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance(self.__handle, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstance(_ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance_1(self.__handle, typeNameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstance(_ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateInstance_2(self.__handle, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModule(_ name: System_String? /* System.String */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModule(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModules() throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModules(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModules(_ getResourceModules: Bool /* System.Boolean */) throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetModules_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getLoadedModules() throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetLoadedModules(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getLoadedModules(_ getResourceModules: Bool /* System.Boolean */) throws -> System_Reflection_Module_Array? /* System.Reflection.Module[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetLoadedModules_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_Reflection_Module_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getReferencedAssemblies() throws -> System_Reflection_AssemblyName_Array? /* System.Reflection.AssemblyName[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetReferencedAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSatelliteAssembly(_ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetSatelliteAssembly(self.__handle, cultureC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSatelliteAssembly(_ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ version: System_Version? /* System.Version */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let cultureC = culture?.__handle
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetSatelliteAssembly_1(self.__handle, cultureC, versionC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFile(_ name: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFile(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFiles() throws -> System_IO_FileStream_Array? /* System.IO.FileStream[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFiles(_ getResourceModules: Bool /* System.Boolean */) throws -> System_IO_FileStream_Array? /* System.IO.FileStream[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetFiles_1(self.__handle, getResourceModules, &__exceptionC)
		
		let __returnValue = System_IO_FileStream_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Assembly_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func createQualifiedName(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CreateQualifiedName(assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getAssembly(_ type: System_Type? /* System.Type */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetAssembly(typeC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getEntryAssembly() throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GetEntryAssembly(&__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func load(_ rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_2(rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func load(_ rawAssembly: System_Byte_Array? /* System.Byte[] */, _ rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Load_3(rawAssemblyC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func loadFile(_ path: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFile(pathC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func loadFrom(_ assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func loadFrom(_ assemblyFile: System_String? /* System.String */, _ hashValue: System_Byte_Array? /* System.Byte[] */, _ hashAlgorithm: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		let hashValueC = hashValue?.__handle
		let hashAlgorithmC = hashAlgorithm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadFrom_1(assemblyFileC, hashValueC, hashAlgorithmC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func unsafeLoadFrom(_ assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_UnsafeLoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func loadModule(_ moduleName: System_String? /* System.String */, _ rawModule: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let moduleNameC = moduleName?.__handle
		let rawModuleC = rawModule?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadModule(self.__handle, moduleNameC, rawModuleC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func loadModule(_ moduleName: System_String? /* System.String */, _ rawModule: System_Byte_Array? /* System.Byte[] */, _ rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Module? /* System.Reflection.Module */ {
		let moduleNameC = moduleName?.__handle
		let rawModuleC = rawModule?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_LoadModule_1(self.__handle, moduleNameC, rawModuleC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func reflectionOnlyLoad(_ rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoad(rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func reflectionOnlyLoad(_ assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoad_1(assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func reflectionOnlyLoadFrom(_ assemblyFile: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnlyLoadFrom(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var definedTypes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_DefinedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var exportedTypes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Type> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ExportedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var codeBase: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var entryPoint: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_EntryPoint_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var fullName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var imageRuntimeVersion: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ImageRuntimeVersion_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isDynamic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsDynamic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var location: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Location_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var reflectionOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ReflectionOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCollectible: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsCollectible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFullyTrusted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_IsFullyTrusted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var customAttributes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var escapedCodeBase: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_EscapedCodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var manifestModule: System_Reflection_Module? /* System.Reflection.Module */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_ManifestModule_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var modules: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.Module> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_Modules_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var globalAssemblyCache: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_GlobalAssemblyCache_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var hostContext: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_HostContext_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var securityRuleSet: System_Security_SecurityRuleSet /* System.Security.SecurityRuleSet */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Assembly_SecurityRuleSet_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityRuleSet(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public func moduleResolve_add(_ value: System_Reflection_ModuleResolveEventHandler? /* System.Reflection.ModuleResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_Reflection_Assembly_ModuleResolve_Add(self.__handle, valueC)
		
		
	}
	public func moduleResolve_remove(_ value: System_Reflection_ModuleResolveEventHandler? /* System.Reflection.ModuleResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_Reflection_Assembly_ModuleResolve_Remove(self.__handle, valueC)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_Assembly_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_Assembly_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_ISerializable /* System.Runtime.Serialization.ISerializable */: DNObject {
	public override class var typeName: String { get {
		"ISerializable"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.ISerializable"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_ISerializable_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_ISerializable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_ISerializable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_SerializationInfo /* System.Runtime.Serialization.SerializationInfo */: System_Object {
	public override class var typeName: String { get {
		"SerializationInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.SerializationInfo"
	}}

	public func setType(_ type: System_Type? /* System.Type */) throws {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_SetType(self.__handle, typeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getEnumerator() throws -> System_Runtime_Serialization_SerializationInfoEnumerator? /* System.Runtime.Serialization.SerializationInfoEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_SerializationInfoEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: System_Object? /* System.Object */, _ type: System_Type? /* System.Type */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue(self.__handle, nameC, valueC, typeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: System_Object? /* System.Object */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_1(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Bool /* System.Boolean */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_2(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: DNChar /* System.Char */) throws {
		let nameC = name?.__handle
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_3(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Int8 /* System.SByte */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_4(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: UInt8 /* System.Byte */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_5(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Int16 /* System.Int16 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_6(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: UInt16 /* System.UInt16 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_7(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Int32 /* System.Int32 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_8(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: UInt32 /* System.UInt32 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_9(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Int64 /* System.Int64 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_10(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: UInt64 /* System.UInt64 */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_11(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Float /* System.Single */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_12(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: Double /* System.Double */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_13(self.__handle, nameC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: System_Decimal? /* System.Decimal */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_14(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addValue(_ name: System_String? /* System.String */, _ value: System_DateTime? /* System.DateTime */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AddValue_15(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getValue(_ name: System_String? /* System.String */, _ type: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetValue(self.__handle, nameC, typeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBoolean(_ name: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetBoolean(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getChar(_ name: System_String? /* System.String */) throws -> DNChar /* System.Char */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetChar(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSByte(_ name: System_String? /* System.String */) throws -> Int8 /* System.SByte */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetSByte(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getByte(_ name: System_String? /* System.String */) throws -> UInt8 /* System.Byte */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetByte(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getInt16(_ name: System_String? /* System.String */) throws -> Int16 /* System.Int16 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt16(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getUInt16(_ name: System_String? /* System.String */) throws -> UInt16 /* System.UInt16 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt16(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getInt32(_ name: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt32(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getUInt32(_ name: System_String? /* System.String */) throws -> UInt32 /* System.UInt32 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt32(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getInt64(_ name: System_String? /* System.String */) throws -> Int64 /* System.Int64 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetInt64(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getUInt64(_ name: System_String? /* System.String */) throws -> UInt64 /* System.UInt64 */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetUInt64(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getSingle(_ name: System_String? /* System.String */) throws -> Float /* System.Single */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetSingle(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDouble(_ name: System_String? /* System.String */) throws -> Double /* System.Double */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDouble(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDecimal(_ name: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDecimal(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDateTime(_ name: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetDateTime(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getString(_ name: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_GetString(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ type: System_Type? /* System.Type */, _ converter: System_Runtime_Serialization_IFormatterConverter? /* System.Runtime.Serialization.IFormatterConverter */) throws {
		let typeC = type?.__handle
		let converterC = converter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_Create(typeC, converterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ type: System_Type? /* System.Type */, _ converter: System_Runtime_Serialization_IFormatterConverter? /* System.Runtime.Serialization.IFormatterConverter */, _ requireSameTokenInPartialTrust: Bool /* System.Boolean */) throws {
		let typeC = type?.__handle
		let converterC = converter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_Create_1(typeC, converterC, requireSameTokenInPartialTrust, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var fullTypeName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_FullTypeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func fullTypeName_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_FullTypeName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var assemblyName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_AssemblyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func assemblyName_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfo_AssemblyName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isFullTypeNameSetExplicit: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAssemblyNameSetExplicit: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var memberCount: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_MemberCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var objectType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfo_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_SerializationInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_SerializationInfoEnumerator /* System.Runtime.Serialization.SerializationInfoEnumerator */: System_Object {
	public override class var typeName: String { get {
		"SerializationInfoEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.SerializationInfoEnumerator"
	}}

	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_Serialization_SerializationInfoEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var current: System_Runtime_Serialization_SerializationEntry? /* System.Runtime.Serialization.SerializationEntry */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_SerializationEntry(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var objectType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_SerializationInfoEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationInfoEnumerator_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_SerializationEntry /* System.Runtime.Serialization.SerializationEntry */: System_ValueType {
	public override class var typeName: String { get {
		"SerializationEntry"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.SerializationEntry"
	}}

	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var objectType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_SerializationEntry_ObjectType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_SerializationEntry_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_SerializationEntry_Destroy(self.__handle)
		
	}
	
	
}






















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.




































































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_Decimal /* System.Decimal */: System_ValueType {
	public override class var typeName: String { get {
		"Decimal"
	}}

	public override class var fullTypeName: String { get {
		"System.Decimal"
	}}

	public class func fromOACurrency(_ cy: Int64 /* System.Int64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_FromOACurrency(cy, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toOACurrency(_ value: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToOACurrency(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func add(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Add(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ceiling(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Ceiling(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func compare(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Compare(d1C, d2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func divide(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Divide(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Equals_2(d1C, d2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func floor(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Floor(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse(sC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_1(sC, styleC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let sC = s?.__handle
		let styleC = style.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Parse_3(sC, styleC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse(sC, &resultC, &__exceptionC)
		
		result = System_Decimal(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ style: System_Globalization_NumberStyles /* System.Globalization.NumberStyles */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let styleC = style.cValue
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse_1(sC, styleC, providerC, &resultC, &__exceptionC)
		
		result = System_Decimal(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getBits(_ d: System_Decimal? /* System.Decimal */) throws -> System_Int32_Array? /* System.Int32[] */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetBits(dC, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func remainder(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Remainder(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func multiply(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Multiply(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func negate(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Negate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ decimals: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_1(dC, decimals, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_2(dC, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ decimals: Int32 /* System.Int32 */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Round_3(dC, decimals, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func subtract(_ d1: System_Decimal? /* System.Decimal */, _ d2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let d1C = d1?.__handle
		let d2C = d2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Subtract(d1C, d2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toByte(_ value: System_Decimal? /* System.Decimal */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_Decimal? /* System.Decimal */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToSByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_Decimal? /* System.Decimal */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ d: System_Decimal? /* System.Decimal */) throws -> Double /* System.Double */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToDouble(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ d: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt32(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ d: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToInt64(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_Decimal? /* System.Decimal */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ d: System_Decimal? /* System.Decimal */) throws -> UInt32 /* System.UInt32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt32(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ d: System_Decimal? /* System.Decimal */) throws -> UInt64 /* System.UInt64 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToUInt64(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ d: System_Decimal? /* System.Decimal */) throws -> Float /* System.Single */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_ToSingle(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func truncate(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Truncate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func clamp(_ value: System_Decimal? /* System.Decimal */, _ min: System_Decimal? /* System.Decimal */, _ max: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let minC = min?.__handle
		let maxC = max?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Clamp(valueC, minC, maxC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func copySign(_ value: System_Decimal? /* System.Decimal */, _ sign: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let signC = sign?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CopySign(valueC, signC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func max(_ x: System_Decimal? /* System.Decimal */, _ y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Max(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func min(_ x: System_Decimal? /* System.Decimal */, _ y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Min(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func sign(_ d: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Sign(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Abs(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createChecked(_ TOther: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateChecked_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createSaturating(_ TOther: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateSaturating_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createTruncating(_ TOther: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let TOtherC = TOther.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_CreateTruncating_A1(TOtherC, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isCanonical(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsCanonical(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isEvenInteger(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsEvenInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isInteger(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isNegative(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsNegative(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isOddInteger(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsOddInteger(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isPositive(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_IsPositive(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func maxMagnitude(_ x: System_Decimal? /* System.Decimal */, _ y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_MaxMagnitude(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func minMagnitude(_ x: System_Decimal? /* System.Decimal */, _ y: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let xC = x?.__handle
		let yC = y?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_MinMagnitude(xC, yC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		result = System_Decimal(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ bits: System_Int32_Array? /* System.Int32[] */) throws {
		let bitsC = bits?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_7(bitsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ lo: Int32 /* System.Int32 */, _ mid: Int32 /* System.Int32 */, _ hi: Int32 /* System.Int32 */, _ isNegative: Bool /* System.Boolean */, _ scale: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Create_8(lo, mid, hi, isNegative, scale, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var scale: UInt8 /* System.Byte */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Decimal_Scale_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var zero: System_Decimal? /* System.Decimal */ { get {
		
		
		let __returnValueC = System_Decimal_Zero_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var one: System_Decimal? /* System.Decimal */ { get {
		
		
		let __returnValueC = System_Decimal_One_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var minusOne: System_Decimal? /* System.Decimal */ { get {
		
		
		let __returnValueC = System_Decimal_MinusOne_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var maxValue: System_Decimal? /* System.Decimal */ { get {
		
		
		let __returnValueC = System_Decimal_MaxValue_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var minValue: System_Decimal? /* System.Decimal */ { get {
		
		
		let __returnValueC = System_Decimal_MinValue_Get()
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Decimal_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Decimal_Destroy(self.__handle)
		
	}
	
	
}

















































public class System_Int32_Array /* System.Int32[] */: System_Array {
	public override class var typeName: String { get {
		"Int32[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Int32[]"
	}}

	
}














// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_DateTime /* System.DateTime */: System_ValueType {
	public override class var typeName: String { get {
		"DateTime"
	}}

	public override class var fullTypeName: String { get {
		"System.DateTime"
	}}

	public func add(_ value: System_TimeSpan? /* System.TimeSpan */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Add(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addDays(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddDays(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addHours(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddHours(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMilliseconds(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMilliseconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMicroseconds(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMicroseconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMinutes(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMinutes(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMonths(_ months: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddMonths(self.__handle, months, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addSeconds(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddSeconds(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addTicks(_ value: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddTicks(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addYears(_ value: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_AddYears(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func compare(_ t1: System_DateTime? /* System.DateTime */, _ t2: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Compare(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func daysInMonth(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DaysInMonth(year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ t1: System_DateTime? /* System.DateTime */, _ t2: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Equals_2(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromBinary(_ dateData: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromBinary(dateData, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromFileTime(_ fileTime: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromFileTime(fileTime, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromFileTimeUtc(_ fileTime: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromFileTimeUtc(fileTime, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromOADate(_ d: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_FromOADate(d, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isDaylightSavingTime() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_IsDaylightSavingTime(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func specifyKind(_ value: System_DateTime? /* System.DateTime */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_SpecifyKind(valueC, kindC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toBinary() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToBinary(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isLeapYear(_ year: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_IsLeapYear(year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func parse(_ s: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse(sC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse_1(sC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Parse_2(sC, providerC, stylesC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact(sC, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateTime? /* System.DateTime */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ParseExact_2(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func subtract(_ value: System_DateTime? /* System.DateTime */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Subtract(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func subtract(_ value: System_TimeSpan? /* System.TimeSpan */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Subtract_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toOADate() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToOADate(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toFileTime() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToFileTime(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toFileTimeUtc() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToFileTimeUtc(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toLocalTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLocalTime(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLongDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLongDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLongTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToLongTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toShortDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToShortDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toShortTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToShortTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUniversalTime() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_ToUniversalTime(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse(sC, &resultC, &__exceptionC)
		
		result = System_DateTime(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse_1(sC, providerC, stylesC, &resultC, &__exceptionC)
		
		result = System_DateTime(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParseExact(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_DateTime(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParseExact_1(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_DateTime(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func deconstruct(_ date: inout System_DateOnly? /* System.DateOnly */, _ time: inout System_TimeOnly? /* System.TimeOnly */) throws {
		var dateC = date?.__handle
		var timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateTime_Deconstruct(self.__handle, &dateC, &timeC, &__exceptionC)
		
		date = System_DateOnly(handle: dateC)
		
		time = System_TimeOnly(handle: timeC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deconstruct(_ year: inout Int32 /* System.Int32 */, _ month: inout Int32 /* System.Int32 */, _ day: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateTime_Deconstruct_1(self.__handle, &year, &month, &day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getDateTimeFormats() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDateTimeFormats(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String_Array? /* System.String[] */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_1(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDateTimeFormats(_ format: DNChar /* System.Char */) throws -> System_String_Array? /* System.String[] */ {
		let formatC = format.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_2(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDateTimeFormats(_ format: DNChar /* System.Char */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String_Array? /* System.String[] */ {
		let formatC = format.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetDateTimeFormats_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypeCode() throws -> System_TypeCode /* System.TypeCode */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_GetTypeCode(self.__handle, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		result = System_DateTime(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ ticks: Int64 /* System.Int64 */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_1(ticks, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ date: System_DateOnly? /* System.DateOnly */, _ time: System_TimeOnly? /* System.TimeOnly */) throws {
		let dateC = date?.__handle
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_2(dateC, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ date: System_DateOnly? /* System.DateOnly */, _ time: System_TimeOnly? /* System.TimeOnly */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let dateC = date?.__handle
		let timeC = time?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_3(dateC, timeC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_4(year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_5(year, month, day, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let calendarC = calendar?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_6(year, month, day, hour, minute, second, millisecond, calendarC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_7(year, month, day, hour, minute, second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_8(year, month, day, hour, minute, second, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_9(year, month, day, hour, minute, second, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_10(year, month, day, hour, minute, second, millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_11(year, month, day, hour, minute, second, millisecond, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_12(year, month, day, hour, minute, second, millisecond, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ microsecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_13(year, month, day, hour, minute, second, millisecond, microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ microsecond: Int32 /* System.Int32 */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_14(year, month, day, hour, minute, second, millisecond, microsecond, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ microsecond: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_15(year, month, day, hour, minute, second, millisecond, microsecond, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ microsecond: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws {
		let calendarC = calendar?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Create_16(year, month, day, hour, minute, second, millisecond, microsecond, calendarC, kindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var date: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Date_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var day: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Day_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var dayOfWeek: System_DayOfWeek /* System.DayOfWeek */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var dayOfYear: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_DayOfYear_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var hour: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Hour_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var kind: System_DateTimeKind /* System.DateTimeKind */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Kind_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTimeKind(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var millisecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Millisecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var microsecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Microsecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var nanosecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Nanosecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var minute: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Minute_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var month: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Month_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var now: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Now_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var second: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Second_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var ticks: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var timeOfDay: System_TimeSpan? /* System.TimeSpan */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_TimeOfDay_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var today: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Today_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var year: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_Year_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var utcNow: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateTime_UtcNow_Get(&__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var minValue: System_DateTime? /* System.DateTime */ { get {
		
		
		let __returnValueC = System_DateTime_MinValue_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var maxValue: System_DateTime? /* System.DateTime */ { get {
		
		
		let __returnValueC = System_DateTime_MaxValue_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var unixEpoch: System_DateTime? /* System.DateTime */ { get {
		
		
		let __returnValueC = System_DateTime_UnixEpoch_Get()
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_DateTime_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_DateTime_Destroy(self.__handle)
		
	}
	
	
}











public class System_TimeSpan /* System.TimeSpan */: System_ValueType {
	public override class var typeName: String { get {
		"TimeSpan"
	}}

	public override class var fullTypeName: String { get {
		"System.TimeSpan"
	}}

	public func add(_ ts: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Add(self.__handle, tsC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func compare(_ t1: System_TimeSpan? /* System.TimeSpan */, _ t2: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Compare(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromDays(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromDays(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func duration() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Duration(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ obj: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func equals(_ t1: System_TimeSpan? /* System.TimeSpan */, _ t2: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let t1C = t1?.__handle
		let t2C = t2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Equals_2(t1C, t2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromHours(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromHours(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromMilliseconds(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMilliseconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromMicroseconds(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMicroseconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromMinutes(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromMinutes(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func negate() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Negate(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromSeconds(_ value: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromSeconds(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func subtract(_ ts: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Subtract(self.__handle, tsC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func multiply(_ factor: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Multiply(self.__handle, factor, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func divide(_ divisor: Double /* System.Double */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Divide(self.__handle, divisor, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func divide(_ ts: System_TimeSpan? /* System.TimeSpan */) throws -> Double /* System.Double */ {
		let tsC = ts?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Divide_1(self.__handle, tsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromTicks(_ value: Int64 /* System.Int64 */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_FromTicks(value, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Parse(sC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ input: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Parse_1(inputC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact(inputC, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ input: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_1(inputC, formatsC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_2(inputC, formatC, formatProviderC, stylesC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ input: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */) throws -> System_TimeSpan? /* System.TimeSpan */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ParseExact_3(inputC, formatsC, formatProviderC, stylesC, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParse(sC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ input: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParse_1(inputC, formatProviderC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact(inputC, formatC, formatProviderC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ input: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_1(inputC, formatsC, formatProviderC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_2(inputC, formatC, formatProviderC, stylesC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ input: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */, _ styles: System_Globalization_TimeSpanStyles /* System.Globalization.TimeSpanStyles */, _ result: inout System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatsC = formats?.__handle
		let formatProviderC = formatProvider?.__handle
		let stylesC = styles.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TryParseExact_3(inputC, formatsC, formatProviderC, stylesC, &resultC, &__exceptionC)
		
		result = System_TimeSpan(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_ToString_2(self.__handle, formatC, formatProviderC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ hours: Int32 /* System.Int32 */, _ minutes: Int32 /* System.Int32 */, _ seconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_1(hours, minutes, seconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ days: Int32 /* System.Int32 */, _ hours: Int32 /* System.Int32 */, _ minutes: Int32 /* System.Int32 */, _ seconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_2(days, hours, minutes, seconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ days: Int32 /* System.Int32 */, _ hours: Int32 /* System.Int32 */, _ minutes: Int32 /* System.Int32 */, _ seconds: Int32 /* System.Int32 */, _ milliseconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_3(days, hours, minutes, seconds, milliseconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ days: Int32 /* System.Int32 */, _ hours: Int32 /* System.Int32 */, _ minutes: Int32 /* System.Int32 */, _ seconds: Int32 /* System.Int32 */, _ milliseconds: Int32 /* System.Int32 */, _ microseconds: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Create_4(days, hours, minutes, seconds, milliseconds, microseconds, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var ticks: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var days: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Days_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var hours: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Hours_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var milliseconds: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Milliseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var microseconds: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Microseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var nanoseconds: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Nanoseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var minutes: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Minutes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var seconds: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_Seconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalDays: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalDays_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalHours: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalHours_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalMilliseconds: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMilliseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalMicroseconds: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMicroseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalNanoseconds: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalNanoseconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalMinutes: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalMinutes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalSeconds: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeSpan_TotalSeconds_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var zero: System_TimeSpan? /* System.TimeSpan */ { get {
		
		
		let __returnValueC = System_TimeSpan_Zero_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var maxValue: System_TimeSpan? /* System.TimeSpan */ { get {
		
		
		let __returnValueC = System_TimeSpan_MaxValue_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var minValue: System_TimeSpan? /* System.TimeSpan */ { get {
		
		
		let __returnValueC = System_TimeSpan_MinValue_Get()
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var nanosecondsPerTick: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_NanosecondsPerTick_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerMicrosecond: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMicrosecond_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerMillisecond: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMillisecond_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerSecond: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerSecond_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerMinute: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerMinute_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerHour: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerHour_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var ticksPerDay: Int64 /* System.Int64 */ { get {
		
		
		let __returnValueC = System_TimeSpan_TicksPerDay_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_TimeSpan_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_TimeSpan_Destroy(self.__handle)
		
	}
	
	
}











public class System_String_Array /* System.String[] */: System_Array {
	public override class var typeName: String { get {
		"String[]"
	}}

	public override class var fullTypeName: String { get {
		"System.String[]"
	}}

	
}















public class System_DateOnly /* System.DateOnly */: System_ValueType {
	public override class var typeName: String { get {
		"DateOnly"
	}}

	public override class var fullTypeName: String { get {
		"System.DateOnly"
	}}

	public class func fromDayNumber(_ dayNumber: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_FromDayNumber(dayNumber, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addDays(_ value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddDays(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMonths(_ value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddMonths(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addYears(_ value: Int32 /* System.Int32 */) throws -> System_DateOnly? /* System.DateOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_AddYears(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func deconstruct(_ year: inout Int32 /* System.Int32 */, _ month: inout Int32 /* System.Int32 */, _ day: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_DateOnly_Deconstruct(self.__handle, &year, &month, &day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func toDateTime(_ time: System_TimeOnly? /* System.TimeOnly */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToDateTime(self.__handle, timeC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toDateTime(_ time: System_TimeOnly? /* System.TimeOnly */, _ kind: System_DateTimeKind /* System.DateTimeKind */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToDateTime_1(self.__handle, timeC, kindC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromDateTime(_ dateTime: System_DateTime? /* System.DateTime */) throws -> System_DateOnly? /* System.DateOnly */ {
		let dateTimeC = dateTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_FromDateTime(dateTimeC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func compareTo(_ value: System_DateOnly? /* System.DateOnly */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func parse(_ s: System_String? /* System.String */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse(sC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse_1(sC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact(sC, formatC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_2(sC, formatsC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ParseExact_3(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse(sC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse_1(sC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact(sC, formatC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_1(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_2(sC, formatsC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParseExact_3(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toLongDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToLongDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toShortDateString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToShortDateString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateOnly? /* System.DateOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_DateOnly? /* System.DateOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		result = System_DateOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Create(year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Create_1(year, month, day, calendarC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var minValue: System_DateOnly? /* System.DateOnly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_MinValue_Get(&__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var maxValue: System_DateOnly? /* System.DateOnly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_MaxValue_Get(&__exceptionC)
		
		let __returnValue = System_DateOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var year: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Year_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var month: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Month_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var day: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_Day_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var dayOfWeek: System_DayOfWeek /* System.DayOfWeek */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var dayOfYear: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayOfYear_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var dayNumber: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_DateOnly_DayNumber_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_DateOnly_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_DateOnly_Destroy(self.__handle)
		
	}
	
	
}











public class System_TimeOnly /* System.TimeOnly */: System_ValueType {
	public override class var typeName: String { get {
		"TimeOnly"
	}}

	public override class var fullTypeName: String { get {
		"System.TimeOnly"
	}}

	public func add(_ value: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Add(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func add(_ value: System_TimeSpan? /* System.TimeSpan */, _ wrappedDays: inout Int32 /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Add_1(self.__handle, valueC, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addHours(_ value: Double /* System.Double */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddHours(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addHours(_ value: Double /* System.Double */, _ wrappedDays: inout Int32 /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddHours_1(self.__handle, value, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMinutes(_ value: Double /* System.Double */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddMinutes(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMinutes(_ value: Double /* System.Double */, _ wrappedDays: inout Int32 /* System.Int32 */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_AddMinutes_1(self.__handle, value, &wrappedDays, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isBetween(_ start: System_TimeOnly? /* System.TimeOnly */, _ end: System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let startC = start?.__handle
		let endC = end?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_IsBetween(self.__handle, startC, endC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func deconstruct(_ hour: inout Int32 /* System.Int32 */, _ minute: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct(self.__handle, &hour, &minute, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deconstruct(_ hour: inout Int32 /* System.Int32 */, _ minute: inout Int32 /* System.Int32 */, _ second: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_1(self.__handle, &hour, &minute, &second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deconstruct(_ hour: inout Int32 /* System.Int32 */, _ minute: inout Int32 /* System.Int32 */, _ second: inout Int32 /* System.Int32 */, _ millisecond: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_2(self.__handle, &hour, &minute, &second, &millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deconstruct(_ hour: inout Int32 /* System.Int32 */, _ minute: inout Int32 /* System.Int32 */, _ second: inout Int32 /* System.Int32 */, _ millisecond: inout Int32 /* System.Int32 */, _ microsecond: inout Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_TimeOnly_Deconstruct_3(self.__handle, &hour, &minute, &second, &millisecond, &microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func fromTimeSpan(_ timeSpan: System_TimeSpan? /* System.TimeSpan */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let timeSpanC = timeSpan?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_FromTimeSpan(timeSpanC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromDateTime(_ dateTime: System_DateTime? /* System.DateTime */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let dateTimeC = dateTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_FromDateTime(dateTimeC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toTimeSpan() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToTimeSpan(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func compareTo(_ value: System_TimeOnly? /* System.TimeOnly */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ value: System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Equals_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func parse(_ s: System_String? /* System.String */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse(sC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse_1(sC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact(sC, formatC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_1(sC, formatC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_2(sC, formatsC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ParseExact_3(sC, formatsC, providerC, styleC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse(sC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse_1(sC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact(sC, formatC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatC = format?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_1(sC, formatC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_2(sC, formatsC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryParseExact(_ s: System_String? /* System.String */, _ formats: System_String_Array? /* System.String[] */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ style: System_Globalization_DateTimeStyles /* System.Globalization.DateTimeStyles */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let formatsC = formats?.__handle
		let providerC = provider?.__handle
		let styleC = style.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParseExact_3(sC, formatsC, providerC, styleC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toLongTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToLongTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toShortTimeString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToShortTimeString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_2(self.__handle, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_ToString_3(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_TimeOnly? /* System.TimeOnly */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Parse_2(sC, providerC, &__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_TimeOnly? /* System.TimeOnly */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_TryParse_2(sC, providerC, &resultC, &__exceptionC)
		
		result = System_TimeOnly(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create(hour, minute, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_1(hour, minute, second, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_2(hour, minute, second, millisecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ microsecond: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_3(hour, minute, second, millisecond, microsecond, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ ticks: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Create_4(ticks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var minValue: System_TimeOnly? /* System.TimeOnly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_MinValue_Get(&__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var maxValue: System_TimeOnly? /* System.TimeOnly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_MaxValue_Get(&__exceptionC)
		
		let __returnValue = System_TimeOnly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var hour: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Hour_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var minute: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Minute_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var second: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Second_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var millisecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Millisecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var microsecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Microsecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var nanosecond: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Nanosecond_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var ticks: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_TimeOnly_Ticks_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_TimeOnly_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_TimeOnly_Destroy(self.__handle)
		
	}
	
	
}











public class System_Globalization_Calendar /* System.Globalization.Calendar */: System_Object {
	public override class var typeName: String { get {
		"Calendar"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.Calendar"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws -> System_Globalization_Calendar? /* System.Globalization.Calendar */ {
		let calendarC = calendar?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ReadOnly(calendarC, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMilliseconds(_ time: System_DateTime? /* System.DateTime */, _ milliseconds: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMilliseconds(self.__handle, timeC, milliseconds, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addDays(_ time: System_DateTime? /* System.DateTime */, _ days: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddDays(self.__handle, timeC, days, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addHours(_ time: System_DateTime? /* System.DateTime */, _ hours: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddHours(self.__handle, timeC, hours, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMinutes(_ time: System_DateTime? /* System.DateTime */, _ minutes: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMinutes(self.__handle, timeC, minutes, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addMonths(_ time: System_DateTime? /* System.DateTime */, _ months: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddMonths(self.__handle, timeC, months, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addSeconds(_ time: System_DateTime? /* System.DateTime */, _ seconds: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddSeconds(self.__handle, timeC, seconds, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addWeeks(_ time: System_DateTime? /* System.DateTime */, _ weeks: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddWeeks(self.__handle, timeC, weeks, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addYears(_ time: System_DateTime? /* System.DateTime */, _ years: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AddYears(self.__handle, timeC, years, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDayOfMonth(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfMonth(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDayOfWeek(_ time: System_DateTime? /* System.DateTime */) throws -> System_DayOfWeek /* System.DayOfWeek */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfWeek(self.__handle, timeC, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDayOfYear(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDayOfYear(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDaysInMonth(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInMonth(self.__handle, year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDaysInMonth(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInMonth_1(self.__handle, year, month, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDaysInYear(_ year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDaysInYear(_ year: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetDaysInYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getEra(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetEra(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHour(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetHour(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMilliseconds(_ time: System_DateTime? /* System.DateTime */) throws -> Double /* System.Double */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMilliseconds(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMinute(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMinute(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMonth(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonth(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMonthsInYear(_ year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonthsInYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMonthsInYear(_ year: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetMonthsInYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getSecond(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetSecond(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getWeekOfYear(_ time: System_DateTime? /* System.DateTime */, _ rule: System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */, _ firstDayOfWeek: System_DayOfWeek /* System.DayOfWeek */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		let ruleC = rule.cValue
		let firstDayOfWeekC = firstDayOfWeek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetWeekOfYear(self.__handle, timeC, ruleC, firstDayOfWeekC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getYear(_ time: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let timeC = time?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetYear(self.__handle, timeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapDay(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapDay(self.__handle, year, month, day, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapDay(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapDay_1(self.__handle, year, month, day, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapMonth(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapMonth(self.__handle, year, month, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapMonth(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapMonth_1(self.__handle, year, month, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getLeapMonth(_ year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetLeapMonth(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getLeapMonth(_ year: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_GetLeapMonth_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapYear(_ year: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isLeapYear(_ year: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsLeapYear_1(self.__handle, year, era, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toDateTime(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToDateTime(self.__handle, year, month, day, hour, minute, second, millisecond, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toDateTime(_ year: Int32 /* System.Int32 */, _ month: Int32 /* System.Int32 */, _ day: Int32 /* System.Int32 */, _ hour: Int32 /* System.Int32 */, _ minute: Int32 /* System.Int32 */, _ second: Int32 /* System.Int32 */, _ millisecond: Int32 /* System.Int32 */, _ era: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToDateTime_1(self.__handle, year, month, day, hour, minute, second, millisecond, era, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toFourDigitYear(_ year: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_ToFourDigitYear(self.__handle, year, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var minSupportedDateTime: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_MinSupportedDateTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var maxSupportedDateTime: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_MaxSupportedDateTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var algorithmType: System_Globalization_CalendarAlgorithmType /* System.Globalization.CalendarAlgorithmType */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_AlgorithmType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CalendarAlgorithmType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var eras: System_Int32_Array? /* System.Int32[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_Eras_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var twoDigitYearMax: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_Calendar_TwoDigitYearMax_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func twoDigitYearMax_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_Calendar_TwoDigitYearMax_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var currentEra: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Globalization_Calendar_CurrentEra_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_Calendar_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_Calendar_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_IFormatterConverter /* System.Runtime.Serialization.IFormatterConverter */: DNObject {
	public override class var typeName: String { get {
		"IFormatterConverter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.IFormatterConverter"
	}}

	public func convert(_ value: System_Object? /* System.Object */, _ type: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_Convert(self.__handle, valueC, typeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func convert(_ value: System_Object? /* System.Object */, _ typeCode: System_TypeCode /* System.TypeCode */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_Convert_1(self.__handle, valueC, typeCodeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toBoolean(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToBoolean(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toChar(_ value: System_Object? /* System.Object */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToChar(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toSByte(_ value: System_Object? /* System.Object */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToSByte(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toByte(_ value: System_Object? /* System.Object */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToByte(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt16(_ value: System_Object? /* System.Object */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt16(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt16(_ value: System_Object? /* System.Object */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt16(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt32(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt32(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt32(_ value: System_Object? /* System.Object */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt32(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toInt64(_ value: System_Object? /* System.Object */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToInt64(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toUInt64(_ value: System_Object? /* System.Object */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToUInt64(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toSingle(_ value: System_Object? /* System.Object */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToSingle(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toDouble(_ value: System_Object? /* System.Object */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDouble(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toDecimal(_ value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDecimal(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toDateTime(_ value: System_Object? /* System.Object */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToDateTime(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IFormatterConverter_ToString(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_IFormatterConverter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_IFormatterConverter_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_StreamingContext /* System.Runtime.Serialization.StreamingContext */: System_ValueType {
	public override class var typeName: String { get {
		"StreamingContext"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.StreamingContext"
	}}

	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ state: System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Create(stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ state: System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */, _ additional: System_Object? /* System.Object */) throws {
		let stateC = state.cValue
		let additionalC = additional?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Create_1(stateC, additionalC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var state: System_Runtime_Serialization_StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_State_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_Serialization_StreamingContextStates(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var context: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_StreamingContext_Context_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_StreamingContext_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_StreamingContext_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_AssemblyName /* System.Reflection.AssemblyName */: System_Object {
	public override class var typeName: String { get {
		"AssemblyName"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.AssemblyName"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getAssemblyName(_ assemblyFile: System_String? /* System.String */) throws -> System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetAssemblyName(assemblyFileC, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyName(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getPublicKey() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetPublicKey(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setPublicKey(_ publicKey: System_Byte_Array? /* System.Byte[] */) throws {
		let publicKeyC = publicKey?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_SetPublicKey(self.__handle, publicKeyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getPublicKeyToken() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_GetPublicKeyToken(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setPublicKeyToken(_ publicKeyToken: System_Byte_Array? /* System.Byte[] */) throws {
		let publicKeyTokenC = publicKeyToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_SetPublicKeyToken(self.__handle, publicKeyTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func onDeserialization(_ sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func referenceMatchesDefinition(_ reference: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */, _ definition: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> Bool /* System.Boolean */ {
		let referenceC = reference?.__handle
		let definitionC = definition?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ReferenceMatchesDefinition(referenceC, definitionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ assemblyName: System_String? /* System.String */) throws {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Create(assemblyNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func name_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Name_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var version: System_Version? /* System.Version */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Version_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Version(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func version_set(_ value: System_Version? /* System.Version */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Version_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var cultureInfo: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CultureInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func cultureInfo_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CultureInfo_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var cultureName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CultureName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func cultureName_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CultureName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var codeBase: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_CodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func codeBase_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_CodeBase_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var escapedCodeBase: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_EscapedCodeBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var processorArchitecture: System_Reflection_ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ProcessorArchitecture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ProcessorArchitecture(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func processorArchitecture_set(_ value: System_Reflection_ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_ProcessorArchitecture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var contentType: System_Reflection_AssemblyContentType /* System.Reflection.AssemblyContentType */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_ContentType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyContentType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func contentType_set(_ value: System_Reflection_AssemblyContentType /* System.Reflection.AssemblyContentType */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_ContentType_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var flags: System_Reflection_AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_Flags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_AssemblyNameFlags(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func flags_set(_ value: System_Reflection_AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_Flags_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var hashAlgorithm: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_HashAlgorithm_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Configuration_Assemblies_AssemblyHashAlgorithm(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func hashAlgorithm_set(_ value: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_HashAlgorithm_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var versionCompatibility: System_Configuration_Assemblies_AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_VersionCompatibility_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Configuration_Assemblies_AssemblyVersionCompatibility(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func versionCompatibility_set(_ value: System_Configuration_Assemblies_AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_VersionCompatibility_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var keyPair: System_Reflection_StrongNameKeyPair? /* System.Reflection.StrongNameKeyPair */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_KeyPair_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_StrongNameKeyPair(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func keyPair_set(_ value: System_Reflection_StrongNameKeyPair? /* System.Reflection.StrongNameKeyPair */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_AssemblyName_KeyPair_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var fullName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_AssemblyName_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_AssemblyName_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_AssemblyName_Destroy(self.__handle)
		
	}
	
	
}


public class System_Version /* System.Version */: System_Object {
	public override class var typeName: String { get {
		"Version"
	}}

	public override class var fullTypeName: String { get {
		"System.Version"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func compareTo(_ version: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_CompareTo(self.__handle, versionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Version? /* System.Version */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ obj: System_Version? /* System.Version */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ fieldCount: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_ToString_1(self.__handle, fieldCount, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ input: System_String? /* System.String */) throws -> System_Version? /* System.Version */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Parse(inputC, &__exceptionC)
		
		let __returnValue = System_Version(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ input: System_String? /* System.String */, _ result: inout System_Version? /* System.Version */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_TryParse(inputC, &resultC, &__exceptionC)
		
		result = System_Version(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ major: Int32 /* System.Int32 */, _ minor: Int32 /* System.Int32 */, _ build: Int32 /* System.Int32 */, _ revision: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create(major, minor, build, revision, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ major: Int32 /* System.Int32 */, _ minor: Int32 /* System.Int32 */, _ build: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_1(major, minor, build, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ major: Int32 /* System.Int32 */, _ minor: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_2(major, minor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ version: System_String? /* System.String */) throws {
		let versionC = version?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_3(versionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Create_4(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var major: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Major_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var minor: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Minor_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var build: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Build_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var revision: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_Revision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var majorRevision: Int16 /* System.Int16 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_MajorRevision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var minorRevision: Int16 /* System.Int16 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Version_MinorRevision_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Version_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Version_Destroy(self.__handle)
		
	}
	
	
}







public class System_Reflection_StrongNameKeyPair /* System.Reflection.StrongNameKeyPair */: System_Object {
	public override class var typeName: String { get {
		"StrongNameKeyPair"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.StrongNameKeyPair"
	}}

	public convenience init?(_ keyPairFile: System_IO_FileStream? /* System.IO.FileStream */) throws {
		let keyPairFileC = keyPairFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create(keyPairFileC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ keyPairArray: System_Byte_Array? /* System.Byte[] */) throws {
		let keyPairArrayC = keyPairArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create_1(keyPairArrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ keyPairContainer: System_String? /* System.String */) throws {
		let keyPairContainerC = keyPairContainer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_Create_2(keyPairContainerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var publicKey: System_Byte_Array? /* System.Byte[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_StrongNameKeyPair_PublicKey_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_StrongNameKeyPair_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_StrongNameKeyPair_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_FileStream /* System.IO.FileStream */: System_IO_Stream {
	public override class var typeName: String { get {
		"FileStream"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileStream"
	}}

	public func lock(_ position: Int64 /* System.Int64 */, _ length: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Lock(self.__handle, position, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unlock(_ position: Int64 /* System.Int64 */, _ length: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Unlock(self.__handle, position, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func flushAsync(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_FlushAsync(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func read(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Read(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func readAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_ReadAsync(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func write(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Write(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_WriteAsync(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Flush_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func flush(_ flushToDisk: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Flush_2(self.__handle, flushToDisk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func setLength(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_SetLength(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func readByte() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_ReadByte(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func writeByte(_ value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_WriteByte(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func copyTo(_ destination: System_IO_Stream? /* System.IO.Stream */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_CopyTo(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func copyToAsync(_ destination: System_IO_Stream? /* System.IO.Stream */, _ bufferSize: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CopyToAsync(self.__handle, destinationC, bufferSize, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func beginRead(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ callback: System_AsyncCallback? /* System.AsyncCallback */, _ state: System_Object? /* System.Object */) throws -> System_IAsyncResult? /* System.IAsyncResult */ {
		let bufferC = buffer?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_BeginRead(self.__handle, bufferC, offset, count, callbackC, stateC, &__exceptionC)
		
		let __returnValue = System_IAsyncResult(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func endRead(_ asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws -> Int32 /* System.Int32 */ {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_EndRead(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func beginWrite(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ callback: System_AsyncCallback? /* System.AsyncCallback */, _ state: System_Object? /* System.Object */) throws -> System_IAsyncResult? /* System.IAsyncResult */ {
		let bufferC = buffer?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_BeginWrite(self.__handle, bufferC, offset, count, callbackC, stateC, &__exceptionC)
		
		let __returnValue = System_IAsyncResult(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func endWrite(_ asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_EndWrite(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func seek(_ offset: Int64 /* System.Int64 */, _ origin: System_IO_SeekOrigin /* System.IO.SeekOrigin */) throws -> Int64 /* System.Int64 */ {
		let originC = origin.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Seek(self.__handle, offset, originC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ handle: Int /* System.IntPtr */, _ access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create(handle, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Int /* System.IntPtr */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ ownsHandle: Bool /* System.Boolean */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_1(handle, accessC, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Int /* System.IntPtr */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ ownsHandle: Bool /* System.Boolean */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_2(handle, accessC, ownsHandle, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Int /* System.IntPtr */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ ownsHandle: Bool /* System.Boolean */, _ bufferSize: Int32 /* System.Int32 */, _ isAsync: Bool /* System.Boolean */) throws {
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_3(handle, accessC, ownsHandle, bufferSize, isAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_4(handleC, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_5(handleC, accessC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ handle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ bufferSize: Int32 /* System.Int32 */, _ isAsync: Bool /* System.Boolean */) throws {
		let handleC = handle?.__handle
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_6(handleC, accessC, bufferSize, isAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_7(pathC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_8(pathC, modeC, accessC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_9(pathC, modeC, accessC, shareC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_10(pathC, modeC, accessC, shareC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */, _ bufferSize: Int32 /* System.Int32 */, _ useAsync: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_11(pathC, modeC, accessC, shareC, bufferSize, useAsync, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */, _ bufferSize: Int32 /* System.Int32 */, _ options: System_IO_FileOptions /* System.IO.FileOptions */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_12(pathC, modeC, accessC, shareC, bufferSize, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Create_13(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var handle: Int /* System.IntPtr */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Handle_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var canRead: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var canWrite: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var safeFileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_SafeFileHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeFileHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isAsync: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_IsAsync_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var length: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var position: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public override func position_set(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStream_Position_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override var canSeek: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStream_CanSeek_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileStream_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_FileStream_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_Stream /* System.IO.Stream */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"Stream"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.Stream"
	}}

	public func copyTo(_ destination: System_IO_Stream? /* System.IO.Stream */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_CopyTo(self.__handle, destinationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ destination: System_IO_Stream? /* System.IO.Stream */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_CopyTo_1(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyToAsync(_ destination: System_IO_Stream? /* System.IO.Stream */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync(self.__handle, destinationC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyToAsync(_ destination: System_IO_Stream? /* System.IO.Stream */, _ bufferSize: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_1(self.__handle, destinationC, bufferSize, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyToAsync(_ destination: System_IO_Stream? /* System.IO.Stream */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_2(self.__handle, destinationC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyToAsync(_ destination: System_IO_Stream? /* System.IO.Stream */, _ bufferSize: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let destinationC = destination?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CopyToAsync_3(self.__handle, destinationC, bufferSize, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func flushAsync(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_FlushAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func beginRead(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ callback: System_AsyncCallback? /* System.AsyncCallback */, _ state: System_Object? /* System.Object */) throws -> System_IAsyncResult? /* System.IAsyncResult */ {
		let bufferC = buffer?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_BeginRead(self.__handle, bufferC, offset, count, callbackC, stateC, &__exceptionC)
		
		let __returnValue = System_IAsyncResult(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func endRead(_ asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws -> Int32 /* System.Int32 */ {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_EndRead(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func readAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAsync(self.__handle, bufferC, offset, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadAsync_1(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readExactlyAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadExactlyAsync(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func beginWrite(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ callback: System_AsyncCallback? /* System.AsyncCallback */, _ state: System_Object? /* System.Object */) throws -> System_IAsyncResult? /* System.IAsyncResult */ {
		let bufferC = buffer?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_BeginWrite(self.__handle, bufferC, offset, count, callbackC, stateC, &__exceptionC)
		
		let __returnValue = System_IAsyncResult(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func endWrite(_ asyncResult: System_IAsyncResult? /* System.IAsyncResult */) throws {
		let asyncResultC = asyncResult?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_EndWrite(self.__handle, asyncResultC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteAsync(self.__handle, bufferC, offset, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeAsync(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteAsync_1(self.__handle, bufferC, offset, count, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func seek(_ offset: Int64 /* System.Int64 */, _ origin: System_IO_SeekOrigin /* System.IO.SeekOrigin */) throws -> Int64 /* System.Int64 */ {
		let originC = origin.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Seek(self.__handle, offset, originC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func setLength(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_SetLength(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func read(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Read_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func readByte() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadByte(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func readExactly(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_ReadExactly_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ buffer: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Write_1(self.__handle, bufferC, offset, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeByte(_ value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_WriteByte(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func synchronized(_ stream: System_IO_Stream? /* System.IO.Stream */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Synchronized(streamC, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var canRead: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canWrite: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canSeek: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanSeek_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canTimeout: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_CanTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var length: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var position: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func position_set(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_Position_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var readTimeout: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_ReadTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func readTimeout_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_ReadTimeout_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var writeTimeout: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Stream_WriteTimeout_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func writeTimeout_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Stream_WriteTimeout_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var null: System_IO_Stream? /* System.IO.Stream */ { get {
		
		
		let __returnValueC = System_IO_Stream_Null_Get()
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_Stream_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_Stream_Destroy(self.__handle)
		
	}
	
	
}


public class System_MarshalByRefObject /* System.MarshalByRefObject */: System_Object {
	public override class var typeName: String { get {
		"MarshalByRefObject"
	}}

	public override class var fullTypeName: String { get {
		"System.MarshalByRefObject"
	}}

	public func getLifetimeService() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_MarshalByRefObject_GetLifetimeService(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func initializeLifetimeService() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_MarshalByRefObject_InitializeLifetimeService(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_MarshalByRefObject_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_MarshalByRefObject_Destroy(self.__handle)
		
	}
	
	
}


public class System_IAsyncDisposable /* System.IAsyncDisposable */: DNObject {
	public override class var typeName: String { get {
		"IAsyncDisposable"
	}}

	public override class var fullTypeName: String { get {
		"System.IAsyncDisposable"
	}}

	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncDisposable_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IAsyncDisposable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IAsyncDisposable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Tasks_ValueTask /* System.Threading.Tasks.ValueTask */: System_ValueType {
	public override class var typeName: String { get {
		"ValueTask"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.ValueTask"
	}}

	public class func fromCanceled(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_FromCanceled(cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromException(_ exception: System_Exception? /* System.Exception */) throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_FromException(exceptionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func asTask() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_AsTask(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func preserve() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Preserve(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAwaiter() throws -> System_Runtime_CompilerServices_ValueTaskAwaiter? /* System.Runtime.CompilerServices.ValueTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ValueTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func configureAwait(_ continueOnCapturedContext: Bool /* System.Boolean */) throws -> System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable? /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_ConfigureAwait(self.__handle, continueOnCapturedContext, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ task: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */) throws {
		let taskC = task?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Create(taskC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ source: System_Threading_Tasks_Sources_IValueTaskSource? /* System.Threading.Tasks.Sources.IValueTaskSource */, _ token: Int16 /* System.Int16 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_Create_1(sourceC, token, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var completedTask: System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_CompletedTask_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCompletedSuccessfully: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFaulted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsFaulted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCanceled: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_ValueTask_IsCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_ValueTask_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_ValueTask_Destroy(self.__handle)
		
	}
	
	
}




// Type "TResult" was skipped. Reason: It has no full name.
public class System_Threading_CancellationToken /* System.Threading.CancellationToken */: System_ValueType {
	public override class var typeName: String { get {
		"CancellationToken"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.CancellationToken"
	}}

	public func register(_ callback: System_Action? /* System.Action */) throws -> System_Threading_CancellationTokenRegistration? /* System.Threading.CancellationTokenRegistration */ {
		let callbackC = callback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Register(self.__handle, callbackC, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenRegistration(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func register(_ callback: System_Action? /* System.Action */, _ useSynchronizationContext: Bool /* System.Boolean */) throws -> System_Threading_CancellationTokenRegistration? /* System.Threading.CancellationTokenRegistration */ {
		let callbackC = callback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Register_1(self.__handle, callbackC, useSynchronizationContext, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenRegistration(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func equals(_ other: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Equals(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ other: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func throwIfCancellationRequested() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationToken_ThrowIfCancellationRequested(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ canceled: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_Create(canceled, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var none: System_Threading_CancellationToken? /* System.Threading.CancellationToken */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_None_Get(&__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isCancellationRequested: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_IsCancellationRequested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canBeCanceled: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_CanBeCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var waitHandle: System_Threading_WaitHandle? /* System.Threading.WaitHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationToken_WaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_WaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_CancellationToken_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_CancellationToken_Destroy(self.__handle)
		
	}
	
	
}




public class System_Threading_WaitHandle /* System.Threading.WaitHandle */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"WaitHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.WaitHandle"
	}}

	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func waitOne(_ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func waitOne(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_1(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func waitOne() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_2(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func waitOne(_ millisecondsTimeout: Int32 /* System.Int32 */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_3(self.__handle, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func waitOne(_ timeout: System_TimeSpan? /* System.TimeSpan */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitOne_4(self.__handle, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll(waitHandlesC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_1(waitHandlesC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_2(waitHandlesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ millisecondsTimeout: Int32 /* System.Int32 */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_3(waitHandlesC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAll_4(waitHandlesC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny(waitHandlesC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_1(waitHandlesC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_2(waitHandlesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ millisecondsTimeout: Int32 /* System.Int32 */, _ exitContext: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_3(waitHandlesC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ waitHandles: System_Threading_WaitHandle_Array? /* System.Threading.WaitHandle[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */, _ exitContext: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let waitHandlesC = waitHandles?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_WaitAny_4(waitHandlesC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func signalAndWait(_ toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, _ toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait(toSignalC, toWaitOnC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func signalAndWait(_ toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, _ toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, _ timeout: System_TimeSpan? /* System.TimeSpan */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait_1(toSignalC, toWaitOnC, timeoutC, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func signalAndWait(_ toSignal: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, _ toWaitOn: System_Threading_WaitHandle? /* System.Threading.WaitHandle */, _ millisecondsTimeout: Int32 /* System.Int32 */, _ exitContext: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let toSignalC = toSignal?.__handle
		let toWaitOnC = toWaitOn?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SignalAndWait_2(toSignalC, toWaitOnC, millisecondsTimeout, exitContext, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var handle: Int /* System.IntPtr */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_Handle_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func handle_set(_ value: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_Handle_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var safeWaitHandle: Microsoft_Win32_SafeHandles_SafeWaitHandle? /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_WaitHandle_SafeWaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeWaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func safeWaitHandle_set(_ value: Microsoft_Win32_SafeHandles_SafeWaitHandle? /* Microsoft.Win32.SafeHandles.SafeWaitHandle */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_WaitHandle_SafeWaitHandle_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var waitTimeout: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Threading_WaitHandle_WaitTimeout_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_WaitHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_WaitHandle_Destroy(self.__handle)
		
	}
	
	
}






















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class Microsoft_Win32_SafeHandles_SafeWaitHandle /* Microsoft.Win32.SafeHandles.SafeWaitHandle */: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid {
	public override class var typeName: String { get {
		"SafeWaitHandle"
	}}

	public override class var fullTypeName: String { get {
		"Microsoft.Win32.SafeHandles.SafeWaitHandle"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeWaitHandle_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ existingHandle: Int /* System.IntPtr */, _ ownsHandle: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeWaitHandle_Create_1(existingHandle, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeWaitHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy(self.__handle)
		
	}
	
	
}


public class Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */: System_Runtime_InteropServices_SafeHandle {
	public override class var typeName: String { get {
		"SafeHandleZeroOrMinusOneIsInvalid"
	}}

	public override class var fullTypeName: String { get {
		"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"
	}}

	public override var isInvalid: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_TypeOf())
		
	}}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_InteropServices_SafeHandle /* System.Runtime.InteropServices.SafeHandle */: System_Runtime_ConstrainedExecution_CriticalFinalizerObject {
	public override class var typeName: String { get {
		"SafeHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.InteropServices.SafeHandle"
	}}

	public func dangerousGetHandle() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_DangerousGetHandle(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setHandleAsInvalid() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dangerousAddRef(_ success: inout Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_DangerousAddRef(self.__handle, &success, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dangerousRelease() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_SafeHandle_DangerousRelease(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isClosed: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_IsClosed_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isInvalid: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_SafeHandle_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_SafeHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_InteropServices_SafeHandle_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_ConstrainedExecution_CriticalFinalizerObject /* System.Runtime.ConstrainedExecution.CriticalFinalizerObject */: System_Object {
	public override class var typeName: String { get {
		"CriticalFinalizerObject"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.ConstrainedExecution.CriticalFinalizerObject"
	}}

	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_ConstrainedExecution_CriticalFinalizerObject_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy(self.__handle)
		
	}
	
	
}



public class System_Threading_WaitHandle_Array /* System.Threading.WaitHandle[] */: System_Array {
	public override class var typeName: String { get {
		"WaitHandle[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.WaitHandle[]"
	}}

	
}















public class System_Threading_CancellationTokenRegistration /* System.Threading.CancellationTokenRegistration */: System_ValueType {
	public override class var typeName: String { get {
		"CancellationTokenRegistration"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.CancellationTokenRegistration"
	}}

	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenRegistration_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func unregister() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Unregister(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Threading_CancellationTokenRegistration? /* System.Threading.CancellationTokenRegistration */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var token: System_Threading_CancellationToken? /* System.Threading.CancellationToken */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenRegistration_Token_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_CancellationTokenRegistration_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_CancellationTokenRegistration_Destroy(self.__handle)
		
	}
	
	
}




public class System_Exception /* System.Exception */: System_Object {
	public override class var typeName: String { get {
		"Exception"
	}}

	public override class var fullTypeName: String { get {
		"System.Exception"
	}}

	public func getBaseException() throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_GetBaseException(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_GetType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var targetSite: System_Reflection_MethodBase? /* System.Reflection.MethodBase */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_TargetSite_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var message: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Message_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var data: System_Collections_IDictionary? /* System.Collections.IDictionary */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Data_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionary(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var innerException: System_Exception? /* System.Exception */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_InnerException_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var helpLink: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_HelpLink_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func helpLink_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_HelpLink_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var source: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_Source_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func source_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_Source_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var hResult: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_HResult_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func hResult_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Exception_HResult_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var stackTrace: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Exception_StackTrace_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Exception_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Exception_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_MethodBase /* System.Reflection.MethodBase */: System_Reflection_MemberInfo {
	public override class var typeName: String { get {
		"MethodBase"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MethodBase"
	}}

	public class func getMethodFromHandle(_ handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getMethodFromHandle(_ handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */, _ declaringType: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let handleC = handle?.__handle
		let declaringTypeC = declaringType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodFromHandle_1(handleC, declaringTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCurrentMethod() throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetCurrentMethod(&__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getParameters() throws -> System_Reflection_ParameterInfo_Array? /* System.Reflection.ParameterInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetParameters(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethodImplementationFlags() throws -> System_Reflection_MethodImplAttributes /* System.Reflection.MethodImplAttributes */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodImplementationFlags(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodImplAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethodBody() throws -> System_Reflection_MethodBody? /* System.Reflection.MethodBody */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetMethodBody(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBody(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invoke(_ obj: System_Object? /* System.Object */, _ parameters: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let parametersC = parameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Invoke(self.__handle, objC, parametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invoke(_ obj: System_Object? /* System.Object */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ parameters: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let parametersC = parameters?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Invoke_1(self.__handle, objC, invokeAttrC, binderC, parametersC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var attributes: System_Reflection_MethodAttributes /* System.Reflection.MethodAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var methodImplementationFlags: System_Reflection_MethodImplAttributes /* System.Reflection.MethodImplAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_MethodImplementationFlags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodImplAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var callingConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_CallingConvention_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_CallingConventions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isAbstract: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsAbstract_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isConstructor: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsConstructor_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFinal: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFinal_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isHideBySig: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsHideBySig_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSpecialName: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isStatic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsStatic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isVirtual: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsVirtual_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamily: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamilyAndAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamilyAndAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamilyOrAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsFamilyOrAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPrivate: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPublic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isConstructedGenericMethod: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsConstructedGenericMethod_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericMethod: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsGenericMethod_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isGenericMethodDefinition: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsGenericMethodDefinition_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var containsGenericParameters: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_ContainsGenericParameters_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var methodHandle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_MethodHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isSecurityCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecuritySafeCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecurityTransparent: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBase_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MethodBase_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_MethodBase_Destroy(self.__handle)
		
	}
	
	
}


public class System_RuntimeMethodHandle /* System.RuntimeMethodHandle */: System_ValueType {
	public override class var typeName: String { get {
		"RuntimeMethodHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.RuntimeMethodHandle"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeMethodHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromIntPtr(_ value: Int /* System.IntPtr */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toIntPtr(_ value: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ handle: System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getFunctionPointer() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_GetFunctionPointer(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var value: Int /* System.IntPtr */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeMethodHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_RuntimeMethodHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_RuntimeMethodHandle_Destroy(self.__handle)
		
	}
	
	
}




public class System_RuntimeTypeHandle /* System.RuntimeTypeHandle */: System_ValueType {
	public override class var typeName: String { get {
		"RuntimeTypeHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.RuntimeTypeHandle"
	}}

	public class func fromIntPtr(_ value: Int /* System.IntPtr */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toIntPtr(_ value: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ handle: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getModuleHandle() throws -> System_ModuleHandle? /* System.ModuleHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_GetModuleHandle(self.__handle, &__exceptionC)
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeTypeHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var value: Int /* System.IntPtr */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeTypeHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_RuntimeTypeHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_RuntimeTypeHandle_Destroy(self.__handle)
		
	}
	
	
}




public class System_ModuleHandle /* System.ModuleHandle */: System_ValueType {
	public override class var typeName: String { get {
		"ModuleHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.ModuleHandle"
	}}

	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ handle: System_ModuleHandle? /* System.ModuleHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getRuntimeTypeHandleFromMetadataToken(_ typeToken: Int32 /* System.Int32 */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken(self.__handle, typeToken, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveTypeHandle(_ typeToken: Int32 /* System.Int32 */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveTypeHandle(self.__handle, typeToken, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveTypeHandle(_ typeToken: Int32 /* System.Int32 */, _ typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, _ methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveTypeHandle_1(self.__handle, typeToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeTypeHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRuntimeMethodHandleFromMetadataToken(_ methodToken: Int32 /* System.Int32 */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken(self.__handle, methodToken, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMethodHandle(_ methodToken: Int32 /* System.Int32 */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveMethodHandle(self.__handle, methodToken, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMethodHandle(_ methodToken: Int32 /* System.Int32 */, _ typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, _ methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeMethodHandle? /* System.RuntimeMethodHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveMethodHandle_1(self.__handle, methodToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeMethodHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRuntimeFieldHandleFromMetadataToken(_ fieldToken: Int32 /* System.Int32 */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken(self.__handle, fieldToken, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveFieldHandle(_ fieldToken: Int32 /* System.Int32 */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveFieldHandle(self.__handle, fieldToken, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveFieldHandle(_ fieldToken: Int32 /* System.Int32 */, _ typeInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */, _ methodInstantiationContext: System_RuntimeTypeHandle_Array? /* System.RuntimeTypeHandle[] */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		let typeInstantiationContextC = typeInstantiationContext?.__handle
		let methodInstantiationContextC = methodInstantiationContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_ResolveFieldHandle_1(self.__handle, fieldToken, typeInstantiationContextC, methodInstantiationContextC, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var mDStreamVersion: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ModuleHandle_MDStreamVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var emptyHandle: System_ModuleHandle? /* System.ModuleHandle */ { get {
		
		
		let __returnValueC = System_ModuleHandle_EmptyHandle_Get()
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ModuleHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ModuleHandle_Destroy(self.__handle)
		
	}
	
	
}




public class System_RuntimeTypeHandle_Array /* System.RuntimeTypeHandle[] */: System_Array {
	public override class var typeName: String { get {
		"RuntimeTypeHandle[]"
	}}

	public override class var fullTypeName: String { get {
		"System.RuntimeTypeHandle[]"
	}}

	
}















public class System_RuntimeFieldHandle /* System.RuntimeFieldHandle */: System_ValueType {
	public override class var typeName: String { get {
		"RuntimeFieldHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.RuntimeFieldHandle"
	}}

	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> Bool /* System.Boolean */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Equals_1(self.__handle, handleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromIntPtr(_ value: Int /* System.IntPtr */) throws -> System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_FromIntPtr(value, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toIntPtr(_ value: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> Int /* System.IntPtr */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_ToIntPtr(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_RuntimeFieldHandle_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var value: Int /* System.IntPtr */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_RuntimeFieldHandle_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_RuntimeFieldHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_RuntimeFieldHandle_Destroy(self.__handle)
		
	}
	
	
}




public class System_Reflection_ParameterInfo_Array /* System.Reflection.ParameterInfo[] */: System_Array {
	public override class var typeName: String { get {
		"ParameterInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ParameterInfo[]"
	}}

	
}










public class System_Reflection_ParameterInfo /* System.Reflection.ParameterInfo */: System_Object {
	public override class var typeName: String { get {
		"ParameterInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ParameterInfo"
	}}

	public func isDefined(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModifiedParameterType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetModifiedParameterType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRealObject(_ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws -> System_Object? /* System.Object */ {
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_GetRealObject(self.__handle, contextC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var attributes: System_Reflection_ParameterAttributes /* System.Reflection.ParameterAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var member: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Member_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var parameterType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_ParameterType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var position: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_Position_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isIn: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsIn_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isLcid: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsLcid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isOptional: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsOptional_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isOut: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsOut_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isRetval: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_IsRetval_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var defaultValue: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_DefaultValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var rawDefaultValue: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_RawDefaultValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var hasDefaultValue: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_HasDefaultValue_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var customAttributes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var metadataToken: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterInfo_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ParameterInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ParameterInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Serialization_IObjectReference /* System.Runtime.Serialization.IObjectReference */: DNObject {
	public override class var typeName: String { get {
		"IObjectReference"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Serialization.IObjectReference"
	}}

	public func getRealObject(_ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws -> System_Object? /* System.Object */ {
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Serialization_IObjectReference_GetRealObject(self.__handle, contextC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Serialization_IObjectReference_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Serialization_IObjectReference_Destroy(self.__handle)
		
	}
	
	
}






public class System_Reflection_CustomAttributeData /* System.Reflection.CustomAttributeData */: System_Object {
	public override class var typeName: String { get {
		"CustomAttributeData"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeData"
	}}

	public class func getCustomAttributes(_ target: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ target: System_Reflection_Module? /* System.Reflection.Module */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_1(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ target: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_2(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ target: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */) throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetCustomAttributes_3(targetC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var attributeType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_AttributeType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var constructor: System_Reflection_ConstructorInfo? /* System.Reflection.ConstructorInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_Constructor_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ConstructorInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var constructorArguments: System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_ConstructorArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var namedArguments: System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeData_NamedArguments_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_CustomAttributeData_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeData_Destroy(self.__handle)
		
	}
	
	
}






public class System_Reflection_CustomAttributeData_Array /* System.Reflection.CustomAttributeData[] */: System_Array {
	public override class var typeName: String { get {
		"CustomAttributeData[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeData[]"
	}}

	
}







public class System_Reflection_Module /* System.Reflection.Module */: System_Object {
	public override class var typeName: String { get {
		"Module"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.Module"
	}}

	public func getPEKind(_ peKind: inout System_Reflection_PortableExecutableKinds /* System.Reflection.PortableExecutableKinds */, _ machine: inout System_Reflection_ImageFileMachine /* System.Reflection.ImageFileMachine */) throws {
		var peKindC = peKind.cValue
		var machineC = machine.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Module_GetPEKind(self.__handle, &peKindC, &machineC, &__exceptionC)
		
		peKind = System_Reflection_PortableExecutableKinds(cValue: peKindC)
		
		machine = System_Reflection_ImageFileMachine(cValue: machineC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func isResource() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_IsResource(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isDefined(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_IsDefined(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCustomAttributesData() throws -> System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.CustomAttributeData> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributesData(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributes_1(self.__handle, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getCustomAttributes(_ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Object_Array? /* System.Object[] */ {
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetCustomAttributes_2(self.__handle, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ types: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let typesC = types?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod_1(self.__handle, nameC, typesC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ callConvention: System_Reflection_CallingConventions /* System.Reflection.CallingConventions */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let callConventionC = callConvention.cValue
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethod_2(self.__handle, nameC, bindingAttrC, binderC, callConventionC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethods(_ bindingFlags: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingFlagsC = bindingFlags.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetMethods_1(self.__handle, bindingFlagsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getField(_ name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getField(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetField_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFields() throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetFields(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFields(_ bindingFlags: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingFlagsC = bindingFlags.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetFields_1(self.__handle, bindingFlagsC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getTypes() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetTypes(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ className: System_String? /* System.String */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_1(self.__handle, classNameC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ className: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_2(self.__handle, classNameC, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getType(_ className: System_String? /* System.String */, _ throwOnError: Bool /* System.Boolean */, _ ignoreCase: Bool /* System.Boolean */) throws -> System_Type? /* System.Type */ {
		let classNameC = className?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetType_3(self.__handle, classNameC, throwOnError, ignoreCase, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func findTypes(_ filter: System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */, _ filterCriteria: System_Object? /* System.Object */) throws -> System_Type_Array? /* System.Type[] */ {
		let filterC = filter?.__handle
		let filterCriteriaC = filterCriteria?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_FindTypes(self.__handle, filterC, filterCriteriaC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveField(_ metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveField(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveField(_ metadataToken: Int32 /* System.Int32 */, _ genericTypeArguments: System_Type_Array? /* System.Type[] */, _ genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveField_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMember(_ metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMember(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMember(_ metadataToken: Int32 /* System.Int32 */, _ genericTypeArguments: System_Type_Array? /* System.Type[] */, _ genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMember_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMethod(_ metadataToken: Int32 /* System.Int32 */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMethod(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveMethod(_ metadataToken: Int32 /* System.Int32 */, _ genericTypeArguments: System_Type_Array? /* System.Type[] */, _ genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveMethod_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveSignature(_ metadataToken: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveSignature(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveString(_ metadataToken: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveString(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveType(_ metadataToken: Int32 /* System.Int32 */) throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveType(self.__handle, metadataToken, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func resolveType(_ metadataToken: Int32 /* System.Int32 */, _ genericTypeArguments: System_Type_Array? /* System.Type[] */, _ genericMethodArguments: System_Type_Array? /* System.Type[] */) throws -> System_Type? /* System.Type */ {
		let genericTypeArgumentsC = genericTypeArguments?.__handle
		let genericMethodArgumentsC = genericMethodArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ResolveType_1(self.__handle, metadataToken, genericTypeArgumentsC, genericMethodArgumentsC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Module_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func equals(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var assembly: System_Reflection_Assembly? /* System.Reflection.Assembly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Assembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var fullyQualifiedName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_FullyQualifiedName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var mDStreamVersion: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_MDStreamVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var moduleVersionId: System_Guid? /* System.Guid */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ModuleVersionId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var scopeName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ScopeName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var moduleHandle: System_ModuleHandle? /* System.ModuleHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_ModuleHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_ModuleHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var customAttributes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_CustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var metadataToken: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Module_MetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var filterTypeName: System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */ { get {
		
		
		let __returnValueC = System_Reflection_Module_FilterTypeName_Get()
		
		let __returnValue = System_Reflection_TypeFilter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var filterTypeNameIgnoreCase: System_Reflection_TypeFilter? /* System.Reflection.TypeFilter */ { get {
		
		
		let __returnValueC = System_Reflection_Module_FilterTypeNameIgnoreCase_Get()
		
		let __returnValue = System_Reflection_TypeFilter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_Module_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_Module_Destroy(self.__handle)
		
	}
	
	
}


public class System_Guid /* System.Guid */: System_ValueType {
	public override class var typeName: String { get {
		"Guid"
	}}

	public override class var fullTypeName: String { get {
		"System.Guid"
	}}

	public class func parse(_ input: System_String? /* System.String */) throws -> System_Guid? /* System.Guid */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Parse(inputC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ input: System_String? /* System.String */, _ result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParse(inputC, &resultC, &__exceptionC)
		
		result = System_Guid(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func parseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */) throws -> System_Guid? /* System.Guid */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ParseExact(inputC, formatC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParseExact(_ input: System_String? /* System.String */, _ format: System_String? /* System.String */, _ result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		let formatC = format?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParseExact(inputC, formatC, &resultC, &__exceptionC)
		
		result = System_Guid(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toByteArray() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToByteArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ g: System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let gC = g?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Equals_1(self.__handle, gC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_CompareTo(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func compareTo(_ value: System_Guid? /* System.Guid */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_CompareTo_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ format: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ format: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let formatC = format?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_ToString_2(self.__handle, formatC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func parse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Guid? /* System.Guid */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Parse_1(sC, providerC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ s: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ result: inout System_Guid? /* System.Guid */) throws -> Bool /* System.Boolean */ {
		let sC = s?.__handle
		let providerC = provider?.__handle
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_TryParse_1(sC, providerC, &resultC, &__exceptionC)
		
		result = System_Guid(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func newGuid() throws -> System_Guid? /* System.Guid */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_NewGuid(&__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ b: System_Byte_Array? /* System.Byte[] */) throws {
		let bC = b?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create(bC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ a: UInt32 /* System.UInt32 */, _ b: UInt16 /* System.UInt16 */, _ c: UInt16 /* System.UInt16 */, _ d: UInt8 /* System.Byte */, _ e: UInt8 /* System.Byte */, _ f: UInt8 /* System.Byte */, _ g: UInt8 /* System.Byte */, _ h: UInt8 /* System.Byte */, _ i: UInt8 /* System.Byte */, _ j: UInt8 /* System.Byte */, _ k: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_1(a, b, c, d, e, f, g, h, i, j, k, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ a: Int32 /* System.Int32 */, _ b: Int16 /* System.Int16 */, _ c: Int16 /* System.Int16 */, _ d: System_Byte_Array? /* System.Byte[] */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_2(a, b, c, dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ a: Int32 /* System.Int32 */, _ b: Int16 /* System.Int16 */, _ c: Int16 /* System.Int16 */, _ d: UInt8 /* System.Byte */, _ e: UInt8 /* System.Byte */, _ f: UInt8 /* System.Byte */, _ g: UInt8 /* System.Byte */, _ h: UInt8 /* System.Byte */, _ i: UInt8 /* System.Byte */, _ j: UInt8 /* System.Byte */, _ k: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_3(a, b, c, d, e, f, g, h, i, j, k, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ g: System_String? /* System.String */) throws {
		let gC = g?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Guid_Create_4(gC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var empty: System_Guid? /* System.Guid */ { get {
		
		
		let __returnValueC = System_Guid_Empty_Get()
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Guid_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Guid_Destroy(self.__handle)
		
	}
	
	
}













public class System_Reflection_MethodInfo /* System.Reflection.MethodInfo */: System_Reflection_MethodBase {
	public override class var typeName: String { get {
		"MethodInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MethodInfo"
	}}

	public override func getGenericArguments() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetGenericArguments(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGenericMethodDefinition() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetGenericMethodDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func makeGenericMethod(_ typeArguments: System_Type_Array? /* System.Type[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let typeArgumentsC = typeArguments?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_MakeGenericMethod(self.__handle, typeArgumentsC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBaseDefinition() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetBaseDefinition(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createDelegate(_ delegateType: System_Type? /* System.Type */) throws -> System_Delegate? /* System.Delegate */ {
		let delegateTypeC = delegateType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate(self.__handle, delegateTypeC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createDelegate(_ delegateType: System_Type? /* System.Type */, _ target: System_Object? /* System.Object */) throws -> System_Delegate? /* System.Delegate */ {
		let delegateTypeC = delegateType?.__handle
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_1(self.__handle, delegateTypeC, targetC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createDelegate(_ T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_A1(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createDelegate(_ T: System_Type /* System.Type */, _ target: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_CreateDelegate_A1_1(self.__handle, TC, targetC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var returnParameter: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnParameter_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var returnType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var returnTypeCustomAttributes: System_Reflection_ICustomAttributeProvider? /* System.Reflection.ICustomAttributeProvider */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ICustomAttributeProvider(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MethodInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_MethodInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Type_Array /* System.Type[] */: System_Array {
	public override class var typeName: String { get {
		"Type[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Type[]"
	}}

	
}















public class System_Reflection_Binder /* System.Reflection.Binder */: System_Object {
	public override class var typeName: String { get {
		"Binder"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.Binder"
	}}

	public func bindToField(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ match: System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */, _ value: System_Object? /* System.Object */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_BindToField(self.__handle, bindingAttrC, matchC, valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func bindToMethod(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ match: System_Reflection_MethodBase_Array? /* System.Reflection.MethodBase[] */, _ args: inout System_Object_Array? /* System.Object[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ names: System_String_Array? /* System.String[] */, _ state: inout System_Object? /* System.Object */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		var argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namesC = names?.__handle
		var stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_BindToMethod(self.__handle, bindingAttrC, matchC, &argsC, modifiersC, cultureC, namesC, &stateC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		args = System_Object_Array(handle: argsC)
		
		state = System_Object(handle: stateC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func changeType(_ value: System_Object? /* System.Object */, _ type: System_Type? /* System.Type */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeC = type?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_ChangeType(self.__handle, valueC, typeC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func reorderArgumentArray(_ args: inout System_Object_Array? /* System.Object[] */, _ state: System_Object? /* System.Object */) throws {
		var argsC = args?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_Binder_ReorderArgumentArray(self.__handle, &argsC, stateC, &__exceptionC)
		
		args = System_Object_Array(handle: argsC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func selectMethod(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ match: System_Reflection_MethodBase_Array? /* System.Reflection.MethodBase[] */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodBase? /* System.Reflection.MethodBase */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_SelectMethod(self.__handle, bindingAttrC, matchC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodBase(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func selectProperty(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ match: System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */, _ returnType: System_Type? /* System.Type */, _ indexes: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let bindingAttrC = bindingAttr.cValue
		let matchC = match?.__handle
		let returnTypeC = returnType?.__handle
		let indexesC = indexes?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_Binder_SelectProperty(self.__handle, bindingAttrC, matchC, returnTypeC, indexesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_Binder_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_Binder_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_FieldInfo /* System.Reflection.FieldInfo */: System_Reflection_MemberInfo {
	public override class var typeName: String { get {
		"FieldInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.FieldInfo"
	}}

	public class func getFieldFromHandle(_ handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let handleC = handle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetFieldFromHandle(handleC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFieldFromHandle(_ handle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */, _ declaringType: System_RuntimeTypeHandle? /* System.RuntimeTypeHandle */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let handleC = handle?.__handle
		let declaringTypeC = declaringType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetFieldFromHandle_1(handleC, declaringTypeC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getValue(_ obj: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetValue(self.__handle, objC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setValue(_ obj: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_FieldInfo_SetValue(self.__handle, objC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ obj: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_FieldInfo_SetValue_1(self.__handle, objC, valueC, invokeAttrC, binderC, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getRawConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetRawConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModifiedFieldType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetModifiedFieldType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var attributes: System_Reflection_FieldAttributes /* System.Reflection.FieldAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var fieldType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_FieldType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isInitOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsInitOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isLiteral: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsLiteral_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isNotSerialized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsNotSerialized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPinvokeImpl: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPinvokeImpl_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSpecialName: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isStatic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsStatic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamily: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamily_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamilyAndAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamilyAndAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFamilyOrAssembly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsFamilyOrAssembly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPrivate: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPrivate_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPublic: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsPublic_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecurityCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecurityCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecuritySafeCritical: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecuritySafeCritical_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSecurityTransparent: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_IsSecurityTransparent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var fieldHandle: System_RuntimeFieldHandle? /* System.RuntimeFieldHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_FieldInfo_FieldHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_RuntimeFieldHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_FieldInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_FieldInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_FieldInfo_Array /* System.Reflection.FieldInfo[] */: System_Array {
	public override class var typeName: String { get {
		"FieldInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.FieldInfo[]"
	}}

	
}















public class System_Reflection_MethodBase_Array /* System.Reflection.MethodBase[] */: System_Array {
	public override class var typeName: String { get {
		"MethodBase[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MethodBase[]"
	}}

	
}
















public class System_Reflection_ParameterModifier_Array /* System.Reflection.ParameterModifier[] */: System_Array {
	public override class var typeName: String { get {
		"ParameterModifier[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ParameterModifier[]"
	}}

	
}










public class System_Reflection_ParameterModifier /* System.Reflection.ParameterModifier */: System_ValueType {
	public override class var typeName: String { get {
		"ParameterModifier"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ParameterModifier"
	}}

	public convenience init?(_ parameterCount: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterModifier_Create(parameterCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item(_ index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ParameterModifier_Item_Get(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	public func item_set(_ index: Int32 /* System.Int32 */, _ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_ParameterModifier_Item_Set(self.__handle, index, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ParameterModifier_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ParameterModifier_Destroy(self.__handle)
		
	}
	
	
}








public class System_Reflection_PropertyInfo /* System.Reflection.PropertyInfo */: System_Reflection_MemberInfo {
	public override class var typeName: String { get {
		"PropertyInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.PropertyInfo"
	}}

	public func getIndexParameters() throws -> System_Reflection_ParameterInfo_Array? /* System.Reflection.ParameterInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetIndexParameters(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ParameterInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAccessors() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetAccessors(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAccessors(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetAccessors_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetGetMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getGetMethod(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetGetMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSetMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetSetMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getSetMethod(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetSetMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getModifiedPropertyType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetModifiedPropertyType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getOptionalCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetOptionalCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRequiredCustomModifiers() throws -> System_Type_Array? /* System.Type[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetRequiredCustomModifiers(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ obj: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue(self.__handle, objC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ obj: System_Object? /* System.Object */, _ index: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let indexC = index?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue_1(self.__handle, objC, indexC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getValue(_ obj: System_Object? /* System.Object */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ index: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let indexC = index?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetValue_2(self.__handle, objC, invokeAttrC, binderC, indexC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRawConstantValue() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetRawConstantValue(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setValue(_ obj: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue(self.__handle, objC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ obj: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */, _ index: System_Object_Array? /* System.Object[] */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let indexC = index?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue_1(self.__handle, objC, valueC, indexC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setValue(_ obj: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ index: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let objC = obj?.__handle
		let valueC = value?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let indexC = index?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_PropertyInfo_SetValue_2(self.__handle, objC, valueC, invokeAttrC, binderC, indexC, cultureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var propertyType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_PropertyType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var attributes: System_Reflection_PropertyAttributes /* System.Reflection.PropertyAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isSpecialName: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canRead: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_CanRead_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var canWrite: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_CanWrite_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var getMethod: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_GetMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var setMethod: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_PropertyInfo_SetMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_PropertyInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_PropertyInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_MethodInfo_Array /* System.Reflection.MethodInfo[] */: System_Array {
	public override class var typeName: String { get {
		"MethodInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MethodInfo[]"
	}}

	
}















public class System_Reflection_PropertyInfo_Array /* System.Reflection.PropertyInfo[] */: System_Array {
	public override class var typeName: String { get {
		"PropertyInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.PropertyInfo[]"
	}}

	
}















public class System_Reflection_ConstructorInfo /* System.Reflection.ConstructorInfo */: System_Reflection_MethodBase {
	public override class var typeName: String { get {
		"ConstructorInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ConstructorInfo"
	}}

	public func invoke(_ parameters: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let parametersC = parameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Invoke(self.__handle, parametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invoke(_ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ parameters: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Object? /* System.Object */ {
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let parametersC = parameters?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Invoke_1(self.__handle, invokeAttrC, binderC, parametersC, cultureC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ConstructorInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var constructorName: System_String? /* System.String */ { get {
		
		
		let __returnValueC = System_Reflection_ConstructorInfo_ConstructorName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var typeConstructorName: System_String? /* System.String */ { get {
		
		
		let __returnValueC = System_Reflection_ConstructorInfo_TypeConstructorName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ConstructorInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ConstructorInfo_Destroy(self.__handle)
		
	}
	
	
}










public class System_Reflection_CustomAttributeTypedArgument /* System.Reflection.CustomAttributeTypedArgument */: System_ValueType {
	public override class var typeName: String { get {
		"CustomAttributeTypedArgument"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeTypedArgument"
	}}

	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ argumentType: System_Type? /* System.Type */, _ value: System_Object? /* System.Object */) throws {
		let argumentTypeC = argumentType?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Create(argumentTypeC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Create_1(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var argumentType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_ArgumentType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeTypedArgument_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_CustomAttributeTypedArgument_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeTypedArgument_Destroy(self.__handle)
		
	}
	
	
}




public class System_Reflection_CustomAttributeTypedArgument_Array /* System.Reflection.CustomAttributeTypedArgument[] */: System_Array {
	public override class var typeName: String { get {
		"CustomAttributeTypedArgument[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeTypedArgument[]"
	}}

	
}















public class System_Reflection_CustomAttributeNamedArgument /* System.Reflection.CustomAttributeNamedArgument */: System_ValueType {
	public override class var typeName: String { get {
		"CustomAttributeNamedArgument"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeNamedArgument"
	}}

	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Reflection_CustomAttributeNamedArgument? /* System.Reflection.CustomAttributeNamedArgument */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ memberInfo: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ value: System_Object? /* System.Object */) throws {
		let memberInfoC = memberInfo?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Create(memberInfoC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ memberInfo: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ typedArgument: System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */) throws {
		let memberInfoC = memberInfo?.__handle
		let typedArgumentC = typedArgument?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_Create_1(memberInfoC, typedArgumentC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var memberInfo: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_MemberInfo_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var typedValue: System_Reflection_CustomAttributeTypedArgument? /* System.Reflection.CustomAttributeTypedArgument */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_TypedValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_CustomAttributeTypedArgument(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var memberName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_MemberName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isField: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_CustomAttributeNamedArgument_IsField_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_CustomAttributeNamedArgument_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_CustomAttributeNamedArgument_Destroy(self.__handle)
		
	}
	
	
}




public class System_Reflection_CustomAttributeNamedArgument_Array /* System.Reflection.CustomAttributeNamedArgument[] */: System_Array {
	public override class var typeName: String { get {
		"CustomAttributeNamedArgument[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.CustomAttributeNamedArgument[]"
	}}

	
}












public class System_Reflection_MethodBody /* System.Reflection.MethodBody */: System_Object {
	public override class var typeName: String { get {
		"MethodBody"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MethodBody"
	}}

	public func getILAsByteArray() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_GetILAsByteArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var localSignatureMetadataToken: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_LocalSignatureMetadataToken_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var localVariables: System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_LocalVariables_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var maxStackSize: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_MaxStackSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var initLocals: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_InitLocals_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var exceptionHandlingClauses: System_Collections_Generic_IList_A1? /* System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_MethodBody_ExceptionHandlingClauses_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IList_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MethodBody_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_MethodBody_Destroy(self.__handle)
		
	}
	
	
}










public class System_Reflection_LocalVariableInfo /* System.Reflection.LocalVariableInfo */: System_Object {
	public override class var typeName: String { get {
		"LocalVariableInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.LocalVariableInfo"
	}}

	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var localType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_LocalType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var localIndex: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_LocalIndex_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isPinned: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_LocalVariableInfo_IsPinned_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_LocalVariableInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_LocalVariableInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_LocalVariableInfo_Array /* System.Reflection.LocalVariableInfo[] */: System_Array {
	public override class var typeName: String { get {
		"LocalVariableInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.LocalVariableInfo[]"
	}}

	
}















public class System_Reflection_ExceptionHandlingClause /* System.Reflection.ExceptionHandlingClause */: System_Object {
	public override class var typeName: String { get {
		"ExceptionHandlingClause"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ExceptionHandlingClause"
	}}

	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var flags: System_Reflection_ExceptionHandlingClauseOptions /* System.Reflection.ExceptionHandlingClauseOptions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_Flags_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ExceptionHandlingClauseOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var tryOffset: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_TryOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var tryLength: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_TryLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var handlerOffset: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_HandlerOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var handlerLength: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_HandlerLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var filterOffset: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_FilterOffset_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var catchType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ExceptionHandlingClause_CatchType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ExceptionHandlingClause_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ExceptionHandlingClause_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_ExceptionHandlingClause_Array /* System.Reflection.ExceptionHandlingClause[] */: System_Array {
	public override class var typeName: String { get {
		"ExceptionHandlingClause[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ExceptionHandlingClause[]"
	}}

	
}







public class System_Collections_IDictionary /* System.Collections.IDictionary */: DNObject {
	public override class var typeName: String { get {
		"IDictionary"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IDictionary"
	}}

	public func contains(_ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Contains(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func add(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Add(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getEnumerator() throws -> System_Collections_IDictionaryEnumerator? /* System.Collections.IDictionaryEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionaryEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ key: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Remove(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func item(_ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Item_Get(self.__handle, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_IDictionary_Item_Set(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var keys: System_Collections_ICollection? /* System.Collections.ICollection */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Keys_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var values: System_Collections_ICollection? /* System.Collections.ICollection */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_Values_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFixedSize: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionary_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IDictionary_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IDictionary_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IDictionaryEnumerator /* System.Collections.IDictionaryEnumerator */: DNObject {
	public override class var typeName: String { get {
		"IDictionaryEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IDictionaryEnumerator"
	}}

	public var key: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var entry: System_Collections_DictionaryEntry? /* System.Collections.DictionaryEntry */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IDictionaryEnumerator_Entry_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_DictionaryEntry(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IDictionaryEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IDictionaryEnumerator_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_DictionaryEntry /* System.Collections.DictionaryEntry */: System_ValueType {
	public override class var typeName: String { get {
		"DictionaryEntry"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.DictionaryEntry"
	}}

	public func deconstruct(_ key: inout System_Object? /* System.Object */, _ value: inout System_Object? /* System.Object */) throws {
		var keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Deconstruct(self.__handle, &keyC, &valueC, &__exceptionC)
		
		key = System_Object(handle: keyC)
		
		value = System_Object(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Create(keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var key: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func key_set(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Key_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_DictionaryEntry_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func value_set(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_DictionaryEntry_Value_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_DictionaryEntry_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_DictionaryEntry_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Tasks_Task /* System.Threading.Tasks.Task */: System_Object {
	public override class var typeName: String { get {
		"Task"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.Task"
	}}

	public func start() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Start(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func start(_ scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Start_1(self.__handle, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func runSynchronously() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_RunSynchronously(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func runSynchronously(_ scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_RunSynchronously_1(self.__handle, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getAwaiter() throws -> System_Runtime_CompilerServices_TaskAwaiter? /* System.Runtime.CompilerServices.TaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_TaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func configureAwait(_ continueOnCapturedContext: Bool /* System.Boolean */) throws -> System_Runtime_CompilerServices_ConfiguredTaskAwaitable? /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_ConfigureAwait(self.__handle, continueOnCapturedContext, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredTaskAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func yield() throws -> System_Runtime_CompilerServices_YieldAwaitable? /* System.Runtime.CompilerServices.YieldAwaitable */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Yield(&__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_YieldAwaitable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func wait() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Wait(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func wait(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_1(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func wait(_ timeout: System_TimeSpan? /* System.TimeSpan */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_2(self.__handle, timeoutC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func wait(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_Wait_3(self.__handle, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func wait(_ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_4(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func wait(_ millisecondsTimeout: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Wait_5(self.__handle, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func waitAsync(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func waitAsync(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync_1(self.__handle, timeoutC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func waitAsync(_ timeout: System_TimeSpan? /* System.TimeSpan */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let timeoutC = timeout?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAsync_2(self.__handle, timeoutC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_WaitAll(tasksC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func waitAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_1(tasksC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_2(tasksC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Task_WaitAll_3(tasksC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func waitAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ millisecondsTimeout: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Bool /* System.Boolean */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAll_4(tasksC, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny(tasksC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_1(tasksC, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_2(tasksC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_3(tasksC, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */, _ millisecondsTimeout: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> Int32 /* System.Int32 */ {
		let tasksC = tasks?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WaitAny_4(tasksC, millisecondsTimeout, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromException(_ exception: System_Exception? /* System.Exception */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_FromException(exceptionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromCanceled(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_FromCanceled(cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func run(_ action: System_Action? /* System.Action */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Run_1(actionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func run(_ action: System_Action? /* System.Action */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Run_2(actionC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func delay(_ delay: System_TimeSpan? /* System.TimeSpan */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay(delayC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func delay(_ delay: System_TimeSpan? /* System.TimeSpan */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let delayC = delay?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_1(delayC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func delay(_ millisecondsDelay: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_2(millisecondsDelay, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func delay(_ millisecondsDelay: Int32 /* System.Int32 */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Delay_3(millisecondsDelay, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func whenAll(_ tasks: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAll(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func whenAll(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAll_1(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func whenAny(_ tasks: System_Threading_Tasks_Task_Array? /* System.Threading.Tasks.Task[] */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func whenAny(_ task1: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */, _ task2: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let task1C = task1?.__handle
		let task2C = task2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny_1(task1C, task2C, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func whenAny(_ tasks: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Threading.Tasks.Task> */ {
		let tasksC = tasks?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_WhenAny_2(tasksC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ action: System_Action? /* System.Action */) throws {
		let actionC = action?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Create(actionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ action: System_Action? /* System.Action */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let actionC = action?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Create_1(actionC, cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ action: System_Action? /* System.Action */, _ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */) throws {
		let actionC = action?.__handle
		let creationOptionsC = creationOptions.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Create_2(actionC, creationOptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ action: System_Action? /* System.Action */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, _ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */) throws {
		let actionC = action?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		let creationOptionsC = creationOptions.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Create_3(actionC, cancellationTokenC, creationOptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var id: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var exception: System_AggregateException? /* System.AggregateException */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Exception_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_AggregateException(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var status: System_Threading_Tasks_TaskStatus /* System.Threading.Tasks.TaskStatus */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Status_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isCanceled: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCanceled_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isCompletedSuccessfully: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsCompletedSuccessfully_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_CreationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskCreationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var asyncState: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_AsyncState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var factory: System_Threading_Tasks_TaskFactory? /* System.Threading.Tasks.TaskFactory */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_Factory_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskFactory(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var completedTask: System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_CompletedTask_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isFaulted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_IsFaulted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_Task_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_Task_Destroy(self.__handle)
		
	}
	
	
}


public class System_IAsyncResult /* System.IAsyncResult */: DNObject {
	public override class var typeName: String { get {
		"IAsyncResult"
	}}

	public override class var fullTypeName: String { get {
		"System.IAsyncResult"
	}}

	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var asyncWaitHandle: System_Threading_WaitHandle? /* System.Threading.WaitHandle */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_AsyncWaitHandle_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_WaitHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var asyncState: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_AsyncState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var completedSynchronously: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IAsyncResult_CompletedSynchronously_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IAsyncResult_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IAsyncResult_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Tasks_TaskScheduler /* System.Threading.Tasks.TaskScheduler */: System_Object {
	public override class var typeName: String { get {
		"TaskScheduler"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.TaskScheduler"
	}}

	public class func fromCurrentSynchronizationContext() throws -> System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var maximumConcurrencyLevel: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var `default`: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Default_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var current: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Current_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var id: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskScheduler_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_TaskScheduler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_TaskScheduler_Destroy(self.__handle)
		
	}
	
	
}


public class System_AggregateException /* System.AggregateException */: System_Exception {
	public override class var typeName: String { get {
		"AggregateException"
	}}

	public override class var fullTypeName: String { get {
		"System.AggregateException"
	}}

	public override func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AggregateException_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func getBaseException() throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_GetBaseException(self.__handle, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func flatten() throws -> System_AggregateException? /* System.AggregateException */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Flatten(self.__handle, &__exceptionC)
		
		let __returnValue = System_AggregateException(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ innerExceptions: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Exception> */) throws {
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_3(innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ innerExceptions: System_Exception_Array? /* System.Exception[] */) throws {
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_4(innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerExceptions: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Exception> */) throws {
		let messageC = message?.__handle
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_5(messageC, innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerExceptions: System_Exception_Array? /* System.Exception[] */) throws {
		let messageC = message?.__handle
		let innerExceptionsC = innerExceptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Create_6(messageC, innerExceptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var innerExceptions: System_Collections_ObjectModel_ReadOnlyCollection_A1? /* System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_InnerExceptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ObjectModel_ReadOnlyCollection_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override var message: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AggregateException_Message_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AggregateException_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AggregateException_Destroy(self.__handle)
		
	}
	
	
}












public class System_Exception_Array /* System.Exception[] */: System_Array {
	public override class var typeName: String { get {
		"Exception[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Exception[]"
	}}

	
}







public class System_Threading_Tasks_TaskFactory /* System.Threading.Tasks.TaskFactory */: System_Object {
	public override class var typeName: String { get {
		"TaskFactory"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.TaskFactory"
	}}

	public func startNew(_ action: System_Action? /* System.Action */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_StartNew(self.__handle, actionC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func startNew(_ action: System_Action? /* System.Action */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_StartNew_1(self.__handle, actionC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func startNew(_ action: System_Action? /* System.Action */, _ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		let creationOptionsC = creationOptions.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_StartNew_2(self.__handle, actionC, creationOptionsC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func startNew(_ action: System_Action? /* System.Action */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, _ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */, _ scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let actionC = action?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		let creationOptionsC = creationOptions.cValue
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_StartNew_3(self.__handle, actionC, cancellationTokenC, creationOptionsC, schedulerC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_1(cancellationTokenC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_2(schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */, _ continuationOptions: System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */) throws {
		let creationOptionsC = creationOptions.cValue
		let continuationOptionsC = continuationOptions.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_3(creationOptionsC, continuationOptionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, _ creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */, _ continuationOptions: System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */, _ scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */) throws {
		let cancellationTokenC = cancellationToken?.__handle
		let creationOptionsC = creationOptions.cValue
		let continuationOptionsC = continuationOptions.cValue
		let schedulerC = scheduler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Create_4(cancellationTokenC, creationOptionsC, continuationOptionsC, schedulerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_CancellationToken_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var scheduler: System_Threading_Tasks_TaskScheduler? /* System.Threading.Tasks.TaskScheduler */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_Scheduler_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskScheduler(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var creationOptions: System_Threading_Tasks_TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_CreationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskCreationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var continuationOptions: System_Threading_Tasks_TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_TaskFactory_ContinuationOptions_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_TaskContinuationOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_TaskFactory_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_TaskFactory_Destroy(self.__handle)
		
	}
	
	
}


// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
public class System_Threading_Tasks_Task_Array /* System.Threading.Tasks.Task[] */: System_Array {
	public override class var typeName: String { get {
		"Task[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.Task[]"
	}}

	
}















public class System_Runtime_CompilerServices_TaskAwaiter /* System.Runtime.CompilerServices.TaskAwaiter */: System_ValueType {
	public override class var typeName: String { get {
		"TaskAwaiter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.TaskAwaiter"
	}}

	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_TaskAwaiter_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_TaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_TaskAwaiter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_TaskAwaiter_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ICriticalNotifyCompletion /* System.Runtime.CompilerServices.ICriticalNotifyCompletion */: DNObject {
	public override class var typeName: String { get {
		"ICriticalNotifyCompletion"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ICriticalNotifyCompletion"
	}}

	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ICriticalNotifyCompletion_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ICriticalNotifyCompletion_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ICriticalNotifyCompletion_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_INotifyCompletion /* System.Runtime.CompilerServices.INotifyCompletion */: DNObject {
	public override class var typeName: String { get {
		"INotifyCompletion"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.INotifyCompletion"
	}}

	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_INotifyCompletion_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_INotifyCompletion_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_INotifyCompletion_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ConfiguredTaskAwaitable /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */: System_ValueType {
	public override class var typeName: String { get {
		"ConfiguredTaskAwaitable"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable"
	}}

	public func getAwaiter() throws -> System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter? /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredTaskAwaitable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */: System_ValueType {
	public override class var typeName: String { get {
		"ConfiguredTaskAwaiter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"
	}}

	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_YieldAwaitable /* System.Runtime.CompilerServices.YieldAwaitable */: System_ValueType {
	public override class var typeName: String { get {
		"YieldAwaitable"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.YieldAwaitable"
	}}

	public func getAwaiter() throws -> System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter? /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_YieldAwaitable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_YieldAwaitable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */: System_ValueType {
	public override class var typeName: String { get {
		"YieldAwaiter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter"
	}}

	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy(self.__handle)
		
	}
	
	
}


// Type "TResult" was skipped. Reason: It has no full name.
// Type "Task`1" was skipped. Reason: It has no full name.
// Type "TResult[]" was skipped. Reason: It has no full name.
// Type "TResult" was skipped. Reason: It has no full name.

// Type "TaskFactory`1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TaskAwaiter`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaitable`1" was skipped. Reason: It has no full name.
// Type "Task`1" was skipped. Reason: It has no full name.
// Type "TResult[]" was skipped. Reason: It has no full name.
// Type "TResult" was skipped. Reason: It has no full name.

// Type "TaskFactory`1" was skipped. Reason: It has no full name.
// Type "TaskAwaiter`1" was skipped. Reason: It has no full name.
// Type "ConfiguredTaskAwaitable`1" was skipped. Reason: It has no full name.








public class System_Runtime_CompilerServices_ValueTaskAwaiter /* System.Runtime.CompilerServices.ValueTaskAwaiter */: System_ValueType {
	public override class var typeName: String { get {
		"ValueTaskAwaiter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ValueTaskAwaiter"
	}}

	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ValueTaskAwaiter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */: System_ValueType {
	public override class var typeName: String { get {
		"ConfiguredValueTaskAwaitable"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable"
	}}

	public func getAwaiter() throws -> System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter? /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */: System_ValueType {
	public override class var typeName: String { get {
		"ConfiguredValueTaskAwaiter"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter"
	}}

	public func getResult() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func onCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeOnCompleted(_ continuation: System_Action? /* System.Action */) throws {
		let continuationC = continuation?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted(self.__handle, continuationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var isCompleted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Tasks_Sources_IValueTaskSource /* System.Threading.Tasks.Sources.IValueTaskSource */: DNObject {
	public override class var typeName: String { get {
		"IValueTaskSource"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.Sources.IValueTaskSource"
	}}

	public func getStatus(_ token: Int16 /* System.Int16 */) throws -> System_Threading_Tasks_Sources_ValueTaskSourceStatus /* System.Threading.Tasks.Sources.ValueTaskSourceStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Sources_IValueTaskSource_GetStatus(self.__handle, token, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Sources_ValueTaskSourceStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getResult(_ token: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Tasks_Sources_IValueTaskSource_GetResult(self.__handle, token, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_Sources_IValueTaskSource_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_Sources_IValueTaskSource_Destroy(self.__handle)
		
	}
	
	
}










public class Microsoft_Win32_SafeHandles_SafeFileHandle /* Microsoft.Win32.SafeHandles.SafeFileHandle */: Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid {
	public override class var typeName: String { get {
		"SafeFileHandle"
	}}

	public override class var fullTypeName: String { get {
		"Microsoft.Win32.SafeHandles.SafeFileHandle"
	}}

	public convenience init?(_ preexistingHandle: Int /* System.IntPtr */, _ ownsHandle: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_Create(preexistingHandle, ownsHandle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var isAsync: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override var isInvalid: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: Microsoft_Win32_SafeHandles_SafeFileHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_FileStreamOptions /* System.IO.FileStreamOptions */: System_Object {
	public override class var typeName: String { get {
		"FileStreamOptions"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileStreamOptions"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var mode: System_IO_FileMode /* System.IO.FileMode */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Mode_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func mode_set(_ value: System_IO_FileMode /* System.IO.FileMode */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Mode_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var access: System_IO_FileAccess /* System.IO.FileAccess */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Access_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAccess(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func access_set(_ value: System_IO_FileAccess /* System.IO.FileAccess */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Access_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var share: System_IO_FileShare /* System.IO.FileShare */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Share_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileShare(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func share_set(_ value: System_IO_FileShare /* System.IO.FileShare */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Share_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var options: System_IO_FileOptions /* System.IO.FileOptions */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_Options_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileOptions(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func options_set(_ value: System_IO_FileOptions /* System.IO.FileOptions */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_Options_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var preallocationSize: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_PreallocationSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func preallocationSize_set(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_PreallocationSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var bufferSize: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileStreamOptions_BufferSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func bufferSize_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileStreamOptions_BufferSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileStreamOptions_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_FileStreamOptions_Destroy(self.__handle)
		
	}
	
	
}






public class System_Reflection_TypeInfo /* System.Reflection.TypeInfo */: System_Type {
	public override class var typeName: String { get {
		"TypeInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.TypeInfo"
	}}

	public func asType() throws -> System_Type? /* System.Type */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_AsType(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredEvent(_ name: System_String? /* System.String */) throws -> System_Reflection_EventInfo? /* System.Reflection.EventInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredEvent(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_EventInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredField(_ name: System_String? /* System.String */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredField(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredMethod(_ name: System_String? /* System.String */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredMethod(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredNestedType(_ name: System_String? /* System.String */) throws -> System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredNestedType(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredProperty(_ name: System_String? /* System.String */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredProperty(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDeclaredMethods(_ name: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GetDeclaredMethods(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isAssignableFrom(_ typeInfo: System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */) throws -> Bool /* System.Boolean */ {
		let typeInfoC = typeInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_IsAssignableFrom(self.__handle, typeInfoC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var genericTypeParameters: System_Type_Array? /* System.Type[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_GenericTypeParameters_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredConstructors: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredConstructors_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredEvents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.EventInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredEvents_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredFields: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredFields_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredMembers: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredMembers_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredMethods: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredMethods_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredNestedTypes: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredNestedTypes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var declaredProperties: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_DeclaredProperties_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var implementedInterfaces: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Type> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_TypeInfo_ImplementedInterfaces_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_TypeInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_TypeInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_IReflect /* System.Reflection.IReflect */: DNObject {
	public override class var typeName: String { get {
		"IReflect"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.IReflect"
	}}

	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethod(self.__handle, nameC, bindingAttrC, binderC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethod(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethod_1(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMethods(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMethods(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getField(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo? /* System.Reflection.FieldInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetField(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFields(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_FieldInfo_Array? /* System.Reflection.FieldInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetFields(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_FieldInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperty(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperty(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ returnType: System_Type? /* System.Type */, _ types: System_Type_Array? /* System.Type[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */) throws -> System_Reflection_PropertyInfo? /* System.Reflection.PropertyInfo */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let returnTypeC = returnType?.__handle
		let typesC = types?.__handle
		let modifiersC = modifiers?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperty_1(self.__handle, nameC, bindingAttrC, binderC, returnTypeC, typesC, modifiersC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getProperties(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_PropertyInfo_Array? /* System.Reflection.PropertyInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetProperties(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_PropertyInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMember(_ name: System_String? /* System.String */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let nameC = name?.__handle
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMember(self.__handle, nameC, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMembers(_ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */) throws -> System_Reflection_MemberInfo_Array? /* System.Reflection.MemberInfo[] */ {
		let bindingAttrC = bindingAttr.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_GetMembers(self.__handle, bindingAttrC, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func invokeMember(_ name: System_String? /* System.String */, _ invokeAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ target: System_Object? /* System.Object */, _ args: System_Object_Array? /* System.Object[] */, _ modifiers: System_Reflection_ParameterModifier_Array? /* System.Reflection.ParameterModifier[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ namedParameters: System_String_Array? /* System.String[] */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		let invokeAttrC = invokeAttr.cValue
		let binderC = binder?.__handle
		let targetC = target?.__handle
		let argsC = args?.__handle
		let modifiersC = modifiers?.__handle
		let cultureC = culture?.__handle
		let namedParametersC = namedParameters?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_InvokeMember(self.__handle, nameC, invokeAttrC, binderC, targetC, argsC, modifiersC, cultureC, namedParametersC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var underlyingSystemType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflect_UnderlyingSystemType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_IReflect_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_IReflect_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_MemberInfo_Array /* System.Reflection.MemberInfo[] */: System_Array {
	public override class var typeName: String { get {
		"MemberInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.MemberInfo[]"
	}}

	
}















public class System_Reflection_IReflectableType /* System.Reflection.IReflectableType */: DNObject {
	public override class var typeName: String { get {
		"IReflectableType"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.IReflectableType"
	}}

	public func getTypeInfo() throws -> System_Reflection_TypeInfo? /* System.Reflection.TypeInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_IReflectableType_GetTypeInfo(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_TypeInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_IReflectableType_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_IReflectableType_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_EventInfo /* System.Reflection.EventInfo */: System_Reflection_MemberInfo {
	public override class var typeName: String { get {
		"EventInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.EventInfo"
	}}

	public func getOtherMethods() throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetOtherMethods(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getOtherMethods(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetOtherMethods_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAddMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetAddMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRemoveMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRemoveMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRaiseMethod() throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRaiseMethod(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAddMethod(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetAddMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRemoveMethod(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRemoveMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getRaiseMethod(_ nonPublic: Bool /* System.Boolean */) throws -> System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetRaiseMethod_1(self.__handle, nonPublic, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addEventHandler(_ target: System_Object? /* System.Object */, _ handler: System_Delegate? /* System.Delegate */) throws {
		let targetC = target?.__handle
		let handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_EventInfo_AddEventHandler(self.__handle, targetC, handlerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeEventHandler(_ target: System_Object? /* System.Object */, _ handler: System_Delegate? /* System.Delegate */) throws {
		let targetC = target?.__handle
		let handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Reflection_EventInfo_RemoveEventHandler(self.__handle, targetC, handlerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override var memberType: System_Reflection_MemberTypes /* System.Reflection.MemberTypes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_MemberType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MemberTypes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var attributes: System_Reflection_EventAttributes /* System.Reflection.EventAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_EventAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isSpecialName: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_IsSpecialName_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var addMethod: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_AddMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var removeMethod: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_RemoveMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var raiseMethod: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_RaiseMethod_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_MethodInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isMulticast: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_IsMulticast_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var eventHandlerType: System_Type? /* System.Type */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_EventInfo_EventHandlerType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_EventInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_EventInfo_Destroy(self.__handle)
		
	}
	
	
}










public class System_Reflection_ManifestResourceInfo /* System.Reflection.ManifestResourceInfo */: System_Object {
	public override class var typeName: String { get {
		"ManifestResourceInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ManifestResourceInfo"
	}}

	public convenience init?(_ containingAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ containingFileName: System_String? /* System.String */, _ resourceLocation: System_Reflection_ResourceLocation /* System.Reflection.ResourceLocation */) throws {
		let containingAssemblyC = containingAssembly?.__handle
		let containingFileNameC = containingFileName?.__handle
		let resourceLocationC = resourceLocation.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_Create(containingAssemblyC, containingFileNameC, resourceLocationC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var referencedAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var fileName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_FileName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var resourceLocation: System_Reflection_ResourceLocation /* System.Reflection.ResourceLocation */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Reflection_ManifestResourceInfo_ResourceLocation_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_ResourceLocation(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ManifestResourceInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ManifestResourceInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_ResolveEventArgs /* System.ResolveEventArgs */: System_EventArgs {
	public override class var typeName: String { get {
		"ResolveEventArgs"
	}}

	public override class var fullTypeName: String { get {
		"System.ResolveEventArgs"
	}}

	public convenience init?(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ name: System_String? /* System.String */, _ requestingAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws {
		let nameC = name?.__handle
		let requestingAssemblyC = requestingAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Create_1(nameC, requestingAssemblyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var requestingAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_ResolveEventArgs_RequestingAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ResolveEventArgs_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ResolveEventArgs_Destroy(self.__handle)
		
	}
	
	
}


public class System_EventArgs /* System.EventArgs */: System_Object {
	public override class var typeName: String { get {
		"EventArgs"
	}}

	public override class var fullTypeName: String { get {
		"System.EventArgs"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_EventArgs_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var empty: System_EventArgs? /* System.EventArgs */ { get {
		
		
		let __returnValueC = System_EventArgs_Empty_Get()
		
		let __returnValue = System_EventArgs(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_EventArgs_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_EventArgs_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_Module_Array /* System.Reflection.Module[] */: System_Array {
	public override class var typeName: String { get {
		"Module[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.Module[]"
	}}

	
}















public class System_Reflection_AssemblyName_Array /* System.Reflection.AssemblyName[] */: System_Array {
	public override class var typeName: String { get {
		"AssemblyName[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.AssemblyName[]"
	}}

	
}















public class System_IO_FileStream_Array /* System.IO.FileStream[] */: System_Array {
	public override class var typeName: String { get {
		"FileStream[]"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileStream[]"
	}}

	
}















public class System_Text_Rune /* System.Text.Rune */: System_ValueType {
	public override class var typeName: String { get {
		"Rune"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.Rune"
	}}

	public func compareTo(_ other: System_Text_Rune? /* System.Text.Rune */) throws -> Int32 /* System.Int32 */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_CompareTo(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getRuneAt(_ input: System_String? /* System.String */, _ index: Int32 /* System.Int32 */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let inputC = input?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetRuneAt(inputC, index, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isValid(_ value: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsValid(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isValid(_ value: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsValid_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryCreate(_ ch: DNChar /* System.Char */, _ result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let chC = ch.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate(chC, &resultC, &__exceptionC)
		
		result = System_Text_Rune(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryCreate(_ highSurrogate: DNChar /* System.Char */, _ lowSurrogate: DNChar /* System.Char */, _ result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let highSurrogateC = highSurrogate.cValue
		let lowSurrogateC = lowSurrogate.cValue
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_1(highSurrogateC, lowSurrogateC, &resultC, &__exceptionC)
		
		result = System_Text_Rune(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryCreate(_ value: Int32 /* System.Int32 */, _ result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_2(value, &resultC, &__exceptionC)
		
		result = System_Text_Rune(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryCreate(_ value: UInt32 /* System.UInt32 */, _ result: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		var resultC = result?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryCreate_3(value, &resultC, &__exceptionC)
		
		result = System_Text_Rune(handle: resultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryGetRuneAt(_ input: System_String? /* System.String */, _ index: Int32 /* System.Int32 */, _ value: inout System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let inputC = input?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_TryGetRuneAt(inputC, index, &valueC, &__exceptionC)
		
		value = System_Text_Rune(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getNumericValue(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetNumericValue(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getUnicodeCategory(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Globalization_UnicodeCategory /* System.Globalization.UnicodeCategory */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_GetUnicodeCategory(valueC, &__exceptionC)
		
		let __returnValue = System_Globalization_UnicodeCategory(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isControl(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsControl(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDigit(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsDigit(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isLetter(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLetter(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isLetterOrDigit(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLetterOrDigit(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isLower(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsLower(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isNumber(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsNumber(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isPunctuation(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsPunctuation(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isSeparator(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsSeparator(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isSymbol(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsSymbol(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isUpper(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsUpper(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isWhiteSpace(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsWhiteSpace(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toLower(_ value: System_Text_Rune? /* System.Text.Rune */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToLower(valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toLowerInvariant(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToLowerInvariant(valueC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toUpper(_ value: System_Text_Rune? /* System.Text.Rune */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		let cultureC = culture?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToUpper(valueC, cultureC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toUpperInvariant(_ value: System_Text_Rune? /* System.Text.Rune */) throws -> System_Text_Rune? /* System.Text.Rune */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ToUpperInvariant(valueC, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ ch: DNChar /* System.Char */) throws {
		let chC = ch.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create(chC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ highSurrogate: DNChar /* System.Char */, _ lowSurrogate: DNChar /* System.Char */) throws {
		let highSurrogateC = highSurrogate.cValue
		let lowSurrogateC = lowSurrogate.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_1(highSurrogateC, lowSurrogateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Create_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var isAscii: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsAscii_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isBmp: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_IsBmp_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var plane: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Plane_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var replacementChar: System_Text_Rune? /* System.Text.Rune */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_ReplacementChar_Get(&__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var utf16SequenceLength: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Utf16SequenceLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var utf8SequenceLength: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Utf8SequenceLength_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var value: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Rune_Value_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_Rune_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_Rune_Destroy(self.__handle)
		
	}
	
	
}







public class System_Globalization_SortKey /* System.Globalization.SortKey */: System_Object {
	public override class var typeName: String { get {
		"SortKey"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.SortKey"
	}}

	public class func compare(_ sortkey1: System_Globalization_SortKey? /* System.Globalization.SortKey */, _ sortkey2: System_Globalization_SortKey? /* System.Globalization.SortKey */) throws -> Int32 /* System.Int32 */ {
		let sortkey1C = sortkey1?.__handle
		let sortkey2C = sortkey2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_Compare(sortkey1C, sortkey2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var originalString: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_OriginalString_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var keyData: System_Byte_Array? /* System.Byte[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortKey_KeyData_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_SortKey_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_SortKey_Destroy(self.__handle)
		
	}
	
	
}


public class System_Globalization_SortVersion /* System.Globalization.SortVersion */: System_Object {
	public override class var typeName: String { get {
		"SortVersion"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.SortVersion"
	}}

	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ other: System_Globalization_SortVersion? /* System.Globalization.SortVersion */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Equals_1(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ fullVersion: Int32 /* System.Int32 */, _ sortId: System_Guid? /* System.Guid */) throws {
		let sortIdC = sortId?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_Create(fullVersion, sortIdC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var fullVersion: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_FullVersion_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var sortId: System_Guid? /* System.Guid */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_SortVersion_SortId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_SortVersion_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_SortVersion_Destroy(self.__handle)
		
	}
	
	
}




public class System_Globalization_TextInfo /* System.Globalization.TextInfo */: System_Object {
	public override class var typeName: String { get {
		"TextInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.TextInfo"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ textInfo: System_Globalization_TextInfo? /* System.Globalization.TextInfo */) throws -> System_Globalization_TextInfo? /* System.Globalization.TextInfo */ {
		let textInfoC = textInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ReadOnly(textInfoC, &__exceptionC)
		
		let __returnValue = System_Globalization_TextInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLower(_ c: DNChar /* System.Char */) throws -> DNChar /* System.Char */ {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToLower(self.__handle, cC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toLower(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToLower_1(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUpper(_ c: DNChar /* System.Char */) throws -> DNChar /* System.Char */ {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToUpper(self.__handle, cC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toUpper(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToUpper_1(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toTitleCase(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ToTitleCase(self.__handle, strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var aNSICodePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ANSICodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var oEMCodePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_OEMCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var macCodePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_MacCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var eBCDICCodePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_EBCDICCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var lCID: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_LCID_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var cultureName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_CultureName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var listSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_ListSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func listSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_TextInfo_ListSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isRightToLeft: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_TextInfo_IsRightToLeft_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_TextInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_TextInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Globalization_NumberFormatInfo /* System.Globalization.NumberFormatInfo */: System_Object {
	public override class var typeName: String { get {
		"NumberFormatInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.NumberFormatInfo"
	}}

	public class func getInstance(_ formatProvider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		let formatProviderC = formatProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_GetInstance(formatProviderC, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFormat(_ formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ nfi: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */) throws -> System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ {
		let nfiC = nfi?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_ReadOnly(nfiC, &__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var invariantInfo: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_InvariantInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var currencyDecimalDigits: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func currencyDecimalDigits_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currencyDecimalSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currencyDecimalSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var currencyGroupSizes: System_Int32_Array? /* System.Int32[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currencyGroupSizes_set(_ value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var numberGroupSizes: System_Int32_Array? /* System.Int32[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func numberGroupSizes_set(_ value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentGroupSizes: System_Int32_Array? /* System.Int32[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentGroupSizes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Int32_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func percentGroupSizes_set(_ value: System_Int32_Array? /* System.Int32[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentGroupSizes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currencyGroupSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currencyGroupSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currencySymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currencySymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var currentInfo: System_Globalization_NumberFormatInfo? /* System.Globalization.NumberFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrentInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_NumberFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var naNSymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NaNSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func naNSymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NaNSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currencyNegativePattern: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func currencyNegativePattern_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var numberNegativePattern: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func numberNegativePattern_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentPositivePattern: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentPositivePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func percentPositivePattern_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentPositivePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentNegativePattern: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentNegativePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func percentNegativePattern_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentNegativePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var negativeInfinitySymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func negativeInfinitySymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var negativeSign: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NegativeSign_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func negativeSign_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NegativeSign_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var numberDecimalDigits: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func numberDecimalDigits_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var numberDecimalSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func numberDecimalSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var numberGroupSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func numberGroupSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currencyPositivePattern: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func currencyPositivePattern_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var positiveInfinitySymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func positiveInfinitySymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var positiveSign: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PositiveSign_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func positiveSign_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PositiveSign_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentDecimalDigits: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func percentDecimalDigits_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentDecimalSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func percentDecimalSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentGroupSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func percentGroupSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var percentSymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PercentSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func percentSymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PercentSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var perMilleSymbol: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_PerMilleSymbol_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func perMilleSymbol_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_PerMilleSymbol_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var nativeDigits: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_NativeDigits_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func nativeDigits_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_NativeDigits_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var digitSubstitution: System_Globalization_DigitShapes /* System.Globalization.DigitShapes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_NumberFormatInfo_DigitSubstitution_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_DigitShapes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func digitSubstitution_set(_ value: System_Globalization_DigitShapes /* System.Globalization.DigitShapes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_NumberFormatInfo_DigitSubstitution_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_NumberFormatInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_NumberFormatInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Globalization_DateTimeFormatInfo /* System.Globalization.DateTimeFormatInfo */: System_Object {
	public override class var typeName: String { get {
		"DateTimeFormatInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.DateTimeFormatInfo"
	}}

	public class func getInstance(_ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetInstance(providerC, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFormat(_ formatType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let formatTypeC = formatType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetFormat(self.__handle, formatTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEra(_ eraName: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let eraNameC = eraName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetEra(self.__handle, eraNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getEraName(_ era: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetEraName(self.__handle, era, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAbbreviatedEraName(_ era: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName(self.__handle, era, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAbbreviatedDayName(_ dayofweek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayofweekC = dayofweek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName(self.__handle, dayofweekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getShortestDayName(_ dayOfWeek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayOfWeekC = dayOfWeek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetShortestDayName(self.__handle, dayOfWeekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAllDateTimePatterns() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAllDateTimePatterns(_ format: DNChar /* System.Char */) throws -> System_String_Array? /* System.String[] */ {
		let formatC = format.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_1(self.__handle, formatC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDayName(_ dayofweek: System_DayOfWeek /* System.DayOfWeek */) throws -> System_String? /* System.String */ {
		let dayofweekC = dayofweek.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetDayName(self.__handle, dayofweekC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getAbbreviatedMonthName(_ month: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName(self.__handle, month, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMonthName(_ month: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_GetMonthName(self.__handle, month, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ dtfi: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */) throws -> System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ {
		let dtfiC = dtfi?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ReadOnly(dtfiC, &__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setAllDateTimePatterns(_ patterns: System_String_Array? /* System.String[] */, _ format: DNChar /* System.Char */) throws {
		let patternsC = patterns?.__handle
		let formatC = format.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns(self.__handle, patternsC, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var invariantInfo: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_InvariantInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var currentInfo: System_Globalization_DateTimeFormatInfo? /* System.Globalization.DateTimeFormatInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_CurrentInfo_Get(&__exceptionC)
		
		let __returnValue = System_Globalization_DateTimeFormatInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var aMDesignator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AMDesignator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func aMDesignator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AMDesignator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var calendar: System_Globalization_Calendar? /* System.Globalization.Calendar */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_Calendar_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_Calendar(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func calendar_set(_ value: System_Globalization_Calendar? /* System.Globalization.Calendar */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_Calendar_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var dateSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_DateSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func dateSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_DateSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var firstDayOfWeek: System_DayOfWeek /* System.DayOfWeek */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DayOfWeek(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func firstDayOfWeek_set(_ value: System_DayOfWeek /* System.DayOfWeek */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var calendarWeekRule: System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CalendarWeekRule(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func calendarWeekRule_set(_ value: System_Globalization_CalendarWeekRule /* System.Globalization.CalendarWeekRule */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var fullDateTimePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func fullDateTimePattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var longDatePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_LongDatePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func longDatePattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_LongDatePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var longTimePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_LongTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func longTimePattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_LongTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var monthDayPattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func monthDayPattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var pMDesignator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_PMDesignator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func pMDesignator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_PMDesignator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var rFC1123Pattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var shortDatePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func shortDatePattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var shortTimePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func shortTimePattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var sortableDateTimePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var timeSeparator: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_TimeSeparator_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func timeSeparator_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_TimeSeparator_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var universalSortableDateTimePattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var yearMonthPattern: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func yearMonthPattern_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var abbreviatedDayNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func abbreviatedDayNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var shortestDayNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_ShortestDayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func shortestDayNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_ShortestDayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var dayNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_DayNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func dayNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_DayNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var abbreviatedMonthNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func abbreviatedMonthNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var monthNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func monthNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var nativeCalendarName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var abbreviatedMonthGenitiveNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func abbreviatedMonthGenitiveNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var monthGenitiveNames: System_String_Array? /* System.String[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func monthGenitiveNames_set(_ value: System_String_Array? /* System.String[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Globalization_DateTimeFormatInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Globalization_DateTimeFormatInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Globalization_Calendar_Array /* System.Globalization.Calendar[] */: System_Array {
	public override class var typeName: String { get {
		"Calendar[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Globalization.Calendar[]"
	}}

	
}























// Type "TState" was skipped. Reason: It has no full name.
public class System_Char_Array /* System.Char[] */: System_Array {
	public override class var typeName: String { get {
		"Char[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Char[]"
	}}

	
}










public class System_CharEnumerator /* System.CharEnumerator */: System_Object {
	public override class var typeName: String { get {
		"CharEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.CharEnumerator"
	}}

	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_CharEnumerator_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_CharEnumerator_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var current: DNChar /* System.Char */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_CharEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_CharEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_CharEnumerator_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_StringRuneEnumerator /* System.Text.StringRuneEnumerator */: System_ValueType {
	public override class var typeName: String { get {
		"StringRuneEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.StringRuneEnumerator"
	}}

	public func getEnumerator() throws -> System_Text_StringRuneEnumerator? /* System.Text.StringRuneEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringRuneEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var current: System_Text_Rune? /* System.Text.Rune */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringRuneEnumerator_Current_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Rune(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_StringRuneEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_StringRuneEnumerator_Destroy(self.__handle)
		
	}
	
	
}






public class System_Text_CompositeFormat /* System.Text.CompositeFormat */: System_Object {
	public override class var typeName: String { get {
		"CompositeFormat"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.CompositeFormat"
	}}

	public class func parse(_ format: System_String? /* System.String */) throws -> System_Text_CompositeFormat? /* System.Text.CompositeFormat */ {
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_Parse(formatC, &__exceptionC)
		
		let __returnValue = System_Text_CompositeFormat(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryParse(_ format: System_String? /* System.String */, _ compositeFormat: inout System_Text_CompositeFormat? /* System.Text.CompositeFormat */) throws -> Bool /* System.Boolean */ {
		let formatC = format?.__handle
		var compositeFormatC = compositeFormat?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_TryParse(formatC, &compositeFormatC, &__exceptionC)
		
		compositeFormat = System_Text_CompositeFormat(handle: compositeFormatC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var format: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_CompositeFormat_Format_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_CompositeFormat_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_CompositeFormat_Destroy(self.__handle)
		
	}
	
	
}



// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
public class System_Text_Encoding /* System.Text.Encoding */: System_Object {
	public override class var typeName: String { get {
		"Encoding"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.Encoding"
	}}

	public class func convert(_ srcEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ dstEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let srcEncodingC = srcEncoding?.__handle
		let dstEncodingC = dstEncoding?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Convert(srcEncodingC, dstEncodingC, bytesC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func convert(_ srcEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ dstEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let srcEncodingC = srcEncoding?.__handle
		let dstEncodingC = dstEncoding?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Convert_1(srcEncodingC, dstEncodingC, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func registerProvider(_ provider: System_Text_EncodingProvider? /* System.Text.EncodingProvider */) throws {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_RegisterProvider(providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getEncoding(_ codepage: Int32 /* System.Int32 */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding(codepage, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getEncoding(_ codepage: Int32 /* System.Int32 */, _ encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, _ decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_1(codepage, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getEncoding(_ name: System_String? /* System.String */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_2(nameC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getEncoding(_ name: System_String? /* System.String */, _ encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, _ decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoding_3(nameC, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getEncodings() throws -> System_Text_EncodingInfo_Array? /* System.Text.EncodingInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncodings(&__exceptionC)
		
		let __returnValue = System_Text_EncodingInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getPreamble() throws -> System_Byte_Array? /* System.Byte[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetPreamble(self.__handle, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getByteCount(_ chars: System_Char_Array? /* System.Char[] */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount(self.__handle, charsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getByteCount(_ s: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_1(self.__handle, sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getByteCount(_ chars: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_2(self.__handle, charsC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getByteCount(_ s: System_String? /* System.String */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetByteCount_3(self.__handle, sC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getBytes(_ chars: System_Char_Array? /* System.Char[] */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes(self.__handle, charsC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBytes(_ chars: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_1(self.__handle, charsC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBytes(_ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_2(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getBytes(_ s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_3(self.__handle, sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBytes(_ s: System_String? /* System.String */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_4(self.__handle, sC, index, count, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getBytes(_ s: System_String? /* System.String */, _ charIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let sC = s?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetBytes_5(self.__handle, sC, charIndex, charCount, bytesC, byteIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCharCount(_ bytes: System_Byte_Array? /* System.Byte[] */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetCharCount(self.__handle, bytesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCharCount(_ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetCharCount_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getChars(_ bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_Char_Array? /* System.Char[] */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars(self.__handle, bytesC, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getChars(_ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Char_Array? /* System.Char[] */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getChars(_ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ byteCount: Int32 /* System.Int32 */, _ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetChars_2(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isAlwaysNormalized() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsAlwaysNormalized(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isAlwaysNormalized(_ form: System_Text_NormalizationForm /* System.Text.NormalizationForm */) throws -> Bool /* System.Boolean */ {
		let formC = form.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsAlwaysNormalized_1(self.__handle, formC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getDecoder() throws -> System_Text_Decoder? /* System.Text.Decoder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetDecoder(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Decoder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEncoder() throws -> System_Text_Encoder? /* System.Text.Encoder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetEncoder(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getMaxByteCount(_ charCount: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetMaxByteCount(self.__handle, charCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getMaxCharCount(_ byteCount: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetMaxCharCount(self.__handle, byteCount, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getString(_ bytes: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetString(self.__handle, bytesC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getString(_ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetString_1(self.__handle, bytesC, index, count, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func createTranscodingStream(_ innerStream: System_IO_Stream? /* System.IO.Stream */, _ innerStreamEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ outerStreamEncoding: System_Text_Encoding? /* System.Text.Encoding */, _ leaveOpen: Bool /* System.Boolean */) throws -> System_IO_Stream? /* System.IO.Stream */ {
		let innerStreamC = innerStream?.__handle
		let innerStreamEncodingC = innerStreamEncoding?.__handle
		let outerStreamEncodingC = outerStreamEncoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_CreateTranscodingStream(innerStreamC, innerStreamEncodingC, outerStreamEncodingC, leaveOpen, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var `default`: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Default_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var bodyName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_BodyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var encodingName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_EncodingName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var headerName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_HeaderName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var webName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_WebName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var windowsCodePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_WindowsCodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isBrowserDisplay: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsBrowserDisplay_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isBrowserSave: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsBrowserSave_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isMailNewsDisplay: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsMailNewsDisplay_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isMailNewsSave: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsMailNewsSave_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSingleByte: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsSingleByte_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_EncoderFallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func encoderFallback_set(_ value: System_Text_EncoderFallback? /* System.Text.EncoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_EncoderFallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_DecoderFallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func decoderFallback_set(_ value: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoding_DecoderFallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var aSCII: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_ASCII_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var latin1: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Latin1_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var codePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_CodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var unicode: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_Unicode_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var bigEndianUnicode: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_BigEndianUnicode_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var uTF7: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF7_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var uTF8: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF8_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var uTF32: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoding_UTF32_Get(&__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_Encoding_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_Encoding_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_EncodingProvider /* System.Text.EncodingProvider */: System_Object {
	public override class var typeName: String { get {
		"EncodingProvider"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.EncodingProvider"
	}}

	public func getEncoding(_ name: System_String? /* System.String */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEncoding(_ codepage: Int32 /* System.Int32 */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_1(self.__handle, codepage, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEncoding(_ name: System_String? /* System.String */, _ encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, _ decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let nameC = name?.__handle
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_2(self.__handle, nameC, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEncoding(_ codepage: Int32 /* System.Int32 */, _ encoderFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */, _ decoderFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		let encoderFallbackC = encoderFallback?.__handle
		let decoderFallbackC = decoderFallback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncoding_3(self.__handle, codepage, encoderFallbackC, decoderFallbackC, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEncodings() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.Text.EncodingInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingProvider_GetEncodings(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_EncodingProvider_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_EncodingProvider_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_EncoderFallback /* System.Text.EncoderFallback */: System_Object {
	public override class var typeName: String { get {
		"EncoderFallback"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.EncoderFallback"
	}}

	public func createFallbackBuffer() throws -> System_Text_EncoderFallbackBuffer? /* System.Text.EncoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_CreateFallbackBuffer(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var replacementFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_ReplacementFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var exceptionFallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_ExceptionFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var maxCharCount: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallback_MaxCharCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_EncoderFallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_EncoderFallback_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_EncoderFallbackBuffer /* System.Text.EncoderFallbackBuffer */: System_Object {
	public override class var typeName: String { get {
		"EncoderFallbackBuffer"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.EncoderFallbackBuffer"
	}}

	public func fallback(_ charUnknown: DNChar /* System.Char */, _ index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let charUnknownC = charUnknown.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Fallback(self.__handle, charUnknownC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func fallback(_ charUnknownHigh: DNChar /* System.Char */, _ charUnknownLow: DNChar /* System.Char */, _ index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let charUnknownHighC = charUnknownHigh.cValue
		let charUnknownLowC = charUnknownLow.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Fallback_1(self.__handle, charUnknownHighC, charUnknownLowC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getNextChar() throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_GetNextChar(self.__handle, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func movePrevious() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_MovePrevious(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_EncoderFallbackBuffer_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var remaining: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncoderFallbackBuffer_Remaining_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_EncoderFallbackBuffer_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_EncoderFallbackBuffer_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_DecoderFallback /* System.Text.DecoderFallback */: System_Object {
	public override class var typeName: String { get {
		"DecoderFallback"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.DecoderFallback"
	}}

	public func createFallbackBuffer() throws -> System_Text_DecoderFallbackBuffer? /* System.Text.DecoderFallbackBuffer */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_CreateFallbackBuffer(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var replacementFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_ReplacementFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var exceptionFallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_ExceptionFallback_Get(&__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var maxCharCount: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallback_MaxCharCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_DecoderFallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_DecoderFallback_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_DecoderFallbackBuffer /* System.Text.DecoderFallbackBuffer */: System_Object {
	public override class var typeName: String { get {
		"DecoderFallbackBuffer"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.DecoderFallbackBuffer"
	}}

	public func fallback(_ bytesUnknown: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		let bytesUnknownC = bytesUnknown?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_Fallback(self.__handle, bytesUnknownC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getNextChar() throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_GetNextChar(self.__handle, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func movePrevious() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_MovePrevious(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_DecoderFallbackBuffer_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var remaining: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_DecoderFallbackBuffer_Remaining_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_DecoderFallbackBuffer_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_DecoderFallbackBuffer_Destroy(self.__handle)
		
	}
	
	
}






public class System_Text_EncodingInfo /* System.Text.EncodingInfo */: System_Object {
	public override class var typeName: String { get {
		"EncodingInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.EncodingInfo"
	}}

	public func getEncoding() throws -> System_Text_Encoding? /* System.Text.Encoding */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_GetEncoding(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Equals(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ provider: System_Text_EncodingProvider? /* System.Text.EncodingProvider */, _ codePage: Int32 /* System.Int32 */, _ name: System_String? /* System.String */, _ displayName: System_String? /* System.String */) throws {
		let providerC = provider?.__handle
		let nameC = name?.__handle
		let displayNameC = displayName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Create(providerC, codePage, nameC, displayNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var codePage: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_CodePage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var displayName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_EncodingInfo_DisplayName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_EncodingInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_EncodingInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_EncodingInfo_Array /* System.Text.EncodingInfo[] */: System_Array {
	public override class var typeName: String { get {
		"EncodingInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.EncodingInfo[]"
	}}

	
}











public class System_Text_Decoder /* System.Text.Decoder */: System_Object {
	public override class var typeName: String { get {
		"Decoder"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.Decoder"
	}}

	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getCharCount(_ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetCharCount(self.__handle, bytesC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCharCount(_ bytes: System_Byte_Array? /* System.Byte[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetCharCount_1(self.__handle, bytesC, index, count, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getChars(_ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ byteCount: Int32 /* System.Int32 */, _ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetChars(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getChars(_ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ byteCount: Int32 /* System.Int32 */, _ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_GetChars_1(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func convert(_ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ byteCount: Int32 /* System.Int32 */, _ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */, _ bytesUsed: inout Int32 /* System.Int32 */, _ charsUsed: inout Int32 /* System.Int32 */, _ completed: inout Bool /* System.Boolean */) throws {
		let bytesC = bytes?.__handle
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Convert(self.__handle, bytesC, byteIndex, byteCount, charsC, charIndex, charCount, flush, &bytesUsed, &charsUsed, &completed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var fallback: System_Text_DecoderFallback? /* System.Text.DecoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_Fallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func fallback_set(_ value: System_Text_DecoderFallback? /* System.Text.DecoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Decoder_Fallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var fallbackBuffer: System_Text_DecoderFallbackBuffer? /* System.Text.DecoderFallbackBuffer */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Decoder_FallbackBuffer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_DecoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_Decoder_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_Decoder_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_Encoder /* System.Text.Encoder */: System_Object {
	public override class var typeName: String { get {
		"Encoder"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.Encoder"
	}}

	public func reset() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Reset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getByteCount(_ chars: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_GetByteCount(self.__handle, charsC, index, count, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getBytes(_ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_GetBytes(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, flush, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func convert(_ chars: System_Char_Array? /* System.Char[] */, _ charIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ byteIndex: Int32 /* System.Int32 */, _ byteCount: Int32 /* System.Int32 */, _ flush: Bool /* System.Boolean */, _ charsUsed: inout Int32 /* System.Int32 */, _ bytesUsed: inout Int32 /* System.Int32 */, _ completed: inout Bool /* System.Boolean */) throws {
		let charsC = chars?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Convert(self.__handle, charsC, charIndex, charCount, bytesC, byteIndex, byteCount, flush, &charsUsed, &bytesUsed, &completed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var fallback: System_Text_EncoderFallback? /* System.Text.EncoderFallback */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_Fallback_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallback(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func fallback_set(_ value: System_Text_EncoderFallback? /* System.Text.EncoderFallback */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_Encoder_Fallback_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var fallbackBuffer: System_Text_EncoderFallbackBuffer? /* System.Text.EncoderFallbackBuffer */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_Encoder_FallbackBuffer_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_EncoderFallbackBuffer(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_Encoder_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_Encoder_Destroy(self.__handle)
		
	}
	
	
}


// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum[]" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.


















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.








// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.


public class System_Int64_Array /* System.Int64[] */: System_Array {
	public override class var typeName: String { get {
		"Int64[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Int64[]"
	}}

	
}














// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TOutput[]" was skipped. Reason: It has no full name.
// Type "TOutput" was skipped. Reason: It has no full name.

// Type "TInput[]" was skipped. Reason: It has no full name.
// Type "TInput" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TKey[]" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

// Type "TValue[]" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.













public class System_Runtime_InteropServices_StructLayoutAttribute /* System.Runtime.InteropServices.StructLayoutAttribute */: System_Attribute {
	public override class var typeName: String { get {
		"StructLayoutAttribute"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.InteropServices.StructLayoutAttribute"
	}}

	public convenience init?(_ layoutKind: System_Runtime_InteropServices_LayoutKind /* System.Runtime.InteropServices.LayoutKind */) throws {
		let layoutKindC = layoutKind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Create(layoutKindC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ layoutKind: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Create_1(layoutKind, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var value: System_Runtime_InteropServices_LayoutKind /* System.Runtime.InteropServices.LayoutKind */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Runtime_InteropServices_LayoutKind(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var pack: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get(self.__handle)
		
		return __returnValueC
		
	}}
	public func pack_set(_ value: Int32 /* System.Int32 */) {
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set(self.__handle, value)
		
		
	}
	
	
	public var size: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_Size_Get(self.__handle)
		
		return __returnValueC
		
	}}
	public func size_set(_ value: Int32 /* System.Int32 */) {
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_Size_Set(self.__handle, value)
		
		
	}
	
	
	public var charSet: System_Runtime_InteropServices_CharSet /* System.Runtime.InteropServices.CharSet */ { get {
		
		
		let __returnValueC = System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get(self.__handle)
		
		let __returnValue = System_Runtime_InteropServices_CharSet(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	public func charSet_set(_ value: System_Runtime_InteropServices_CharSet /* System.Runtime.InteropServices.CharSet */) {
		let valueC = value.cValue
		
		
		System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set(self.__handle, valueC)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_StructLayoutAttribute_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_InteropServices_StructLayoutAttribute_Destroy(self.__handle)
		
	}
	
	
}


public class System_Attribute /* System.Attribute */: System_Object {
	public override class var typeName: String { get {
		"Attribute"
	}}

	public override class var fullTypeName: String { get {
		"System.Attribute"
	}}

	public class func getCustomAttributes(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_1(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_2(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_3(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isDefined(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_1(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_1(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_2(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_4(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_5(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_6(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_7(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isDefined(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_2(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_3(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_3(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_ParameterInfo? /* System.Reflection.ParameterInfo */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_4(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_8(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Module? /* System.Reflection.Module */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_9(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_10(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_11(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isDefined(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_4(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_5(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_5(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_Module? /* System.Reflection.Module */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_6(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_12(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_13(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_14(elementC, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttributes(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute_Array? /* System.Attribute[] */ {
		let elementC = element?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttributes_15(elementC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isDefined(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_6(elementC, attributeTypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isDefined(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefined_7(elementC, attributeTypeC, inherit, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_7(elementC, attributeTypeC, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCustomAttribute(_ element: System_Reflection_Assembly? /* System.Reflection.Assembly */, _ attributeType: System_Type? /* System.Type */, _ inherit: Bool /* System.Boolean */) throws -> System_Attribute? /* System.Attribute */ {
		let elementC = element?.__handle
		let attributeTypeC = attributeType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetCustomAttribute_8(elementC, attributeTypeC, inherit, &__exceptionC)
		
		let __returnValue = System_Attribute(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func match(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_Match(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isDefaultAttribute() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_IsDefaultAttribute(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var typeId: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Attribute_TypeId_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Attribute_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Attribute_Destroy(self.__handle)
		
	}
	
	
}


public class System_Attribute_Array /* System.Attribute[] */: System_Array {
	public override class var typeName: String { get {
		"Attribute[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Attribute[]"
	}}

	
}















public class System_Reflection_ConstructorInfo_Array /* System.Reflection.ConstructorInfo[] */: System_Array {
	public override class var typeName: String { get {
		"ConstructorInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.ConstructorInfo[]"
	}}

	
}











public class System_Reflection_EventInfo_Array /* System.Reflection.EventInfo[] */: System_Array {
	public override class var typeName: String { get {
		"EventInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.EventInfo[]"
	}}

	
}











public class System_Reflection_InterfaceMapping /* System.Reflection.InterfaceMapping */: System_ValueType {
	public override class var typeName: String { get {
		"InterfaceMapping"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.InterfaceMapping"
	}}

	public var targetType: System_Type? /* System.Type */ { get {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_TargetType_Get(self.__handle)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		return __returnValue
		
	}}
	public func targetType_set(_ value: System_Type? /* System.Type */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_TargetType_Set(self.__handle, valueC)
		
		
	}
	
	
	public var interfaceType: System_Type? /* System.Type */ { get {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_InterfaceType_Get(self.__handle)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		return __returnValue
		
	}}
	public func interfaceType_set(_ value: System_Type? /* System.Type */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_InterfaceType_Set(self.__handle, valueC)
		
		
	}
	
	
	public var targetMethods: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ { get {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_TargetMethods_Get(self.__handle)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		return __returnValue
		
	}}
	public func targetMethods_set(_ value: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_TargetMethods_Set(self.__handle, valueC)
		
		
	}
	
	
	public var interfaceMethods: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */ { get {
		
		
		let __returnValueC = System_Reflection_InterfaceMapping_InterfaceMethods_Get(self.__handle)
		
		let __returnValue = System_Reflection_MethodInfo_Array(handle: __returnValueC)
		
		return __returnValue
		
	}}
	public func interfaceMethods_set(_ value: System_Reflection_MethodInfo_Array? /* System.Reflection.MethodInfo[] */) {
		let valueC = value?.__handle
		
		
		System_Reflection_InterfaceMapping_InterfaceMethods_Set(self.__handle, valueC)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_InterfaceMapping_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_InterfaceMapping_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_InteropServices_Marshal /* System.Runtime.InteropServices.Marshal */: System_Object {
	public override class var typeName: String { get {
		"Marshal"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.InteropServices.Marshal"
	}}

	public class func offsetOf(_ t: System_Type? /* System.Type */, _ fieldName: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let tC = t?.__handle
		let fieldNameC = fieldName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_OffsetOf(tC, fieldNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readByte(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt16(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt32(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt64(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func writeByte(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */, _ val: UInt8 /* System.Byte */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt32(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */, _ val: Int32 /* System.Int32 */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt64(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */, _ val: Int64 /* System.Int64 */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastPInvokeError() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastPInvokeError(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func setLastPInvokeError(_ error: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_SetLastPInvokeError(error, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getExceptionPointers() throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionPointers(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getExceptionCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionCode(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func structureToPtr(_ structure: System_Object? /* System.Object */, _ ptr: Int /* System.IntPtr */, _ fDeleteOld: Bool /* System.Boolean */) throws {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_StructureToPtr(structureC, ptr, fDeleteOld, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func destroyStructure(_ ptr: Int /* System.IntPtr */, _ structuretype: System_Type? /* System.Type */) throws {
		let structuretypeC = structuretype?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_DestroyStructure(ptr, structuretypeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func allocHGlobal(_ cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocHGlobal(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func ptrToStringAnsi(_ ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAnsi(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringAnsi(_ ptr: Int /* System.IntPtr */, _ len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAnsi_1(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringUni(_ ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUni(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringUni(_ ptr: Int /* System.IntPtr */, _ len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUni_1(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringUTF8(_ ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUTF8(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringUTF8(_ ptr: Int /* System.IntPtr */, _ byteLen: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringUTF8_1(ptr, byteLen, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func sizeOf(_ structure: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf(structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sizeOf(_ T: System_Type /* System.Type */, _ structure: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_A1(TC, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sizeOf(_ t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_1(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sizeOf(_ T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SizeOf_A1_1(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func queryInterface(_ pUnk: Int /* System.IntPtr */, _ iid: inout System_Guid? /* System.Guid */, _ ppv: inout Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		var iidC = iid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_QueryInterface(pUnk, &iidC, &ppv, &__exceptionC)
		
		iid = System_Guid(handle: iidC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func addRef(_ pUnk: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AddRef(pUnk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func release(_ pUnk: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_Release(pUnk, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func unsafeAddrOfPinnedArrayElement(_ arr: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let arrC = arr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement(arrC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func unsafeAddrOfPinnedArrayElement(_ T: System_Type /* System.Type */, _ arr: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let arrC = arr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_A1(TC, arrC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func offsetOf(_ T: System_Type /* System.Type */, _ fieldName: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let fieldNameC = fieldName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_OffsetOf_A1(TC, fieldNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func copy(_ source: System_Int32_Array? /* System.Int32[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_1(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Int16_Array? /* System.Int16[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_2(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Int64_Array? /* System.Int64[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_3(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Single_Array? /* System.Single[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_4(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Double_Array? /* System.Double[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_5(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_Byte_Array? /* System.Byte[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_6(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: System_IntPtr_Array? /* System.IntPtr[] */, _ startIndex: Int32 /* System.Int32 */, _ destination: Int /* System.IntPtr */, _ length: Int32 /* System.Int32 */) throws {
		let sourceC = source?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_7(sourceC, startIndex, destination, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Int32_Array? /* System.Int32[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_8(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_9(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Int16_Array? /* System.Int16[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_10(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Int64_Array? /* System.Int64[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_11(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Single_Array? /* System.Single[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_12(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Double_Array? /* System.Double[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_13(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_Byte_Array? /* System.Byte[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_14(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ source: Int /* System.IntPtr */, _ destination: System_IntPtr_Array? /* System.IntPtr[] */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Copy_15(source, destinationC, startIndex, length, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func readByte(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readByte(_ ptr: Int /* System.IntPtr */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadByte_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt16(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt16(_ ptr: Int /* System.IntPtr */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt16_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt32(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt32(_ ptr: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt32_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readIntPtr(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr(ptrC, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readIntPtr(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readIntPtr(_ ptr: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadIntPtr_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt64(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64_1(ptr, ofs, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readInt64(_ ptr: Int /* System.IntPtr */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReadInt64_2(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func writeByte(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */, _ val: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeByte(_ ptr: Int /* System.IntPtr */, _ val: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteByte_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt32(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */, _ val: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt32(_ ptr: Int /* System.IntPtr */, _ val: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt32_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeIntPtr(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */, _ val: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeIntPtr(_ ptr: System_Object? /* System.Object */, _ ofs: Int32 /* System.Int32 */, _ val: Int /* System.IntPtr */) throws {
		let ptrC = ptr?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr_1(ptrC, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeIntPtr(_ ptr: Int /* System.IntPtr */, _ val: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteIntPtr_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt64(_ ptr: Int /* System.IntPtr */, _ ofs: Int32 /* System.Int32 */, _ val: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64_1(ptr, ofs, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeInt64(_ ptr: Int /* System.IntPtr */, _ val: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_WriteInt64_2(ptr, val, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func prelink(_ m: System_Reflection_MethodInfo? /* System.Reflection.MethodInfo */) throws {
		let mC = m?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_Prelink(mC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func prelinkAll(_ c: System_Type? /* System.Type */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PrelinkAll(cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func structureToPtr(_ T: System_Type /* System.Type */, _ structure: System_Object? /* System.Object */, _ ptr: Int /* System.IntPtr */, _ fDeleteOld: Bool /* System.Boolean */) throws {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_StructureToPtr_A1(TC, structureC, ptr, fDeleteOld, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func ptrToStructure(_ ptr: Int /* System.IntPtr */, _ structureType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let structureTypeC = structureType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStructure(ptr, structureTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStructure(_ ptr: Int /* System.IntPtr */, _ structure: System_Object? /* System.Object */) throws {
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PtrToStructure_1(ptr, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func ptrToStructure(_ T: System_Type /* System.Type */, _ ptr: Int /* System.IntPtr */, _ structure: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let structureC = structure?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_PtrToStructure_A1(TC, ptr, structureC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func ptrToStructure(_ T: System_Type /* System.Type */, _ ptr: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStructure_A1_1(TC, ptr, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func destroyStructure(_ T: System_Type /* System.Type */, _ ptr: Int /* System.IntPtr */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_DestroyStructure_A1(TC, ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getHINSTANCE(_ m: System_Reflection_Module? /* System.Reflection.Module */) throws -> Int /* System.IntPtr */ {
		let mC = m?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHINSTANCE(mC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getExceptionForHR(_ errorCode: Int32 /* System.Int32 */) throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionForHR(errorCode, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getExceptionForHR(_ errorCode: Int32 /* System.Int32 */, _ errorInfo: Int /* System.IntPtr */) throws -> System_Exception? /* System.Exception */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetExceptionForHR_1(errorCode, errorInfo, &__exceptionC)
		
		let __returnValue = System_Exception(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func throwExceptionForHR(_ errorCode: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ThrowExceptionForHR(errorCode, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func throwExceptionForHR(_ errorCode: Int32 /* System.Int32 */, _ errorInfo: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_1(errorCode, errorInfo, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func secureStringToBSTR(_ s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToBSTR(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func secureStringToCoTaskMemAnsi(_ s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func secureStringToCoTaskMemUnicode(_ s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func secureStringToGlobalAllocAnsi(_ s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func secureStringToGlobalAllocUnicode(_ s: System_Security_SecureString? /* System.Security.SecureString */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToHGlobalAnsi(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToHGlobalUni(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalUni(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToCoTaskMemUni(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToCoTaskMemUTF8(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemUTF8(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToCoTaskMemAnsi(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func generateGuidForType(_ type: System_Type? /* System.Type */) throws -> System_Guid? /* System.Guid */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GenerateGuidForType(typeC, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func generateProgIdForType(_ type: System_Type? /* System.Type */) throws -> System_String? /* System.String */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GenerateProgIdForType(typeC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDelegateForFunctionPointer(_ ptr: Int /* System.IntPtr */, _ t: System_Type? /* System.Type */) throws -> System_Delegate? /* System.Delegate */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer(ptr, tC, &__exceptionC)
		
		let __returnValue = System_Delegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDelegateForFunctionPointer(_ TDelegate: System_Type /* System.Type */, _ ptr: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TDelegateC = TDelegate.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_A1(TDelegateC, ptr, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFunctionPointerForDelegate(_ d: System_Delegate? /* System.Delegate */) throws -> Int /* System.IntPtr */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getFunctionPointerForDelegate(_ TDelegate: System_Type /* System.Type */, _ d: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TDelegateC = TDelegate.__handle
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_A1(TDelegateC, dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getHRForLastWin32Error() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func zeroFreeBSTR(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeBSTR(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func zeroFreeCoTaskMemAnsi(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func zeroFreeCoTaskMemUnicode(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func zeroFreeCoTaskMemUTF8(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUTF8(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func zeroFreeGlobalAllocAnsi(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func zeroFreeGlobalAllocUnicode(_ s: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode(s, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func stringToBSTR(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToBSTR(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func ptrToStringBSTR(_ ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringBSTR(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTypeFromCLSID(_ clsid: System_Guid? /* System.Guid */) throws -> System_Type? /* System.Type */ {
		let clsidC = clsid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetTypeFromCLSID(clsidC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func initHandle(_ safeHandle: System_Runtime_InteropServices_SafeHandle? /* System.Runtime.InteropServices.SafeHandle */, _ handle: Int /* System.IntPtr */) throws {
		let safeHandleC = safeHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_InitHandle(safeHandleC, handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastWin32Error() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastWin32Error(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getLastPInvokeErrorMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastPInvokeErrorMessage(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getHRForException(_ e: System_Exception? /* System.Exception */) throws -> Int32 /* System.Int32 */ {
		let eC = e?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetHRForException(eC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func areComObjectsAvailableForCleanup() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func createAggregatedObject(_ pOuter: Int /* System.IntPtr */, _ o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateAggregatedObject(pOuter, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bindToMoniker(_ monikerName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let monikerNameC = monikerName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_BindToMoniker(monikerNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func cleanupUnusedObjectsInCurrentContext() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func createAggregatedObject(_ T: System_Type /* System.Type */, _ pOuter: Int /* System.IntPtr */, _ o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateAggregatedObject_A1(TC, pOuter, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func createWrapperOfType(_ o: System_Object? /* System.Object */, _ t: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let oC = o?.__handle
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateWrapperOfType(oC, tC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createWrapperOfType(_ T: System_Type /* System.Type */, _ TWrapper: System_Type /* System.Type */, _ o: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let TWrapperC = TWrapper.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_CreateWrapperOfType_A2(TC, TWrapperC, oC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func changeWrapperHandleStrength(_ otp: System_Object? /* System.Object */, _ fIsWeak: Bool /* System.Boolean */) throws {
		let otpC = otp?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength(otpC, fIsWeak, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func finalReleaseComObject(_ o: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_FinalReleaseComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getComInterfaceForObject(_ o: System_Object? /* System.Object */, _ T: System_Type? /* System.Type */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		let TC = T?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject(oC, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getComInterfaceForObject(_ o: System_Object? /* System.Object */, _ T: System_Type? /* System.Type */, _ mode: System_Runtime_InteropServices_CustomQueryInterfaceMode /* System.Runtime.InteropServices.CustomQueryInterfaceMode */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		let TC = T?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_1(oC, TC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getComInterfaceForObject(_ T: System_Type /* System.Type */, _ TInterface: System_Type /* System.Type */, _ o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let TC = T.__handle
		let TInterfaceC = TInterface.__handle
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_A2(TC, TInterfaceC, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getComObjectData(_ obj: System_Object? /* System.Object */, _ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let objC = obj?.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetComObjectData(objC, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getIDispatchForObject(_ o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetIDispatchForObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getIUnknownForObject(_ o: System_Object? /* System.Object */) throws -> Int /* System.IntPtr */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetIUnknownForObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getNativeVariantForObject(_ obj: System_Object? /* System.Object */, _ pDstNativeVariant: Int /* System.IntPtr */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_GetNativeVariantForObject(objC, pDstNativeVariant, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getNativeVariantForObject(_ T: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */, _ pDstNativeVariant: Int /* System.IntPtr */) throws {
		let TC = T.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_A1(TC, objC, pDstNativeVariant, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getTypedObjectForIUnknown(_ pUnk: Int /* System.IntPtr */, _ t: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown(pUnk, tC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getObjectForIUnknown(_ pUnk: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForIUnknown(pUnk, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getObjectForNativeVariant(_ pSrcNativeVariant: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant(pSrcNativeVariant, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getObjectForNativeVariant(_ T: System_Type /* System.Type */, _ pSrcNativeVariant: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_A1(TC, pSrcNativeVariant, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getObjectsForNativeVariants(_ aSrcNativeVariant: Int /* System.IntPtr */, _ cVars: Int32 /* System.Int32 */) throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants(aSrcNativeVariant, cVars, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getObjectsForNativeVariants(_ T: System_Type /* System.Type */, _ aSrcNativeVariant: Int /* System.IntPtr */, _ cVars: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_A1(TC, aSrcNativeVariant, cVars, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getStartComSlot(_ t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetStartComSlot(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getEndComSlot(_ t: System_Type? /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetEndComSlot(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getUniqueObjectForIUnknown(_ unknown: Int /* System.IntPtr */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown(unknown, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isComObject(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_IsComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isTypeVisibleFromCom(_ t: System_Type? /* System.Type */) throws -> Bool /* System.Boolean */ {
		let tC = t?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom(tC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func releaseComObject(_ o: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReleaseComObject(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func setComObjectData(_ obj: System_Object? /* System.Object */, _ key: System_Object? /* System.Object */, _ data: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		let keyC = key?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SetComObjectData(objC, keyC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func ptrToStringAuto(_ ptr: Int /* System.IntPtr */, _ len: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAuto(ptr, len, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func ptrToStringAuto(_ ptr: Int /* System.IntPtr */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_PtrToStringAuto_1(ptr, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func stringToHGlobalAuto(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToHGlobalAuto(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func stringToCoTaskMemAuto(_ s: System_String? /* System.String */) throws -> Int /* System.IntPtr */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto(sC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func allocHGlobal(_ cb: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocHGlobal_1(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func freeHGlobal(_ hglobal: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeHGlobal(hglobal, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reAllocHGlobal(_ pv: Int /* System.IntPtr */, _ cb: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReAllocHGlobal(pv, cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func allocCoTaskMem(_ cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_AllocCoTaskMem(cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func freeCoTaskMem(_ ptr: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeCoTaskMem(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reAllocCoTaskMem(_ pv: Int /* System.IntPtr */, _ cb: Int32 /* System.Int32 */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem(pv, cb, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func freeBSTR(_ ptr: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_FreeBSTR(ptr, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastSystemError() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetLastSystemError(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func setLastSystemError(_ error: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Runtime_InteropServices_Marshal_SetLastSystemError(error, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getPInvokeErrorMessage(_ error: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_GetPInvokeErrorMessage(error, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var systemDefaultCharSize: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SystemDefaultCharSize_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var systemMaxDBCSCharSize: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_InteropServices_Marshal_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_InteropServices_Marshal_Destroy_1(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_Int16_Array /* System.Int16[] */: System_Array {
	public override class var typeName: String { get {
		"Int16[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Int16[]"
	}}

	
}














public class System_Single_Array /* System.Single[] */: System_Array {
	public override class var typeName: String { get {
		"Single[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Single[]"
	}}

	
}














public class System_Double_Array /* System.Double[] */: System_Array {
	public override class var typeName: String { get {
		"Double[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Double[]"
	}}

	
}














public class System_IntPtr_Array /* System.IntPtr[] */: System_Array {
	public override class var typeName: String { get {
		"IntPtr[]"
	}}

	public override class var fullTypeName: String { get {
		"System.IntPtr[]"
	}}

	
}














// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
public class System_Security_SecureString /* System.Security.SecureString */: System_Object {
	public override class var typeName: String { get {
		"SecureString"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.SecureString"
	}}

	public func appendChar(_ c: DNChar /* System.Char */) throws {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_AppendChar(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copy() throws -> System_Security_SecureString? /* System.Security.SecureString */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecureString(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func insertAt(_ index: Int32 /* System.Int32 */, _ c: DNChar /* System.Char */) throws {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_InsertAt(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func isReadOnly() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_IsReadOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func makeReadOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_MakeReadOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeAt(_ index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setAt(_ index: Int32 /* System.Int32 */, _ c: DNChar /* System.Char */) throws {
		let cC = c.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecureString_SetAt(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var length: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecureString_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_SecureString_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_SecureString_Destroy(self.__handle)
		
	}
	
	
}


// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "TWrapper" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_NullReferenceException /* System.NullReferenceException */: System_SystemException {
	public override class var typeName: String { get {
		"NullReferenceException"
	}}

	public override class var fullTypeName: String { get {
		"System.NullReferenceException"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_NullReferenceException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_NullReferenceException_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_NullReferenceException_Destroy(self.__handle)
		
	}
	
	
}


public class System_SystemException /* System.SystemException */: System_Exception {
	public override class var typeName: String { get {
		"SystemException"
	}}

	public override class var fullTypeName: String { get {
		"System.SystemException"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */) throws {
		let messageC = message?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create_1(messageC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ message: System_String? /* System.String */, _ innerException: System_Exception? /* System.Exception */) throws {
		let messageC = message?.__handle
		let innerExceptionC = innerException?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_SystemException_Create_2(messageC, innerExceptionC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_SystemException_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_SystemException_Destroy(self.__handle)
		
	}
	
	
}






















































// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
public class System_GC /* System.GC */: System_Object {
	public override class var typeName: String { get {
		"GC"
	}}

	public override class var fullTypeName: String { get {
		"System.GC"
	}}

	public class func getGCMemoryInfo() throws -> System_GCMemoryInfo? /* System.GCMemoryInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGCMemoryInfo(&__exceptionC)
		
		let __returnValue = System_GCMemoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getGCMemoryInfo(_ kind: System_GCKind /* System.GCKind */) throws -> System_GCMemoryInfo? /* System.GCMemoryInfo */ {
		let kindC = kind.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGCMemoryInfo_1(kindC, &__exceptionC)
		
		let __returnValue = System_GCMemoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func addMemoryPressure(_ bytesAllocated: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_AddMemoryPressure(bytesAllocated, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func removeMemoryPressure(_ bytesAllocated: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_RemoveMemoryPressure(bytesAllocated, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getGeneration(_ obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGeneration(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func collect(_ generation: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect(generation, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func collect() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func collect(_ generation: Int32 /* System.Int32 */, _ mode: System_GCCollectionMode /* System.GCCollectionMode */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_2(generation, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func collect(_ generation: Int32 /* System.Int32 */, _ mode: System_GCCollectionMode /* System.GCCollectionMode */, _ blocking: Bool /* System.Boolean */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_3(generation, modeC, blocking, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func collect(_ generation: Int32 /* System.Int32 */, _ mode: System_GCCollectionMode /* System.GCCollectionMode */, _ blocking: Bool /* System.Boolean */, _ compacting: Bool /* System.Boolean */) throws {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_Collect_4(generation, modeC, blocking, compacting, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func collectionCount(_ generation: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_CollectionCount(generation, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func keepAlive(_ obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_KeepAlive(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getGeneration(_ wo: System_WeakReference? /* System.WeakReference */) throws -> Int32 /* System.Int32 */ {
		let woC = wo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetGeneration_1(woC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func waitForPendingFinalizers() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_WaitForPendingFinalizers(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func suppressFinalize(_ obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_SuppressFinalize(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func reRegisterForFinalize(_ obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_ReRegisterForFinalize(objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getTotalMemory(_ forceFullCollection: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalMemory(forceFullCollection, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getAllocatedBytesForCurrentThread() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetAllocatedBytesForCurrentThread(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getTotalAllocatedBytes(_ precise: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalAllocatedBytes(precise, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func registerForFullGCNotification(_ maxGenerationThreshold: Int32 /* System.Int32 */, _ largeObjectHeapThreshold: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_RegisterForFullGCNotification(maxGenerationThreshold, largeObjectHeapThreshold, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func cancelFullGCNotification() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_CancelFullGCNotification(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func waitForFullGCApproach() throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach(&__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitForFullGCApproach(_ millisecondsTimeout: Int32 /* System.Int32 */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach_1(millisecondsTimeout, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitForFullGCComplete() throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete(&__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitForFullGCComplete(_ millisecondsTimeout: Int32 /* System.Int32 */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete_1(millisecondsTimeout, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func tryStartNoGCRegion(_ totalSize: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion(totalSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryStartNoGCRegion(_ totalSize: Int64 /* System.Int64 */, _ lohSize: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_1(totalSize, lohSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryStartNoGCRegion(_ totalSize: Int64 /* System.Int64 */, _ disallowFullBlockingGC: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_2(totalSize, disallowFullBlockingGC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tryStartNoGCRegion(_ totalSize: Int64 /* System.Int64 */, _ lohSize: Int64 /* System.Int64 */, _ disallowFullBlockingGC: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_TryStartNoGCRegion_3(totalSize, lohSize, disallowFullBlockingGC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func endNoGCRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_GC_EndNoGCRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func allocateUninitializedArray(_ T: System_Type /* System.Type */, _ length: Int32 /* System.Int32 */, _ pinned: Bool /* System.Boolean */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_AllocateUninitializedArray_A1(TC, length, pinned, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func allocateArray(_ T: System_Type /* System.Type */, _ length: Int32 /* System.Int32 */, _ pinned: Bool /* System.Boolean */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_AllocateArray_A1(TC, length, pinned, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTotalPauseDuration() throws -> System_TimeSpan? /* System.TimeSpan */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetTotalPauseDuration(&__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getConfigurationVariables() throws -> System_Collections_Generic_IReadOnlyDictionary_A2? /* System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_GetConfigurationVariables(&__exceptionC)
		
		let __returnValue = System_Collections_Generic_IReadOnlyDictionary_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitForFullGCApproach(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCApproach_2(timeoutC, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func waitForFullGCComplete(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_GCNotificationStatus /* System.GCNotificationStatus */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_WaitForFullGCComplete_2(timeoutC, &__exceptionC)
		
		let __returnValue = System_GCNotificationStatus(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var maxGeneration: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GC_MaxGeneration_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_GC_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_GC_Destroy(self.__handle)
		
	}
	
	
}


public class System_GCMemoryInfo /* System.GCMemoryInfo */: System_ValueType {
	public override class var typeName: String { get {
		"GCMemoryInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.GCMemoryInfo"
	}}

	public var highMemoryLoadThresholdBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_HighMemoryLoadThresholdBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var memoryLoadBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_MemoryLoadBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalAvailableMemoryBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_TotalAvailableMemoryBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var heapSizeBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_HeapSizeBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var fragmentedBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_FragmentedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var index: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Index_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var generation: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Generation_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var compacted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Compacted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var concurrent: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_Concurrent_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var totalCommittedBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_TotalCommittedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var promotedBytes: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PromotedBytes_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var pinnedObjectsCount: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PinnedObjectsCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var finalizationPendingCount: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_FinalizationPendingCount_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var pauseTimePercentage: Double /* System.Double */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_GCMemoryInfo_PauseTimePercentage_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_GCMemoryInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_GCMemoryInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_WeakReference /* System.WeakReference */: System_Object {
	public override class var typeName: String { get {
		"WeakReference"
	}}

	public override class var fullTypeName: String { get {
		"System.WeakReference"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_WeakReference_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ target: System_Object? /* System.Object */) throws {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Create(targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ target: System_Object? /* System.Object */, _ trackResurrection: Bool /* System.Boolean */) throws {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Create_1(targetC, trackResurrection, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var trackResurrection: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_TrackResurrection_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAlive: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_IsAlive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var target: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_WeakReference_Target_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func target_set(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_WeakReference_Target_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_WeakReference_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_WeakReference_Destroy(self.__handle)
		
	}
	
	
}


// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.











public class System_Math /* System.Math */: System_Object {
	public override class var typeName: String { get {
		"Math"
	}}

	public override class var fullTypeName: String { get {
		"System.Math"
	}}

	public class func acos(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Acos(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func acosh(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Acosh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func asin(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Asin(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func asinh(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Asinh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func atan(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atan(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func atanh(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atanh(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func atan2(_ y: Double /* System.Double */, _ x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Atan2(y, x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func cbrt(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cbrt(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func ceiling(_ a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Ceiling(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func cos(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cos(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func cosh(_ value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Cosh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func exp(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Exp(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func floor(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Floor(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fusedMultiplyAdd(_ x: Double /* System.Double */, _ y: Double /* System.Double */, _ z: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_FusedMultiplyAdd(x, y, z, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func log(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func log2(_ x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log2(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func log10(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log10(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func pow(_ x: Double /* System.Double */, _ y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Pow(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sin(_ a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sin(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sinh(_ value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sinh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sqrt(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sqrt(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tan(_ a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Tan(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func tanh(_ value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Tanh(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_5(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func abs(_ value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func abs(_ value: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Abs_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bigMul(_ a: Int32 /* System.Int32 */, _ b: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul(a, b, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bigMul(_ a: UInt64 /* System.UInt64 */, _ b: UInt64 /* System.UInt64 */, _ low: inout UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul_1(a, b, &low, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bigMul(_ a: Int64 /* System.Int64 */, _ b: Int64 /* System.Int64 */, _ low: inout Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BigMul_2(a, b, &low, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bitDecrement(_ x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BitDecrement(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func bitIncrement(_ x: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_BitIncrement(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func copySign(_ x: Double /* System.Double */, _ y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_CopySign(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func divRem(_ a: Int32 /* System.Int32 */, _ b: Int32 /* System.Int32 */, _ result: inout Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem(a, b, &result, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func divRem(_ a: Int64 /* System.Int64 */, _ b: Int64 /* System.Int64 */, _ result: inout Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_DivRem_1(a, b, &result, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func ceiling(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Ceiling_1(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func clamp(_ value: UInt8 /* System.Byte */, _ min: UInt8 /* System.Byte */, _ max: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: System_Decimal? /* System.Decimal */, _ min: System_Decimal? /* System.Decimal */, _ max: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let minC = min?.__handle
		let maxC = max?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_1(valueC, minC, maxC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func clamp(_ value: Double /* System.Double */, _ min: Double /* System.Double */, _ max: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_2(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Int16 /* System.Int16 */, _ min: Int16 /* System.Int16 */, _ max: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_3(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Int32 /* System.Int32 */, _ min: Int32 /* System.Int32 */, _ max: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_4(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Int64 /* System.Int64 */, _ min: Int64 /* System.Int64 */, _ max: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_5(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Int /* System.IntPtr */, _ min: Int /* System.IntPtr */, _ max: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_6(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Int8 /* System.SByte */, _ min: Int8 /* System.SByte */, _ max: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_7(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: Float /* System.Single */, _ min: Float /* System.Single */, _ max: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_8(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: UInt16 /* System.UInt16 */, _ min: UInt16 /* System.UInt16 */, _ max: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_9(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: UInt32 /* System.UInt32 */, _ min: UInt32 /* System.UInt32 */, _ max: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_10(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: UInt64 /* System.UInt64 */, _ min: UInt64 /* System.UInt64 */, _ max: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_11(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func clamp(_ value: UInt /* System.UIntPtr */, _ min: UInt /* System.UIntPtr */, _ max: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Clamp_12(value, min, max, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func floor(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Floor_1(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func iEEERemainder(_ x: Double /* System.Double */, _ y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_IEEERemainder(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func iLogB(_ x: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ILogB(x, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func log(_ a: Double /* System.Double */, _ newBase: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Log_1(a, newBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: UInt8 /* System.Byte */, _ val2: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: System_Decimal? /* System.Decimal */, _ val2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let val1C = val1?.__handle
		let val2C = val2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_1(val1C, val2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func max(_ val1: Double /* System.Double */, _ val2: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_2(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Int16 /* System.Int16 */, _ val2: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_3(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Int32 /* System.Int32 */, _ val2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_4(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Int64 /* System.Int64 */, _ val2: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_5(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Int /* System.IntPtr */, _ val2: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_6(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Int8 /* System.SByte */, _ val2: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_7(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: Float /* System.Single */, _ val2: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_8(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: UInt16 /* System.UInt16 */, _ val2: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_9(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: UInt32 /* System.UInt32 */, _ val2: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_10(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: UInt64 /* System.UInt64 */, _ val2: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_11(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func max(_ val1: UInt /* System.UIntPtr */, _ val2: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Max_12(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func maxMagnitude(_ x: Double /* System.Double */, _ y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_MaxMagnitude(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: UInt8 /* System.Byte */, _ val2: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: System_Decimal? /* System.Decimal */, _ val2: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let val1C = val1?.__handle
		let val2C = val2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_1(val1C, val2C, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func min(_ val1: Double /* System.Double */, _ val2: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_2(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Int16 /* System.Int16 */, _ val2: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_3(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Int32 /* System.Int32 */, _ val2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_4(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Int64 /* System.Int64 */, _ val2: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_5(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Int /* System.IntPtr */, _ val2: Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_6(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Int8 /* System.SByte */, _ val2: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_7(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: Float /* System.Single */, _ val2: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_8(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: UInt16 /* System.UInt16 */, _ val2: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_9(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: UInt32 /* System.UInt32 */, _ val2: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_10(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: UInt64 /* System.UInt64 */, _ val2: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_11(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func min(_ val1: UInt /* System.UIntPtr */, _ val2: UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Min_12(val1, val2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func minMagnitude(_ x: Double /* System.Double */, _ y: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_MinMagnitude(x, y, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func reciprocalEstimate(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ReciprocalEstimate(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func reciprocalSqrtEstimate(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ReciprocalSqrtEstimate(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ decimals: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_1(dC, decimals, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_2(dC, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ d: System_Decimal? /* System.Decimal */, _ decimals: Int32 /* System.Int32 */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_3(dC, decimals, modeC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func round(_ a: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_4(a, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func round(_ value: Double /* System.Double */, _ digits: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_5(value, digits, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func round(_ value: Double /* System.Double */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> Double /* System.Double */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_6(value, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func round(_ value: Double /* System.Double */, _ digits: Int32 /* System.Int32 */, _ mode: System_MidpointRounding /* System.MidpointRounding */) throws -> Double /* System.Double */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Round_7(value, digits, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_1(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Int16 /* System.Int16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Int64 /* System.Int64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Int /* System.IntPtr */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Int8 /* System.SByte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func sign(_ value: Float /* System.Single */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Sign_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func truncate(_ d: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Truncate(dC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func truncate(_ d: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_Truncate_1(d, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func scaleB(_ x: Double /* System.Double */, _ n: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Math_ScaleB(x, n, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class var e: Double /* System.Double */ { get {
		
		
		let __returnValueC = System_Math_E_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var pI: Double /* System.Double */ { get {
		
		
		let __returnValueC = System_Math_PI_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var tau: Double /* System.Double */ { get {
		
		
		let __returnValueC = System_Math_Tau_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Math_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Math_Destroy(self.__handle)
		
	}
	
	
}


public class System_Convert /* System.Convert */: System_Object {
	public override class var typeName: String { get {
		"Convert"
	}}

	public override class var fullTypeName: String { get {
		"System.Convert"
	}}

	public class func getTypeCode(_ value: System_Object? /* System.Object */) throws -> System_TypeCode /* System.TypeCode */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_GetTypeCode(valueC, &__exceptionC)
		
		let __returnValue = System_TypeCode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isDBNull(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_IsDBNull(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func changeType(_ value: System_Object? /* System.Object */, _ typeCode: System_TypeCode /* System.TypeCode */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType(valueC, typeCodeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func changeType(_ value: System_Object? /* System.Object */, _ typeCode: System_TypeCode /* System.TypeCode */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let typeCodeC = typeCode.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_1(valueC, typeCodeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func changeType(_ value: System_Object? /* System.Object */, _ conversionType: System_Type? /* System.Type */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let conversionTypeC = conversionType?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_2(valueC, conversionTypeC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func changeType(_ value: System_Object? /* System.Object */, _ conversionType: System_Type? /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Object? /* System.Object */ {
		let valueC = value?.__handle
		let conversionTypeC = conversionType?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ChangeType_3(valueC, conversionTypeC, providerC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBoolean(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Bool /* System.Boolean */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Int8 /* System.SByte */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: DNChar /* System.Char */) throws -> Bool /* System.Boolean */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_4(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: UInt8 /* System.Byte */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Int16 /* System.Int16 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: UInt16 /* System.UInt16 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: UInt64 /* System.UInt64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_12(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_13(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Float /* System.Single */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_14(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: Double /* System.Double */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_15(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: System_Decimal? /* System.Decimal */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBoolean(_ value: System_DateTime? /* System.DateTime */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBoolean_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toChar(_ value: System_Object? /* System.Object */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar(valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_1(valueC, providerC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Bool /* System.Boolean */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_2(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: DNChar /* System.Char */) throws -> DNChar /* System.Char */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_3(valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Int8 /* System.SByte */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_4(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: UInt8 /* System.Byte */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_5(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Int16 /* System.Int16 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_6(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: UInt16 /* System.UInt16 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_7(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Int32 /* System.Int32 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_8(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: UInt32 /* System.UInt32 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_9(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Int64 /* System.Int64 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_10(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: UInt64 /* System.UInt64 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_11(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: System_String? /* System.String */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_12(valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_13(valueC, providerC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Float /* System.Single */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_14(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: Double /* System.Double */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_15(value, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: System_Decimal? /* System.Decimal */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_16(valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toChar(_ value: System_DateTime? /* System.DateTime */) throws -> DNChar /* System.Char */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToChar_17(valueC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toSByte(_ value: System_Object? /* System.Object */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Bool /* System.Boolean */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: DNChar /* System.Char */) throws -> Int8 /* System.SByte */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_4(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: UInt8 /* System.Byte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Int16 /* System.Int16 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: UInt16 /* System.UInt16 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Int32 /* System.Int32 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: UInt32 /* System.UInt32 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Int64 /* System.Int64 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: UInt64 /* System.UInt64 */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Float /* System.Single */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: Double /* System.Double */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_Decimal? /* System.Decimal */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_String? /* System.String */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_DateTime? /* System.DateTime */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_Object? /* System.Object */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Bool /* System.Boolean */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: DNChar /* System.Char */) throws -> UInt8 /* System.Byte */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_4(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Int8 /* System.SByte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Int16 /* System.Int16 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: UInt16 /* System.UInt16 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: UInt32 /* System.UInt32 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Int64 /* System.Int64 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: UInt64 /* System.UInt64 */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Float /* System.Single */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: Double /* System.Double */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_Decimal? /* System.Decimal */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_String? /* System.String */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toByte(_ value: System_DateTime? /* System.DateTime */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_Object? /* System.Object */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Bool /* System.Boolean */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: DNChar /* System.Char */) throws -> Int16 /* System.Int16 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Int8 /* System.SByte */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: UInt8 /* System.Byte */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: UInt16 /* System.UInt16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: UInt32 /* System.UInt32 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Int64 /* System.Int64 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: UInt64 /* System.UInt64 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Float /* System.Single */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: Double /* System.Double */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_Decimal? /* System.Decimal */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_String? /* System.String */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_DateTime? /* System.DateTime */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_Object? /* System.Object */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Bool /* System.Boolean */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: DNChar /* System.Char */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Int8 /* System.SByte */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: UInt8 /* System.Byte */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Int16 /* System.Int16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Int32 /* System.Int32 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: UInt32 /* System.UInt32 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Int64 /* System.Int64 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: UInt64 /* System.UInt64 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Float /* System.Single */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: Double /* System.Double */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_Decimal? /* System.Decimal */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_String? /* System.String */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_DateTime? /* System.DateTime */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Bool /* System.Boolean */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: DNChar /* System.Char */) throws -> Int32 /* System.Int32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Int8 /* System.SByte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: UInt8 /* System.Byte */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Int16 /* System.Int16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: UInt16 /* System.UInt16 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: UInt32 /* System.UInt32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Int64 /* System.Int64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: UInt64 /* System.UInt64 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Float /* System.Single */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: Double /* System.Double */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_Decimal? /* System.Decimal */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_DateTime? /* System.DateTime */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_Object? /* System.Object */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Bool /* System.Boolean */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: DNChar /* System.Char */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Int8 /* System.SByte */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: UInt8 /* System.Byte */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Int16 /* System.Int16 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: UInt16 /* System.UInt16 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Int32 /* System.Int32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Int64 /* System.Int64 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: UInt64 /* System.UInt64 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Float /* System.Single */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: Double /* System.Double */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_Decimal? /* System.Decimal */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_String? /* System.String */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_DateTime? /* System.DateTime */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_Object? /* System.Object */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Bool /* System.Boolean */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: DNChar /* System.Char */) throws -> Int64 /* System.Int64 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Int8 /* System.SByte */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: UInt8 /* System.Byte */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Int16 /* System.Int16 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: UInt16 /* System.UInt16 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: UInt32 /* System.UInt32 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: UInt64 /* System.UInt64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Float /* System.Single */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: Double /* System.Double */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_Decimal? /* System.Decimal */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_String? /* System.String */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_DateTime? /* System.DateTime */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_Object? /* System.Object */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Bool /* System.Boolean */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: DNChar /* System.Char */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_3(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Int8 /* System.SByte */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: UInt8 /* System.Byte */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Int16 /* System.Int16 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: UInt16 /* System.UInt16 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Int32 /* System.Int32 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: UInt32 /* System.UInt32 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Int64 /* System.Int64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Float /* System.Single */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: Double /* System.Double */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_13(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_Decimal? /* System.Decimal */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_String? /* System.String */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_15(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_16(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_DateTime? /* System.DateTime */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_Object? /* System.Object */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Int8 /* System.SByte */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: UInt8 /* System.Byte */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: DNChar /* System.Char */) throws -> Float /* System.Single */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_4(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Int16 /* System.Int16 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_5(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: UInt16 /* System.UInt16 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Int32 /* System.Int32 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: UInt32 /* System.UInt32 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Int64 /* System.Int64 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: UInt64 /* System.UInt64 */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Double /* System.Double */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_Decimal? /* System.Decimal */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_13(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_String? /* System.String */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_15(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: Bool /* System.Boolean */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_16(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSingle(_ value: System_DateTime? /* System.DateTime */) throws -> Float /* System.Single */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSingle_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_Object? /* System.Object */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_1(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Int8 /* System.SByte */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_2(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: UInt8 /* System.Byte */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_3(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Int16 /* System.Int16 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_4(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: DNChar /* System.Char */) throws -> Double /* System.Double */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_5(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: UInt16 /* System.UInt16 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_6(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Int32 /* System.Int32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_7(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: UInt32 /* System.UInt32 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_8(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Int64 /* System.Int64 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_9(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: UInt64 /* System.UInt64 */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_10(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Float /* System.Single */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_11(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_12(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_Decimal? /* System.Decimal */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_13(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_String? /* System.String */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_14(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_15(valueC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: Bool /* System.Boolean */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_16(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDouble(_ value: System_DateTime? /* System.DateTime */) throws -> Double /* System.Double */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDouble_17(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toDecimal(_ value: System_Object? /* System.Object */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_1(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Int8 /* System.SByte */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_2(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: UInt8 /* System.Byte */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_3(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: DNChar /* System.Char */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_4(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Int16 /* System.Int16 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_5(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: UInt16 /* System.UInt16 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_6(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Int32 /* System.Int32 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_7(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: UInt32 /* System.UInt32 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_8(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Int64 /* System.Int64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_9(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: UInt64 /* System.UInt64 */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_10(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Float /* System.Single */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_11(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Double /* System.Double */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_12(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: System_String? /* System.String */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_13(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_14(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: System_Decimal? /* System.Decimal */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_15(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: Bool /* System.Boolean */) throws -> System_Decimal? /* System.Decimal */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_16(value, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDecimal(_ value: System_DateTime? /* System.DateTime */) throws -> System_Decimal? /* System.Decimal */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDecimal_17(valueC, &__exceptionC)
		
		let __returnValue = System_Decimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_DateTime? /* System.DateTime */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_Object? /* System.Object */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_1(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_2(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_3(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_4(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Int8 /* System.SByte */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_5(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: UInt8 /* System.Byte */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_6(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Int16 /* System.Int16 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_7(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: UInt16 /* System.UInt16 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_8(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Int32 /* System.Int32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_9(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: UInt32 /* System.UInt32 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_10(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Int64 /* System.Int64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_11(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: UInt64 /* System.UInt64 */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_12(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Bool /* System.Boolean */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_13(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: DNChar /* System.Char */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_14(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Float /* System.Single */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_15(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: Double /* System.Double */) throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_16(value, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toDateTime(_ value: System_Decimal? /* System.Decimal */) throws -> System_DateTime? /* System.DateTime */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToDateTime_17(valueC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_Object? /* System.Object */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_Object? /* System.Object */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_1(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Bool /* System.Boolean */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_2(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Bool /* System.Boolean */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_3(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: DNChar /* System.Char */) throws -> System_String? /* System.String */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_4(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: DNChar /* System.Char */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value.cValue
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_5(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int8 /* System.SByte */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_6(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int8 /* System.SByte */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_7(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt8 /* System.Byte */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_8(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt8 /* System.Byte */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_9(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int16 /* System.Int16 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_10(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int16 /* System.Int16 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_11(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt16 /* System.UInt16 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_12(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt16 /* System.UInt16 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_13(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_14(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int32 /* System.Int32 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_15(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt32 /* System.UInt32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_16(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt32 /* System.UInt32 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_17(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int64 /* System.Int64 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_18(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int64 /* System.Int64 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_19(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt64 /* System.UInt64 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_20(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: UInt64 /* System.UInt64 */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_21(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Float /* System.Single */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_22(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Float /* System.Single */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_23(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Double /* System.Double */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_24(value, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Double /* System.Double */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_25(value, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_Decimal? /* System.Decimal */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_26(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_Decimal? /* System.Decimal */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_27(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_DateTime? /* System.DateTime */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_28(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_DateTime? /* System.DateTime */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_29(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_30(valueC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: System_String? /* System.String */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws -> System_String? /* System.String */ {
		let valueC = value?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_31(valueC, providerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toByte(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> UInt8 /* System.Byte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToByte_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toSByte(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> Int8 /* System.SByte */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToSByte_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt16(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> Int16 /* System.Int16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt16_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt16(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> UInt16 /* System.UInt16 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt16_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt32(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt32_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt32(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> UInt32 /* System.UInt32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt32_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toInt64(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> Int64 /* System.Int64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToInt64_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toUInt64(_ value: System_String? /* System.String */, _ fromBase: Int32 /* System.Int32 */) throws -> UInt64 /* System.UInt64 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToUInt64_18(valueC, fromBase, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toString(_ value: UInt8 /* System.Byte */, _ toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_32(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int16 /* System.Int16 */, _ toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_33(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int32 /* System.Int32 */, _ toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_34(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toString(_ value: Int64 /* System.Int64 */, _ toBase: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToString_35(value, toBase, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBase64String(_ inArray: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String(inArrayC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBase64String(_ inArray: System_Byte_Array? /* System.Byte[] */, _ options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_1(inArrayC, optionsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBase64String(_ inArray: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_2(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBase64String(_ inArray: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64String_3(inArrayC, offset, length, optionsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toBase64CharArray(_ inArray: System_Byte_Array? /* System.Byte[] */, _ offsetIn: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ outArray: System_Char_Array? /* System.Char[] */, _ offsetOut: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let inArrayC = inArray?.__handle
		let outArrayC = outArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64CharArray(inArrayC, offsetIn, length, outArrayC, offsetOut, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func toBase64CharArray(_ inArray: System_Byte_Array? /* System.Byte[] */, _ offsetIn: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ outArray: System_Char_Array? /* System.Char[] */, _ offsetOut: Int32 /* System.Int32 */, _ options: System_Base64FormattingOptions /* System.Base64FormattingOptions */) throws -> Int32 /* System.Int32 */ {
		let inArrayC = inArray?.__handle
		let outArrayC = outArray?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToBase64CharArray_1(inArrayC, offsetIn, length, outArrayC, offsetOut, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func fromBase64String(_ s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromBase64String(sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromBase64CharArray(_ inArray: System_Char_Array? /* System.Char[] */, _ offset: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromBase64CharArray(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromHexString(_ s: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let sC = s?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_FromHexString(sC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toHexString(_ inArray: System_Byte_Array? /* System.Byte[] */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToHexString(inArrayC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func toHexString(_ inArray: System_Byte_Array? /* System.Byte[] */, _ offset: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		let inArrayC = inArray?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Convert_ToHexString_1(inArrayC, offset, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var dBNull: System_Object? /* System.Object */ { get {
		
		
		let __returnValueC = System_Convert_DBNull_Get()
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Convert_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Convert_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Thread /* System.Threading.Thread */: System_Runtime_ConstrainedExecution_CriticalFinalizerObject {
	public override class var typeName: String { get {
		"Thread"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Thread"
	}}

	public class func spinWait(_ iterations: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SpinWait(iterations, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func yield() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Yield(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getApartmentState() throws -> System_Threading_ApartmentState /* System.Threading.ApartmentState */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetApartmentState(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ApartmentState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func disableComObjectEagerCleanup() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_DisableComObjectEagerCleanup(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func interrupt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Interrupt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func join(_ millisecondsTimeout: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Join(self.__handle, millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func start(_ parameter: System_Object? /* System.Object */) throws {
		let parameterC = parameter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Start(self.__handle, parameterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeStart(_ parameter: System_Object? /* System.Object */) throws {
		let parameterC = parameter?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_UnsafeStart(self.__handle, parameterC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func start() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Start_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func unsafeStart() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_UnsafeStart_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sleep(_ millisecondsTimeout: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Sleep(millisecondsTimeout, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func abort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Abort(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func abort(_ stateInfo: System_Object? /* System.Object */) throws {
		let stateInfoC = stateInfo?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Abort_1(self.__handle, stateInfoC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func resetAbort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_ResetAbort(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func suspend() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Suspend(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func resume() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Resume(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func beginCriticalRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_BeginCriticalRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func endCriticalRegion() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_EndCriticalRegion(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func beginThreadAffinity() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_BeginThreadAffinity(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func endThreadAffinity() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_EndThreadAffinity(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func allocateDataSlot() throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_AllocateDataSlot(&__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func allocateNamedDataSlot(_ name: System_String? /* System.String */) throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_AllocateNamedDataSlot(nameC, &__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getNamedDataSlot(_ name: System_String? /* System.String */) throws -> System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetNamedDataSlot(nameC, &__exceptionC)
		
		let __returnValue = System_LocalDataStoreSlot(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func freeNamedDataSlot(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_FreeNamedDataSlot(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getData(_ slot: System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */) throws -> System_Object? /* System.Object */ {
		let slotC = slot?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetData(slotC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setData(_ slot: System_LocalDataStoreSlot? /* System.LocalDataStoreSlot */, _ data: System_Object? /* System.Object */) throws {
		let slotC = slot?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetData(slotC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setApartmentState(_ state: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetApartmentState(self.__handle, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func trySetApartmentState(_ state: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws -> Bool /* System.Boolean */ {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_TrySetApartmentState(self.__handle, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getCompressedStack() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetCompressedStack(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setCompressedStack(_ stack: System_Threading_CompressedStack? /* System.Threading.CompressedStack */) throws {
		let stackC = stack?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_SetCompressedStack(self.__handle, stackC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getDomain() throws -> System_AppDomain? /* System.AppDomain */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetDomain(&__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDomainID() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetDomainID(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func join() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Join_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func join(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Join_2(self.__handle, timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func memoryBarrier() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_MemoryBarrier(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func sleep(_ timeout: System_TimeSpan? /* System.TimeSpan */) throws {
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Sleep_1(timeoutC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileRead(_ address: inout UInt8 /* System.Byte */) throws -> UInt8 /* System.Byte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Double /* System.Double */) throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_1(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Int16 /* System.Int16 */) throws -> Int16 /* System.Int16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_2(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_3(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_4(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Int /* System.IntPtr */) throws -> Int /* System.IntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_5(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		var addressC = address?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_6(&addressC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		address = System_Object(handle: addressC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func volatileRead(_ address: inout Int8 /* System.SByte */) throws -> Int8 /* System.SByte */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_7(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout Float /* System.Single */) throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_8(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout UInt16 /* System.UInt16 */) throws -> UInt16 /* System.UInt16 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_9(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout UInt32 /* System.UInt32 */) throws -> UInt32 /* System.UInt32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_10(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout UInt64 /* System.UInt64 */) throws -> UInt64 /* System.UInt64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_11(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileRead(_ address: inout UInt /* System.UIntPtr */) throws -> UInt /* System.UIntPtr */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_VolatileRead_12(&address, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func volatileWrite(_ address: inout UInt8 /* System.Byte */, _ value: UInt8 /* System.Byte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Double /* System.Double */, _ value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_1(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Int16 /* System.Int16 */, _ value: Int16 /* System.Int16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_2(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Int32 /* System.Int32 */, _ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_3(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Int64 /* System.Int64 */, _ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_4(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Int /* System.IntPtr */, _ value: Int /* System.IntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_5(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		var addressC = address?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_6(&addressC, valueC, &__exceptionC)
		
		address = System_Object(handle: addressC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Int8 /* System.SByte */, _ value: Int8 /* System.SByte */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_7(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout Float /* System.Single */, _ value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_8(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout UInt16 /* System.UInt16 */, _ value: UInt16 /* System.UInt16 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_9(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout UInt32 /* System.UInt32 */, _ value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_10(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout UInt64 /* System.UInt64 */, _ value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_11(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func volatileWrite(_ address: inout UInt /* System.UIntPtr */, _ value: UInt /* System.UIntPtr */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_VolatileWrite_12(&address, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getCurrentProcessorId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_GetCurrentProcessorId(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public convenience init?(_ start: System_Threading_ThreadStart? /* System.Threading.ThreadStart */) throws {
		let startC = start?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Create(startC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ start: System_Threading_ThreadStart? /* System.Threading.ThreadStart */, _ maxStackSize: Int32 /* System.Int32 */) throws {
		let startC = start?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Create_1(startC, maxStackSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ start: System_Threading_ParameterizedThreadStart? /* System.Threading.ParameterizedThreadStart */) throws {
		let startC = start?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Create_2(startC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ start: System_Threading_ParameterizedThreadStart? /* System.Threading.ParameterizedThreadStart */, _ maxStackSize: Int32 /* System.Int32 */) throws {
		let startC = start?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Create_3(startC, maxStackSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var managedThreadId: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ManagedThreadId_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isAlive: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsAlive_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isBackground: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsBackground_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func isBackground_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_IsBackground_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isThreadPoolThread: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_IsThreadPoolThread_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var priority: System_Threading_ThreadPriority /* System.Threading.ThreadPriority */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Priority_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ThreadPriority(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func priority_set(_ value: System_Threading_ThreadPriority /* System.Threading.ThreadPriority */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Priority_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var threadState: System_Threading_ThreadState /* System.Threading.ThreadState */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ThreadState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ThreadState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var currentCulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentCulture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currentCulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentCulture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var currentUICulture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentUICulture_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Globalization_CultureInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func currentUICulture_set(_ value: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentUICulture_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var currentPrincipal: System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentPrincipal_Get(&__exceptionC)
		
		let __returnValue = System_Security_Principal_IPrincipal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func currentPrincipal_set(_ value: System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_CurrentPrincipal_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var currentThread: System_Threading_Thread? /* System.Threading.Thread */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_CurrentThread_Get(&__exceptionC)
		
		let __returnValue = System_Threading_Thread(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var executionContext: System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ExecutionContext_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func name_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_Name_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var apartmentState: System_Threading_ApartmentState /* System.Threading.ApartmentState */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Thread_ApartmentState_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ApartmentState(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func apartmentState_set(_ value: System_Threading_ApartmentState /* System.Threading.ApartmentState */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Thread_ApartmentState_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Thread_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Thread_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_Principal_IPrincipal /* System.Security.Principal.IPrincipal */: DNObject {
	public override class var typeName: String { get {
		"IPrincipal"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.Principal.IPrincipal"
	}}

	public func isInRole(_ role: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let roleC = role?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IPrincipal_IsInRole(self.__handle, roleC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public var identity: System_Security_Principal_IIdentity? /* System.Security.Principal.IIdentity */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IPrincipal_Identity_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_Principal_IIdentity(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_Principal_IPrincipal_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_Principal_IPrincipal_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_Principal_IIdentity /* System.Security.Principal.IIdentity */: DNObject {
	public override class var typeName: String { get {
		"IIdentity"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.Principal.IIdentity"
	}}

	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var authenticationType: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_AuthenticationType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isAuthenticated: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_Principal_IIdentity_IsAuthenticated_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_Principal_IIdentity_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_Principal_IIdentity_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_ExecutionContext /* System.Threading.ExecutionContext */: System_Object {
	public override class var typeName: String { get {
		"ExecutionContext"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.ExecutionContext"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func capture() throws -> System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_Capture(&__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func suppressFlow() throws -> System_Threading_AsyncFlowControl? /* System.Threading.AsyncFlowControl */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_SuppressFlow(&__exceptionC)
		
		let __returnValue = System_Threading_AsyncFlowControl(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func restoreFlow() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_RestoreFlow(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func isFlowSuppressed() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_IsFlowSuppressed(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func run(_ executionContext: System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */, _ callback: System_Threading_ContextCallback? /* System.Threading.ContextCallback */, _ state: System_Object? /* System.Object */) throws {
		let executionContextC = executionContext?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_Run(executionContextC, callbackC, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func restore(_ executionContext: System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */) throws {
		let executionContextC = executionContext?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_Restore_1(executionContextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func createCopy() throws -> System_Threading_ExecutionContext? /* System.Threading.ExecutionContext */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_ExecutionContext_CreateCopy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_ExecutionContext(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_ExecutionContext_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ExecutionContext_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_ExecutionContext_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_AsyncFlowControl /* System.Threading.AsyncFlowControl */: System_ValueType {
	public override class var typeName: String { get {
		"AsyncFlowControl"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.AsyncFlowControl"
	}}

	public func undo() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_AsyncFlowControl_Undo(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_AsyncFlowControl_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func equals(_ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_Equals(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func equals(_ obj: System_Threading_AsyncFlowControl? /* System.Threading.AsyncFlowControl */) throws -> Bool /* System.Boolean */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_Equals_1(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_AsyncFlowControl_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_AsyncFlowControl_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_AsyncFlowControl_Destroy(self.__handle)
		
	}
	
	
}




public class System_LocalDataStoreSlot /* System.LocalDataStoreSlot */: System_Object {
	public override class var typeName: String { get {
		"LocalDataStoreSlot"
	}}

	public override class var fullTypeName: String { get {
		"System.LocalDataStoreSlot"
	}}

	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_LocalDataStoreSlot_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_LocalDataStoreSlot_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_CompressedStack /* System.Threading.CompressedStack */: System_Object {
	public override class var typeName: String { get {
		"CompressedStack"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.CompressedStack"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CompressedStack_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func capture() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_Capture(&__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createCopy() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_CreateCopy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCompressedStack() throws -> System_Threading_CompressedStack? /* System.Threading.CompressedStack */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CompressedStack_GetCompressedStack(&__exceptionC)
		
		let __returnValue = System_Threading_CompressedStack(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func run(_ compressedStack: System_Threading_CompressedStack? /* System.Threading.CompressedStack */, _ callback: System_Threading_ContextCallback? /* System.Threading.ContextCallback */, _ state: System_Object? /* System.Object */) throws {
		let compressedStackC = compressedStack?.__handle
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CompressedStack_Run(compressedStackC, callbackC, stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_CompressedStack_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_CompressedStack_Destroy(self.__handle)
		
	}
	
	
}


public class System_AppDomain /* System.AppDomain */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"AppDomain"
	}}

	public override class var fullTypeName: String { get {
		"System.AppDomain"
	}}

	public func setDynamicBase(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetDynamicBase(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func applyPolicy(_ assemblyName: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ApplyPolicy(self.__handle, assemblyNameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createDomain(_ friendlyName: System_String? /* System.String */) throws -> System_AppDomain? /* System.AppDomain */ {
		let friendlyNameC = friendlyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateDomain(friendlyNameC, &__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func executeAssembly(_ assemblyFile: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly(self.__handle, assemblyFileC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func executeAssembly(_ assemblyFile: System_String? /* System.String */, _ args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly_1(self.__handle, assemblyFileC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func executeAssembly(_ assemblyFile: System_String? /* System.String */, _ args: System_String_Array? /* System.String[] */, _ hashValue: System_Byte_Array? /* System.Byte[] */, _ hashAlgorithm: System_Configuration_Assemblies_AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */) throws -> Int32 /* System.Int32 */ {
		let assemblyFileC = assemblyFile?.__handle
		let argsC = args?.__handle
		let hashValueC = hashValue?.__handle
		let hashAlgorithmC = hashAlgorithm.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssembly_2(self.__handle, assemblyFileC, argsC, hashValueC, hashAlgorithmC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func executeAssemblyByName(_ assemblyName: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */, _ args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName(self.__handle, assemblyNameC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func executeAssemblyByName(_ assemblyName: System_String? /* System.String */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName_1(self.__handle, assemblyNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func executeAssemblyByName(_ assemblyName: System_String? /* System.String */, _ args: System_String_Array? /* System.String[] */) throws -> Int32 /* System.Int32 */ {
		let assemblyNameC = assemblyName?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ExecuteAssemblyByName_2(self.__handle, assemblyNameC, argsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getData(_ name: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetData(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setData(_ name: System_String? /* System.String */, _ data: System_Object? /* System.Object */) throws {
		let nameC = name?.__handle
		let dataC = data?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetData(self.__handle, nameC, dataC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func isDefaultAppDomain() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsDefaultAppDomain(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isFinalizingForUnload() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsFinalizingForUnload(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func unload(_ domain: System_AppDomain? /* System.AppDomain */) throws {
		let domainC = domain?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_Unload(domainC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func load(_ rawAssembly: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load(self.__handle, rawAssemblyC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func load(_ rawAssembly: System_Byte_Array? /* System.Byte[] */, _ rawSymbolStore: System_Byte_Array? /* System.Byte[] */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let rawAssemblyC = rawAssembly?.__handle
		let rawSymbolStoreC = rawSymbolStore?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_1(self.__handle, rawAssemblyC, rawSymbolStoreC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func load(_ assemblyRef: System_Reflection_AssemblyName? /* System.Reflection.AssemblyName */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyRefC = assemblyRef?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_2(self.__handle, assemblyRefC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func load(_ assemblyString: System_String? /* System.String */) throws -> System_Reflection_Assembly? /* System.Reflection.Assembly */ {
		let assemblyStringC = assemblyString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Load_3(self.__handle, assemblyStringC, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func reflectionOnlyGetAssemblies() throws -> System_Reflection_Assembly_Array? /* System.Reflection.Assembly[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ReflectionOnlyGetAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCurrentThreadId() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetCurrentThreadId(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func appendPrivatePath(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_AppendPrivatePath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clearPrivatePath() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_ClearPrivatePath(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clearShadowCopyPath() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_ClearShadowCopyPath(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setCachePath(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetCachePath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setShadowCopyFiles() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetShadowCopyFiles(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setShadowCopyPath(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetShadowCopyPath(self.__handle, pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getAssemblies() throws -> System_Reflection_Assembly_Array? /* System.Reflection.Assembly[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_GetAssemblies(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func setPrincipalPolicy(_ policy: System_Security_Principal_PrincipalPolicy /* System.Security.Principal.PrincipalPolicy */) throws {
		let policyC = policy.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetPrincipalPolicy(self.__handle, policyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setThreadPrincipal(_ principal: System_Security_Principal_IPrincipal? /* System.Security.Principal.IPrincipal */) throws {
		let principalC = principal?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_SetThreadPrincipal(self.__handle, principalC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func createInstance(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance(self.__handle, assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstance(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance_1(self.__handle, assemblyNameC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstance(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstance_2(self.__handle, assemblyNameC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceAndUnwrap(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap(self.__handle, assemblyNameC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceAndUnwrap(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap_1(self.__handle, assemblyNameC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceAndUnwrap(_ assemblyName: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyNameC = assemblyName?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceAndUnwrap_2(self.__handle, assemblyNameC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFrom(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom(self.__handle, assemblyFileC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFrom(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom_1(self.__handle, assemblyFileC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFrom(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Runtime_Remoting_ObjectHandle? /* System.Runtime.Remoting.ObjectHandle */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFrom_2(self.__handle, assemblyFileC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Runtime_Remoting_ObjectHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFromAndUnwrap(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap(self.__handle, assemblyFileC, typeNameC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFromAndUnwrap(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ ignoreCase: Bool /* System.Boolean */, _ bindingAttr: System_Reflection_BindingFlags /* System.Reflection.BindingFlags */, _ binder: System_Reflection_Binder? /* System.Reflection.Binder */, _ args: System_Object_Array? /* System.Object[] */, _ culture: System_Globalization_CultureInfo? /* System.Globalization.CultureInfo */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let bindingAttrC = bindingAttr.cValue
		let binderC = binder?.__handle
		let argsC = args?.__handle
		let cultureC = culture?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap_1(self.__handle, assemblyFileC, typeNameC, ignoreCase, bindingAttrC, binderC, argsC, cultureC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createInstanceFromAndUnwrap(_ assemblyFile: System_String? /* System.String */, _ typeName: System_String? /* System.String */, _ activationAttributes: System_Object_Array? /* System.Object[] */) throws -> System_Object? /* System.Object */ {
		let assemblyFileC = assemblyFile?.__handle
		let typeNameC = typeName?.__handle
		let activationAttributesC = activationAttributes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CreateInstanceFromAndUnwrap_2(self.__handle, assemblyFileC, typeNameC, activationAttributesC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var currentDomain: System_AppDomain? /* System.AppDomain */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_CurrentDomain_Get(&__exceptionC)
		
		let __returnValue = System_AppDomain(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var baseDirectory: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_BaseDirectory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var relativeSearchPath: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_RelativeSearchPath_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var setupInformation: System_AppDomainSetup? /* System.AppDomainSetup */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_SetupInformation_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_AppDomainSetup(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var permissionSet: System_Security_PermissionSet? /* System.Security.PermissionSet */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_PermissionSet_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var dynamicDirectory: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_DynamicDirectory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var friendlyName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_FriendlyName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var id: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_Id_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFullyTrusted: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsFullyTrusted_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isHomogenous: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_IsHomogenous_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var monitoringIsEnabled: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringIsEnabled_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public class func monitoringIsEnabled_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_AppDomain_MonitoringIsEnabled_Set(value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var monitoringSurvivedMemorySize: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringSurvivedMemorySize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public class var monitoringSurvivedProcessMemorySize: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringSurvivedProcessMemorySize_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var monitoringTotalAllocatedMemorySize: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringTotalAllocatedMemorySize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var shadowCopyFiles: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_ShadowCopyFiles_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var monitoringTotalProcessorTime: System_TimeSpan? /* System.TimeSpan */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomain_MonitoringTotalProcessorTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_TimeSpan(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public func unhandledException_add(_ value: System_UnhandledExceptionEventHandler? /* System.UnhandledExceptionEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_UnhandledException_Add(self.__handle, valueC)
		
		
	}
	public func unhandledException_remove(_ value: System_UnhandledExceptionEventHandler? /* System.UnhandledExceptionEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_UnhandledException_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func domainUnload_add(_ value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_DomainUnload_Add(self.__handle, valueC)
		
		
	}
	public func domainUnload_remove(_ value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_DomainUnload_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func processExit_add(_ value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ProcessExit_Add(self.__handle, valueC)
		
		
	}
	public func processExit_remove(_ value: System_EventHandler? /* System.EventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ProcessExit_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func assemblyLoad_add(_ value: System_AssemblyLoadEventHandler? /* System.AssemblyLoadEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_AssemblyLoad_Add(self.__handle, valueC)
		
		
	}
	public func assemblyLoad_remove(_ value: System_AssemblyLoadEventHandler? /* System.AssemblyLoadEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_AssemblyLoad_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func assemblyResolve_add(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_AssemblyResolve_Add(self.__handle, valueC)
		
		
	}
	public func assemblyResolve_remove(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_AssemblyResolve_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func reflectionOnlyAssemblyResolve_add(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ReflectionOnlyAssemblyResolve_Add(self.__handle, valueC)
		
		
	}
	public func reflectionOnlyAssemblyResolve_remove(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ReflectionOnlyAssemblyResolve_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func typeResolve_add(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_TypeResolve_Add(self.__handle, valueC)
		
		
	}
	public func typeResolve_remove(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_TypeResolve_Remove(self.__handle, valueC)
		
		
	}
	
	
	public func resourceResolve_add(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ResourceResolve_Add(self.__handle, valueC)
		
		
	}
	public func resourceResolve_remove(_ value: System_ResolveEventHandler? /* System.ResolveEventHandler */) {
		let valueC = value?.__handle
		
		
		System_AppDomain_ResourceResolve_Remove(self.__handle, valueC)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AppDomain_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AppDomain_Destroy(self.__handle)
		
	}
	
	
}


public class System_AppDomainSetup /* System.AppDomainSetup */: System_Object {
	public override class var typeName: String { get {
		"AppDomainSetup"
	}}

	public override class var fullTypeName: String { get {
		"System.AppDomainSetup"
	}}

	public var applicationBase: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomainSetup_ApplicationBase_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var targetFrameworkName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AppDomainSetup_TargetFrameworkName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AppDomainSetup_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AppDomainSetup_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_PermissionSet /* System.Security.PermissionSet */: System_Object {
	public override class var typeName: String { get {
		"PermissionSet"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.PermissionSet"
	}}

	public func addPermission(_ perm: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permC = perm?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_AddPermission(self.__handle, permC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func assert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Assert(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func containsNonCodeAccessPermissions() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ContainsNonCodeAccessPermissions(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func convertPermissionSet(_ inFormat: System_String? /* System.String */, _ inData: System_Byte_Array? /* System.Byte[] */, _ outFormat: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let inFormatC = inFormat?.__handle
		let inDataC = inData?.__handle
		let outFormatC = outFormat?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ConvertPermissionSet(inFormatC, inDataC, outFormatC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copy() throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_CopyTo(self.__handle, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deny() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_Deny(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func equals(_ o: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Equals(self.__handle, oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func fromXml(_ et: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let etC = et?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_FromXml(self.__handle, etC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func getHashCode() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetHashCode(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getPermission(_ permClass: System_Type? /* System.Type */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permClassC = permClass?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_GetPermission(self.__handle, permClassC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func intersect(_ other: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Intersect(self.__handle, otherC, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isEmpty() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsEmpty(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isSubsetOf(_ target: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> Bool /* System.Boolean */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsSubsetOf(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func isUnrestricted() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsUnrestricted(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func permitOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_PermitOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removePermission(_ permClass: System_Type? /* System.Type */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permClassC = permClass?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_RemovePermission(self.__handle, permClassC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func revertAssert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_PermissionSet_RevertAssert(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setPermission(_ perm: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let permC = perm?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_SetPermission(self.__handle, permC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toXml() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_ToXml(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func union(_ other: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws -> System_Security_PermissionSet? /* System.Security.PermissionSet */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Union(self.__handle, otherC, &__exceptionC)
		
		let __returnValue = System_Security_PermissionSet(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ state: System_Security_Permissions_PermissionState /* System.Security.Permissions.PermissionState */) throws {
		let stateC = state.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Create(stateC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ permSet: System_Security_PermissionSet? /* System.Security.PermissionSet */) throws {
		let permSetC = permSet?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Create_1(permSetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var count: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSynchronized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var syncRoot: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_PermissionSet_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_PermissionSet_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_PermissionSet_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_ISecurityEncodable /* System.Security.ISecurityEncodable */: DNObject {
	public override class var typeName: String { get {
		"ISecurityEncodable"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.ISecurityEncodable"
	}}

	public func fromXml(_ e: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let eC = e?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_ISecurityEncodable_FromXml(self.__handle, eC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func toXml() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_ISecurityEncodable_ToXml(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_ISecurityEncodable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_ISecurityEncodable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_SecurityElement /* System.Security.SecurityElement */: System_Object {
	public override class var typeName: String { get {
		"SecurityElement"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.SecurityElement"
	}}

	public func addAttribute(_ name: System_String? /* System.String */, _ value: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_AddAttribute(self.__handle, nameC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func addChild(_ child: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_AddChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func equal(_ other: System_Security_SecurityElement? /* System.Security.SecurityElement */) throws -> Bool /* System.Boolean */ {
		let otherC = other?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Equal(self.__handle, otherC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copy() throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isValidTag(_ tag: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidTag(tagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isValidText(_ text: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidText(textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isValidAttributeName(_ name: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidAttributeName(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func isValidAttributeValue(_ value: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_IsValidAttributeValue(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func escape(_ str: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let strC = str?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Escape(strC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func attribute(_ name: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Attribute(self.__handle, nameC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func searchForChildByTag(_ tag: System_String? /* System.String */) throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_SearchForChildByTag(self.__handle, tagC, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func searchForTextOfTag(_ tag: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_SearchForTextOfTag(self.__handle, tagC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fromString(_ xml: System_String? /* System.String */) throws -> System_Security_SecurityElement? /* System.Security.SecurityElement */ {
		let xmlC = xml?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_FromString(xmlC, &__exceptionC)
		
		let __returnValue = System_Security_SecurityElement(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ tag: System_String? /* System.String */) throws {
		let tagC = tag?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Create(tagC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ tag: System_String? /* System.String */, _ text: System_String? /* System.String */) throws {
		let tagC = tag?.__handle
		let textC = text?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Create_1(tagC, textC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var tag: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Tag_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func tag_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Tag_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var attributes: System_Collections_Hashtable? /* System.Collections.Hashtable */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Hashtable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func attributes_set(_ value: System_Collections_Hashtable? /* System.Collections.Hashtable */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Attributes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var text: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Text_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func text_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Text_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var children: System_Collections_ArrayList? /* System.Collections.ArrayList */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_SecurityElement_Children_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func children_set(_ value: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_SecurityElement_Children_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_SecurityElement_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_SecurityElement_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_Hashtable /* System.Collections.Hashtable */: System_Object {
	public override class var typeName: String { get {
		"Hashtable"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Hashtable"
	}}

	public func add(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Add(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func contains(_ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Contains(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func containsKey(_ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_ContainsKey(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func containsValue(_ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_ContainsValue(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */, _ arrayIndex: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_CopyTo(self.__handle, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getEnumerator() throws -> System_Collections_IDictionaryEnumerator? /* System.Collections.IDictionaryEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IDictionaryEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ key: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Remove(self.__handle, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func synchronized(_ table: System_Collections_Hashtable? /* System.Collections.Hashtable */) throws -> System_Collections_Hashtable? /* System.Collections.Hashtable */ {
		let tableC = table?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Synchronized(tableC, &__exceptionC)
		
		let __returnValue = System_Collections_Hashtable(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func onDeserialization(_ sender: System_Object? /* System.Object */) throws {
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_OnDeserialization(self.__handle, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ loadFactor: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_2(capacity, loadFactor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ loadFactor: Float /* System.Single */, _ equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_3(capacity, loadFactor, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_4(hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_5(equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_6(capacity, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_7(capacity, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_8(dC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */, _ loadFactor: Float /* System.Single */) throws {
		let dC = d?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_9(dC, loadFactor, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */, _ hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let dC = d?.__handle
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_10(dC, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */, _ equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let dC = d?.__handle
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_11(dC, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ loadFactor: Float /* System.Single */, _ hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_12(capacity, loadFactor, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */, _ loadFactor: Float /* System.Single */, _ hcp: System_Collections_IHashCodeProvider? /* System.Collections.IHashCodeProvider */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let dC = d?.__handle
		let hcpC = hcp?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_13(dC, loadFactor, hcpC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ d: System_Collections_IDictionary? /* System.Collections.IDictionary */, _ loadFactor: Float /* System.Single */, _ equalityComparer: System_Collections_IEqualityComparer? /* System.Collections.IEqualityComparer */) throws {
		let dC = d?.__handle
		let equalityComparerC = equalityComparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Create_14(dC, loadFactor, equalityComparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item(_ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Item_Get(self.__handle, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Hashtable_Item_Set(self.__handle, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFixedSize: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSynchronized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var keys: System_Collections_ICollection? /* System.Collections.ICollection */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Keys_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var values: System_Collections_ICollection? /* System.Collections.ICollection */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Values_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_ICollection(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var syncRoot: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var count: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Hashtable_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Hashtable_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Hashtable_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_IHashCodeProvider /* System.Collections.IHashCodeProvider */: DNObject {
	public override class var typeName: String { get {
		"IHashCodeProvider"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.IHashCodeProvider"
	}}

	public func getHashCode(_ obj: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_IHashCodeProvider_GetHashCode(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_IHashCodeProvider_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_IHashCodeProvider_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_ArrayList /* System.Collections.ArrayList */: System_Object {
	public override class var typeName: String { get {
		"ArrayList"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.ArrayList"
	}}

	public class func adapter(_ list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Adapter(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func add(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Add(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func addRange(_ c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_AddRange(self.__handle, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func binarySearch(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch(self.__handle, index, count, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func binarySearch(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func binarySearch(_ value: System_Object? /* System.Object */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_BinarySearch_2(self.__handle, valueC, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func clear() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Clear(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clone() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Clone(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func contains(_ item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Contains(self.__handle, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo(self.__handle, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ array: System_Array? /* System.Array */, _ arrayIndex: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo_1(self.__handle, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ index: Int32 /* System.Int32 */, _ array: System_Array? /* System.Array */, _ arrayIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_CopyTo_2(self.__handle, index, arrayC, arrayIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func fixedSize(_ list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_FixedSize(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func fixedSize(_ list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_FixedSize_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumerator() throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getEnumerator(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Collections_IEnumerator? /* System.Collections.IEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetEnumerator_1(self.__handle, index, count, &__exceptionC)
		
		let __returnValue = System_Collections_IEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func indexOf(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IndexOf_2(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Insert(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func insertRange(_ index: Int32 /* System.Int32 */, _ c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_InsertRange(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func lastIndexOf(_ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf_1(self.__handle, valueC, startIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ value: System_Object? /* System.Object */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_LastIndexOf_2(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func readOnly(_ list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ReadOnly(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readOnly(_ list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ReadOnly_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ obj: System_Object? /* System.Object */) throws {
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Remove(self.__handle, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeAt(_ index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_RemoveAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeRange(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_RemoveRange(self.__handle, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func `repeat`(_ value: System_Object? /* System.Object */, _ count: Int32 /* System.Int32 */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Repeat(valueC, count, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func reverse() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Reverse(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func reverse(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Reverse_1(self.__handle, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func setRange(_ index: Int32 /* System.Int32 */, _ c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_SetRange(self.__handle, index, cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getRange(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_GetRange(self.__handle, index, count, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func sort() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func sort(_ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort_1(self.__handle, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func sort(_ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */, _ comparer: System_Collections_IComparer? /* System.Collections.IComparer */) throws {
		let comparerC = comparer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Sort_2(self.__handle, index, count, comparerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func synchronized(_ list: System_Collections_IList? /* System.Collections.IList */) throws -> System_Collections_IList? /* System.Collections.IList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Synchronized(listC, &__exceptionC)
		
		let __returnValue = System_Collections_IList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func synchronized(_ list: System_Collections_ArrayList? /* System.Collections.ArrayList */) throws -> System_Collections_ArrayList? /* System.Collections.ArrayList */ {
		let listC = list?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Synchronized_1(listC, &__exceptionC)
		
		let __returnValue = System_Collections_ArrayList(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toArray() throws -> System_Object_Array? /* System.Object[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ToArray(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toArray(_ type: System_Type? /* System.Type */) throws -> System_Array? /* System.Array */ {
		let typeC = type?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_ToArray_1(self.__handle, typeC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimToSize() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_TrimToSize(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ c: System_Collections_ICollection? /* System.Collections.ICollection */) throws {
		let cC = c?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Create_2(cC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var capacity: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Capacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func capacity_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Capacity_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var count: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Count_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isFixedSize: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsFixedSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var isSynchronized: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_IsSynchronized_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var syncRoot: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_SyncRoot_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public func item(_ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ArrayList_Item_Get(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ArrayList_Item_Set(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_ArrayList_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_ArrayList_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_IStackWalk /* System.Security.IStackWalk */: DNObject {
	public override class var typeName: String { get {
		"IStackWalk"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.IStackWalk"
	}}

	public func assert() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Assert(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func deny() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_Deny(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func permitOnly() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IStackWalk_PermitOnly(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_IStackWalk_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_IStackWalk_Destroy(self.__handle)
		
	}
	
	
}


public class System_Security_IPermission /* System.Security.IPermission */: DNObject {
	public override class var typeName: String { get {
		"IPermission"
	}}

	public override class var fullTypeName: String { get {
		"System.Security.IPermission"
	}}

	public func copy() throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Copy(self.__handle, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func demand() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Security_IPermission_Demand(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func intersect(_ target: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Intersect(self.__handle, targetC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func isSubsetOf(_ target: System_Security_IPermission? /* System.Security.IPermission */) throws -> Bool /* System.Boolean */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_IsSubsetOf(self.__handle, targetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func union(_ target: System_Security_IPermission? /* System.Security.IPermission */) throws -> System_Security_IPermission? /* System.Security.IPermission */ {
		let targetC = target?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Security_IPermission_Union(self.__handle, targetC, &__exceptionC)
		
		let __returnValue = System_Security_IPermission(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Security_IPermission_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Security_IPermission_Destroy(self.__handle)
		
	}
	
	
}


public class System_UnhandledExceptionEventArgs /* System.UnhandledExceptionEventArgs */: System_EventArgs {
	public override class var typeName: String { get {
		"UnhandledExceptionEventArgs"
	}}

	public override class var fullTypeName: String { get {
		"System.UnhandledExceptionEventArgs"
	}}

	public convenience init?(_ exception: System_Object? /* System.Object */, _ isTerminating: Bool /* System.Boolean */) throws {
		let exceptionC = exception?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_Create(exceptionC, isTerminating, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var exceptionObject: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_ExceptionObject_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isTerminating: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_UnhandledExceptionEventArgs_IsTerminating_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_UnhandledExceptionEventArgs_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_UnhandledExceptionEventArgs_Destroy(self.__handle)
		
	}
	
	
}


public class System_Reflection_Assembly_Array /* System.Reflection.Assembly[] */: System_Array {
	public override class var typeName: String { get {
		"Assembly[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Reflection.Assembly[]"
	}}

	
}















public class System_AssemblyLoadEventArgs /* System.AssemblyLoadEventArgs */: System_EventArgs {
	public override class var typeName: String { get {
		"AssemblyLoadEventArgs"
	}}

	public override class var fullTypeName: String { get {
		"System.AssemblyLoadEventArgs"
	}}

	public convenience init?(_ loadedAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */) throws {
		let loadedAssemblyC = loadedAssembly?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AssemblyLoadEventArgs_Create(loadedAssemblyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var loadedAssembly: System_Reflection_Assembly? /* System.Reflection.Assembly */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_AssemblyLoadEventArgs_LoadedAssembly_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AssemblyLoadEventArgs_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AssemblyLoadEventArgs_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_Remoting_ObjectHandle /* System.Runtime.Remoting.ObjectHandle */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"ObjectHandle"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.Remoting.ObjectHandle"
	}}

	public func unwrap() throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Remoting_ObjectHandle_Unwrap(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ o: System_Object? /* System.Object */) throws {
		let oC = o?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_Remoting_ObjectHandle_Create(oC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_Remoting_ObjectHandle_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_Remoting_ObjectHandle_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Timer /* System.Threading.Timer */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"Timer"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Timer"
	}}

	public func change(_ dueTime: Int32 /* System.Int32 */, _ period: Int32 /* System.Int32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func change(_ dueTime: System_TimeSpan? /* System.TimeSpan */, _ period: System_TimeSpan? /* System.TimeSpan */) throws -> Bool /* System.Boolean */ {
		let dueTimeC = dueTime?.__handle
		let periodC = period?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_1(self.__handle, dueTimeC, periodC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func change(_ dueTime: UInt32 /* System.UInt32 */, _ period: UInt32 /* System.UInt32 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_2(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func change(_ dueTime: Int64 /* System.Int64 */, _ period: Int64 /* System.Int64 */) throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Change_3(self.__handle, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func dispose(_ notifyObject: System_Threading_WaitHandle? /* System.Threading.WaitHandle */) throws -> Bool /* System.Boolean */ {
		let notifyObjectC = notifyObject?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Dispose(self.__handle, notifyObjectC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_Timer_Dispose_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ callback: System_Threading_TimerCallback? /* System.Threading.TimerCallback */, _ state: System_Object? /* System.Object */, _ dueTime: Int32 /* System.Int32 */, _ period: Int32 /* System.Int32 */) throws {
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Create(callbackC, stateC, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ callback: System_Threading_TimerCallback? /* System.Threading.TimerCallback */, _ state: System_Object? /* System.Object */, _ dueTime: System_TimeSpan? /* System.TimeSpan */, _ period: System_TimeSpan? /* System.TimeSpan */) throws {
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		let dueTimeC = dueTime?.__handle
		let periodC = period?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Create_1(callbackC, stateC, dueTimeC, periodC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ callback: System_Threading_TimerCallback? /* System.Threading.TimerCallback */, _ state: System_Object? /* System.Object */, _ dueTime: UInt32 /* System.UInt32 */, _ period: UInt32 /* System.UInt32 */) throws {
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Create_2(callbackC, stateC, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ callback: System_Threading_TimerCallback? /* System.Threading.TimerCallback */, _ state: System_Object? /* System.Object */, _ dueTime: Int64 /* System.Int64 */, _ period: Int64 /* System.Int64 */) throws {
		let callbackC = callback?.__handle
		let stateC = state?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Create_3(callbackC, stateC, dueTime, period, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ callback: System_Threading_TimerCallback? /* System.Threading.TimerCallback */) throws {
		let callbackC = callback?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_Create_4(callbackC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var activeCount: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Timer_ActiveCount_Get(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Timer_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Timer_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_CancellationTokenSource /* System.Threading.CancellationTokenSource */: System_Object {
	public override class var typeName: String { get {
		"CancellationTokenSource"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.CancellationTokenSource"
	}}

	public func cancel() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Cancel(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func cancel(_ throwOnFirstException: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Cancel_1(self.__handle, throwOnFirstException, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func cancelAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CancelAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func cancelAfter(_ delay: System_TimeSpan? /* System.TimeSpan */) throws {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_CancelAfter(self.__handle, delayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func cancelAfter(_ millisecondsDelay: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_CancelAfter_1(self.__handle, millisecondsDelay, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func tryReset() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_TryReset(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Threading_CancellationTokenSource_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func createLinkedTokenSource(_ token1: System_Threading_CancellationToken? /* System.Threading.CancellationToken */, _ token2: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let token1C = token1?.__handle
		let token2C = token2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource(token1C, token2C, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createLinkedTokenSource(_ token: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let tokenC = token?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource_1(tokenC, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createLinkedTokenSource(_ tokens: System_Threading_CancellationToken_Array? /* System.Threading.CancellationToken[] */) throws -> System_Threading_CancellationTokenSource? /* System.Threading.CancellationTokenSource */ {
		let tokensC = tokens?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_CreateLinkedTokenSource_2(tokensC, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationTokenSource(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_1(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ delay: System_TimeSpan? /* System.TimeSpan */) throws {
		let delayC = delay?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_2(delayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ millisecondsDelay: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Create_3(millisecondsDelay, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var isCancellationRequested: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_IsCancellationRequested_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var token: System_Threading_CancellationToken? /* System.Threading.CancellationToken */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_CancellationTokenSource_Token_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_CancellationToken(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_CancellationTokenSource_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_CancellationTokenSource_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_CancellationToken_Array /* System.Threading.CancellationToken[] */: System_Array {
	public override class var typeName: String { get {
		"CancellationToken[]"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.CancellationToken[]"
	}}

	
}















public class System_Random /* System.Random */: System_Object {
	public override class var typeName: String { get {
		"Random"
	}}

	public override class var fullTypeName: String { get {
		"System.Random"
	}}

	public func next() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func next(_ maxValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next_1(self.__handle, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func next(_ minValue: Int32 /* System.Int32 */, _ maxValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Next_2(self.__handle, minValue, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextInt64() throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextInt64(_ maxValue: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64_1(self.__handle, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextInt64(_ minValue: Int64 /* System.Int64 */, _ maxValue: Int64 /* System.Int64 */) throws -> Int64 /* System.Int64 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextInt64_2(self.__handle, minValue, maxValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextSingle() throws -> Float /* System.Single */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextSingle(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextDouble() throws -> Double /* System.Double */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_NextDouble(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func nextBytes(_ buffer: System_Byte_Array? /* System.Byte[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Random_NextBytes(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getItems(_ T: System_Type /* System.Type */, _ choices: System_Array? /* System.Array */, _ length: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		let choicesC = choices?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_GetItems_A1(self.__handle, TC, choicesC, length, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func shuffle(_ T: System_Type /* System.Type */, _ values: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Random_Shuffle_A1(self.__handle, TC, valuesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ Seed: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Create_1(Seed, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public class var shared: System_Random? /* System.Random */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Random_Shared_Get(&__exceptionC)
		
		let __returnValue = System_Random(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Random_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Random_Destroy(self.__handle)
		
	}
	
	
}


// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class System_Text_StringBuilder /* System.Text.StringBuilder */: System_Object {
	public override class var typeName: String { get {
		"StringBuilder"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.StringBuilder"
	}}

	public func ensureCapacity(_ capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_EnsureCapacity(self.__handle, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func toString(_ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ToString_1(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func clear() throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Clear(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getChunks() throws -> System_Text_StringBuilder_ChunkEnumerator? /* System.Text.StringBuilder.ChunkEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_GetChunks(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder_ChunkEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: DNChar /* System.Char */, _ repeatCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append(self.__handle, valueC, repeatCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_1(self.__handle, valueC, startIndex, charCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_2(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_3(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_4(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_5(self.__handle, valueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendLine() throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendLine(_ value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyTo(_ sourceIndex: Int32 /* System.Int32 */, _ destination: System_Char_Array? /* System.Char[] */, _ destinationIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let destinationC = destination?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_CopyTo(self.__handle, sourceIndex, destinationC, destinationIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_String? /* System.String */, _ count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert(self.__handle, index, valueC, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func remove(_ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Remove(self.__handle, startIndex, length, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Bool /* System.Boolean */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_6(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: DNChar /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_7(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Int8 /* System.SByte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_8(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: UInt8 /* System.Byte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_9(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Int16 /* System.Int16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_10(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_11(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Int64 /* System.Int64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_12(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Float /* System.Single */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_13(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: Double /* System.Double */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_14(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Decimal? /* System.Decimal */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_15(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: UInt16 /* System.UInt16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_16(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: UInt32 /* System.UInt32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_17(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: UInt64 /* System.UInt64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_18(self.__handle, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_19(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ value: System_Char_Array? /* System.Char[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_20(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_21(self.__handle, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		handler = System_Text_StringBuilder_AppendInterpolatedStringHandler(handle: handlerC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func append(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Append_22(self.__handle, providerC, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		handler = System_Text_StringBuilder_AppendInterpolatedStringHandler(handle: handlerC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendLine(_ handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_2(self.__handle, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		handler = System_Text_StringBuilder_AppendInterpolatedStringHandler(handle: handlerC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendLine(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ handler: inout System_Text_StringBuilder_AppendInterpolatedStringHandler? /* System.Text.StringBuilder.AppendInterpolatedStringHandler */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		var handlerC = handler?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendLine_3(self.__handle, providerC, &handlerC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		handler = System_Text_StringBuilder_AppendInterpolatedStringHandler(handle: handlerC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendJoin(_ separator: System_String? /* System.String */, _ values: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendJoin(_ separator: System_String? /* System.String */, _ values: System_String_Array? /* System.String[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator?.__handle
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_1(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendJoin(_ separator: DNChar /* System.Char */, _ values: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator.cValue
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_2(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendJoin(_ separator: DNChar /* System.Char */, _ values: System_String_Array? /* System.String[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let separatorC = separator.cValue
		let valuesC = values?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendJoin_3(self.__handle, separatorC, valuesC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_1(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Bool /* System.Boolean */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_2(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Int8 /* System.SByte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_3(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: UInt8 /* System.Byte */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_4(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Int16 /* System.Int16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_5(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: DNChar /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_6(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Char_Array? /* System.Char[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_7(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Char_Array? /* System.Char[] */, _ startIndex: Int32 /* System.Int32 */, _ charCount: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_8(self.__handle, index, valueC, startIndex, charCount, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_9(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Int64 /* System.Int64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_10(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Float /* System.Single */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_11(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: Double /* System.Double */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_12(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Decimal? /* System.Decimal */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_13(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: UInt16 /* System.UInt16 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_14(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: UInt32 /* System.UInt32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_15(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: UInt64 /* System.UInt64 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_16(self.__handle, index, value, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func insert(_ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Insert_17(self.__handle, index, valueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat(self.__handle, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_1(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_2(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ format: System_String? /* System.String */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_3(self.__handle, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_4(self.__handle, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_5(self.__handle, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_6(self.__handle, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_String? /* System.String */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_7(self.__handle, providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ TArg0: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A1(self.__handle, TArg0C, providerC, formatC, arg0C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ TArg0: System_Type /* System.Type */, _ TArg1: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A2(self.__handle, TArg0C, TArg1C, providerC, formatC, arg0C, arg1C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ TArg0: System_Type /* System.Type */, _ TArg1: System_Type /* System.Type */, _ TArg2: System_Type /* System.Type */, _ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let TArg0C = TArg0.__handle
		let TArg1C = TArg1.__handle
		let TArg2C = TArg2.__handle
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_A3(self.__handle, TArg0C, TArg1C, TArg2C, providerC, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendFormat(_ provider: System_IFormatProvider? /* System.IFormatProvider */, _ format: System_Text_CompositeFormat? /* System.Text.CompositeFormat */, _ args: System_Object_Array? /* System.Object[] */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let providerC = provider?.__handle
		let formatC = format?.__handle
		let argsC = args?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendFormat_8(self.__handle, providerC, formatC, argsC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldValue: System_String? /* System.String */, _ newValue: System_String? /* System.String */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace(self.__handle, oldValueC, newValueC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func equals(_ sb: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws -> Bool /* System.Boolean */ {
		let sbC = sb?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Equals(self.__handle, sbC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func replace(_ oldValue: System_String? /* System.String */, _ newValue: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldValueC = oldValue?.__handle
		let newValueC = newValue?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_1(self.__handle, oldValueC, newValueC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldChar: DNChar /* System.Char */, _ newChar: DNChar /* System.Char */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldCharC = oldChar.cValue
		let newCharC = newChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_2(self.__handle, oldCharC, newCharC, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ oldChar: DNChar /* System.Char */, _ newChar: DNChar /* System.Char */, _ startIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Text_StringBuilder? /* System.Text.StringBuilder */ {
		let oldCharC = oldChar.cValue
		let newCharC = newChar.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Replace_3(self.__handle, oldCharC, newCharC, startIndex, count, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_1(capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_2(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: System_String? /* System.String */, _ capacity: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_3(valueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ value: System_String? /* System.String */, _ startIndex: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */, _ capacity: Int32 /* System.Int32 */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_4(valueC, startIndex, length, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ capacity: Int32 /* System.Int32 */, _ maxCapacity: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Create_5(capacity, maxCapacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var capacity: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Capacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func capacity_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_Capacity_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var maxCapacity: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_MaxCapacity_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var length: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func length_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_Length_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public func chars(_ index: Int32 /* System.Int32 */) throws -> DNChar /* System.Char */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_Chars_Get(self.__handle, index, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func chars_set(_ index: Int32 /* System.Int32 */, _ value: DNChar /* System.Char */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_Chars_Set(self.__handle, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_StringBuilder_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_StringBuilder_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_StringBuilder_ChunkEnumerator /* System.Text.StringBuilder.ChunkEnumerator */: System_ValueType {
	public override class var typeName: String { get {
		"ChunkEnumerator"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.StringBuilder.ChunkEnumerator"
	}}

	public func getEnumerator() throws -> System_Text_StringBuilder_ChunkEnumerator? /* System.Text.StringBuilder.ChunkEnumerator */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ChunkEnumerator_GetEnumerator(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_StringBuilder_ChunkEnumerator(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func moveNext() throws -> Bool /* System.Boolean */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_ChunkEnumerator_MoveNext(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_StringBuilder_ChunkEnumerator_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_StringBuilder_ChunkEnumerator_Destroy(self.__handle)
		
	}
	
	
}


public class System_Text_StringBuilder_AppendInterpolatedStringHandler /* System.Text.StringBuilder.AppendInterpolatedStringHandler */: System_ValueType {
	public override class var typeName: String { get {
		"AppendInterpolatedStringHandler"
	}}

	public override class var fullTypeName: String { get {
		"System.Text.StringBuilder.AppendInterpolatedStringHandler"
	}}

	public func appendLiteral(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendLiteral(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1(self.__handle, TC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */, _ format: System_String? /* System.String */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_1(self.__handle, TC, valueC, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */, _ alignment: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_2(self.__handle, TC, valueC, alignment, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */, _ alignment: Int32 /* System.Int32 */, _ format: System_String? /* System.String */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_3(self.__handle, TC, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ value: System_String? /* System.String */, _ alignment: Int32 /* System.Int32 */, _ format: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_2(self.__handle, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func appendFormatted(_ value: System_Object? /* System.Object */, _ alignment: Int32 /* System.Int32 */, _ format: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		let formatC = format?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_3(self.__handle, valueC, alignment, formatC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ literalLength: Int32 /* System.Int32 */, _ formattedCount: Int32 /* System.Int32 */, _ stringBuilder: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let stringBuilderC = stringBuilder?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendInterpolatedStringHandler_Create(literalLength, formattedCount, stringBuilderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ literalLength: Int32 /* System.Int32 */, _ formattedCount: Int32 /* System.Int32 */, _ stringBuilder: System_Text_StringBuilder? /* System.Text.StringBuilder */, _ provider: System_IFormatProvider? /* System.IFormatProvider */) throws {
		let stringBuilderC = stringBuilder?.__handle
		let providerC = provider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Text_StringBuilder_AppendInterpolatedStringHandler_Create_1(literalLength, formattedCount, stringBuilderC, providerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Text_StringBuilder_AppendInterpolatedStringHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Text_StringBuilder_AppendInterpolatedStringHandler_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
public class System_IO_Path /* System.IO.Path */: System_Object {
	public override class var typeName: String { get {
		"Path"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.Path"
	}}

	public class func changeExtension(_ path: System_String? /* System.String */, _ `extension`: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let extensionC = `extension`?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_ChangeExtension(pathC, extensionC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func exists(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getDirectoryName(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetDirectoryName(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getExtension(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetExtension(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileName(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFileName(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileNameWithoutExtension(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFileNameWithoutExtension(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getRandomFileName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetRandomFileName(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isPathFullyQualified(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_IsPathFullyQualified(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func hasExtension(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_HasExtension(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func combine(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine(path1C, path2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func combine(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */, _ path3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_1(path1C, path2C, path3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func combine(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */, _ path3: System_String? /* System.String */, _ path4: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		let path4C = path4?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_2(path1C, path2C, path3C, path4C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func combine(_ paths: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let pathsC = paths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Combine_3(pathsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join(path1C, path2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */, _ path3: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_1(path1C, path2C, path3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ path1: System_String? /* System.String */, _ path2: System_String? /* System.String */, _ path3: System_String? /* System.String */, _ path4: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let path1C = path1?.__handle
		let path2C = path2?.__handle
		let path3C = path3?.__handle
		let path4C = path4?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_2(path1C, path2C, path3C, path4C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func join(_ paths: System_String_Array? /* System.String[] */) throws -> System_String? /* System.String */ {
		let pathsC = paths?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_Join_3(pathsC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getRelativePath(_ relativeTo: System_String? /* System.String */, _ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let relativeToC = relativeTo?.__handle
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetRelativePath(relativeToC, pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func trimEndingDirectorySeparator(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_TrimEndingDirectorySeparator(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func endsInDirectorySeparator(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_EndsInDirectorySeparator(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getInvalidFileNameChars() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetInvalidFileNameChars(&__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getInvalidPathChars() throws -> System_Char_Array? /* System.Char[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetInvalidPathChars(&__exceptionC)
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFullPath(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFullPath(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFullPath(_ path: System_String? /* System.String */, _ basePath: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let basePathC = basePath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetFullPath_1(pathC, basePathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTempPath() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetTempPath(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getTempFileName() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetTempFileName(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func isPathRooted(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_IsPathRooted(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getPathRoot(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Path_GetPathRoot(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var directorySeparatorChar: DNChar /* System.Char */ { get {
		
		
		let __returnValueC = System_IO_Path_DirectorySeparatorChar_Get()
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var altDirectorySeparatorChar: DNChar /* System.Char */ { get {
		
		
		let __returnValueC = System_IO_Path_AltDirectorySeparatorChar_Get()
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var volumeSeparatorChar: DNChar /* System.Char */ { get {
		
		
		let __returnValueC = System_IO_Path_VolumeSeparatorChar_Get()
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var pathSeparator: DNChar /* System.Char */ { get {
		
		
		let __returnValueC = System_IO_Path_PathSeparator_Get()
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var invalidPathChars: System_Char_Array? /* System.Char[] */ { get {
		
		
		let __returnValueC = System_IO_Path_InvalidPathChars_Get()
		
		let __returnValue = System_Char_Array(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_Path_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_Path_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_File /* System.IO.File */: System_Object {
	public override class var typeName: String { get {
		"File"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.File"
	}}

	public class func openText(_ path: System_String? /* System.String */) throws -> System_IO_StreamReader? /* System.IO.StreamReader */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createText(_ path: System_String? /* System.String */) throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_CreateText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func appendText(_ path: System_String? /* System.String */) throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendText(pathC, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func copy(_ sourceFileName: System_String? /* System.String */, _ destFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Copy(sourceFileNameC, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func copy(_ sourceFileName: System_String? /* System.String */, _ destFileName: System_String? /* System.String */, _ overwrite: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Copy_1(sourceFileNameC, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func create(_ path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_1(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func create(_ path: System_String? /* System.String */, _ bufferSize: Int32 /* System.Int32 */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_2(pathC, bufferSize, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func create(_ path: System_String? /* System.String */, _ bufferSize: Int32 /* System.Int32 */, _ options: System_IO_FileOptions /* System.IO.FileOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Create_3(pathC, bufferSize, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func delete(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Delete(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func exists(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func `open`(_ path: System_String? /* System.String */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_1(pathC, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func `open`(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_2(pathC, modeC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func `open`(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_3(pathC, modeC, accessC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func `open`(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_Open_4(pathC, modeC, accessC, shareC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func openHandle(_ path: System_String? /* System.String */, _ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */, _ options: System_IO_FileOptions /* System.IO.FileOptions */, _ preallocationSize: Int64 /* System.Int64 */) throws -> Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */ {
		let pathC = path?.__handle
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		let optionsC = options.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenHandle(pathC, modeC, accessC, shareC, optionsC, preallocationSize, &__exceptionC)
		
		let __returnValue = Microsoft_Win32_SafeHandles_SafeFileHandle(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setCreationTime(_ path: System_String? /* System.String */, _ creationTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTime(pathC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setCreationTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ creationTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTime_1(fileHandleC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setCreationTimeUtc(_ path: System_String? /* System.String */, _ creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTimeUtc(pathC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setCreationTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetCreationTimeUtc_1(fileHandleC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getCreationTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCreationTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCreationTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCreationTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetCreationTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setLastAccessTime(_ path: System_String? /* System.String */, _ lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTime(pathC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastAccessTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTime_1(fileHandleC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastAccessTimeUtc(_ path: System_String? /* System.String */, _ lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTimeUtc(pathC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastAccessTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastAccessTimeUtc_1(fileHandleC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastAccessTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastAccessTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastAccessTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastAccessTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastAccessTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setLastWriteTime(_ path: System_String? /* System.String */, _ lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTime(pathC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastWriteTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTime_1(fileHandleC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastWriteTimeUtc(_ path: System_String? /* System.String */, _ lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTimeUtc(pathC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastWriteTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let fileHandleC = fileHandle?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetLastWriteTimeUtc_1(fileHandleC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastWriteTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastWriteTime(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTime_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastWriteTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastWriteTimeUtc(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_DateTime? /* System.DateTime */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetLastWriteTimeUtc_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getAttributes(_ path: System_String? /* System.String */) throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetAttributes(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getAttributes(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_IO_FileAttributes /* System.IO.FileAttributes */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetAttributes_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setAttributes(_ path: System_String? /* System.String */, _ fileAttributes: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let pathC = path?.__handle
		let fileAttributesC = fileAttributes.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetAttributes(pathC, fileAttributesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setAttributes(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ fileAttributes: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let fileHandleC = fileHandle?.__handle
		let fileAttributesC = fileAttributes.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetAttributes_1(fileHandleC, fileAttributesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getUnixFileMode(_ path: System_String? /* System.String */) throws -> System_IO_UnixFileMode /* System.IO.UnixFileMode */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetUnixFileMode(pathC, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getUnixFileMode(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */) throws -> System_IO_UnixFileMode /* System.IO.UnixFileMode */ {
		let fileHandleC = fileHandle?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_GetUnixFileMode_1(fileHandleC, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setUnixFileMode(_ path: System_String? /* System.String */, _ mode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let pathC = path?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetUnixFileMode(pathC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setUnixFileMode(_ fileHandle: Microsoft_Win32_SafeHandles_SafeFileHandle? /* Microsoft.Win32.SafeHandles.SafeFileHandle */, _ mode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let fileHandleC = fileHandle?.__handle
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_SetUnixFileMode_1(fileHandleC, modeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func openRead(_ path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenRead(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func openWrite(_ path: System_String? /* System.String */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_OpenWrite(pathC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllText(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllText(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllText(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllText_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllText(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllText(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeAllText(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllText_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func readAllBytes(_ path: System_String? /* System.String */) throws -> System_Byte_Array? /* System.Byte[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllBytes(pathC, &__exceptionC)
		
		let __returnValue = System_Byte_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllBytes(_ path: System_String? /* System.String */, _ bytes: System_Byte_Array? /* System.Byte[] */) throws {
		let pathC = path?.__handle
		let bytesC = bytes?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllBytes(pathC, bytesC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func readAllLines(_ path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLines(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllLines(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLines_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readLines(_ path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLines(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readLines(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLines_1(pathC, encodingC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readLinesAsync(_ path: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Collections_Generic_IAsyncEnumerable_A1? /* System.Collections.Generic.IAsyncEnumerable<System.String> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLinesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IAsyncEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readLinesAsync(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Collections_Generic_IAsyncEnumerable_A1? /* System.Collections.Generic.IAsyncEnumerable<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadLinesAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IAsyncEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllLines(_ path: System_String? /* System.String */, _ contents: System_String_Array? /* System.String[] */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeAllLines(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_1(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeAllLines(_ path: System_String? /* System.String */, _ contents: System_String_Array? /* System.String[] */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_2(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func writeAllLines(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_WriteAllLines_3(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func appendAllText(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllText(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func appendAllText(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllText_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func appendAllLines(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllLines(pathC, contentsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func appendAllLines(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_AppendAllLines_1(pathC, contentsC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func replace(_ sourceFileName: System_String? /* System.String */, _ destinationFileName: System_String? /* System.String */, _ destinationBackupFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Replace(sourceFileNameC, destinationFileNameC, destinationBackupFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func replace(_ sourceFileName: System_String? /* System.String */, _ destinationFileName: System_String? /* System.String */, _ destinationBackupFileName: System_String? /* System.String */, _ ignoreMetadataErrors: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Replace_1(sourceFileNameC, destinationFileNameC, destinationBackupFileNameC, ignoreMetadataErrors, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func move(_ sourceFileName: System_String? /* System.String */, _ destFileName: System_String? /* System.String */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Move(sourceFileNameC, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func move(_ sourceFileName: System_String? /* System.String */, _ destFileName: System_String? /* System.String */, _ overwrite: Bool /* System.Boolean */) throws {
		let sourceFileNameC = sourceFileName?.__handle
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Move_1(sourceFileNameC, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func encrypt(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Encrypt(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func decrypt(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_File_Decrypt(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func readAllTextAsync(_ path: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllTextAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllTextAsync(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllTextAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllTextAsync(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllTextAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllTextAsync(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllTextAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllBytesAsync(_ path: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Byte[]> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllBytesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllBytesAsync(_ path: System_String? /* System.String */, _ bytes: System_Byte_Array? /* System.Byte[] */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let bytesC = bytes?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllBytesAsync(pathC, bytesC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllLinesAsync(_ path: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String[]> */ {
		let pathC = path?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLinesAsync(pathC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func readAllLinesAsync(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String[]> */ {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ReadAllLinesAsync_1(pathC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllLinesAsync(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllLinesAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func writeAllLinesAsync(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_WriteAllLinesAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func appendAllTextAsync(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllTextAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func appendAllTextAsync(_ path: System_String? /* System.String */, _ contents: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllTextAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func appendAllLinesAsync(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllLinesAsync(pathC, contentsC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func appendAllLinesAsync(_ path: System_String? /* System.String */, _ contents: System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let pathC = path?.__handle
		let contentsC = contents?.__handle
		let encodingC = encoding?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_AppendAllLinesAsync_1(pathC, contentsC, encodingC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createSymbolicLink(_ path: System_String? /* System.String */, _ pathToTarget: System_String? /* System.String */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let pathC = path?.__handle
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_CreateSymbolicLink(pathC, pathToTargetC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func resolveLinkTarget(_ linkPath: System_String? /* System.String */, _ returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let linkPathC = linkPath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_File_ResolveLinkTarget(linkPathC, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_File_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_File_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_StreamReader /* System.IO.StreamReader */: System_IO_TextReader {
	public override class var typeName: String { get {
		"StreamReader"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.StreamReader"
	}}

	public override func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamReader_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func discardBufferedData() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamReader_DiscardBufferedData(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func peek() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Peek(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func read() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Read(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func read(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Read_1(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func readToEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readBlock(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadBlock(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override func readLine() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readLineAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readToEndAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEndAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readToEndAsync(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadToEndAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func readBlockAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_ReadBlockAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create(streamC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_1(streamC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_2(streamC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_3(streamC, encodingC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_4(streamC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, _ bufferSize: Int32 /* System.Int32 */, _ leaveOpen: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_5(streamC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_6(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_7(pathC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_8(pathC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_9(pathC, encodingC, detectEncodingFromByteOrderMarks, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_10(pathC, encodingC, detectEncodingFromByteOrderMarks, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_11(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ detectEncodingFromByteOrderMarks: Bool /* System.Boolean */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_Create_12(pathC, encodingC, detectEncodingFromByteOrderMarks, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var currentEncoding: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_CurrentEncoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var baseStream: System_IO_Stream? /* System.IO.Stream */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_BaseStream_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var endOfStream: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamReader_EndOfStream_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var null: System_IO_StreamReader? /* System.IO.StreamReader */ { get {
		
		
		let __returnValueC = System_IO_StreamReader_Null_Get()
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_StreamReader_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_StreamReader_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_TextReader /* System.IO.TextReader */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"TextReader"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.TextReader"
	}}

	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextReader_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextReader_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func peek() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Peek(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func read() throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Read(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func read(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Read_1(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func readToEnd() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEnd(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readBlock(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadBlock(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func readLine() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadLine(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readLineAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readToEndAsync() throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEndAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readToEndAsync(_ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.String> */ {
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadToEndAsync_1(self.__handle, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func readBlockAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task_A1? /* System.Threading.Tasks.Task<System.Int32> */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_ReadBlockAsync(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func synchronized(_ reader: System_IO_TextReader? /* System.IO.TextReader */) throws -> System_IO_TextReader? /* System.IO.TextReader */ {
		let readerC = reader?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextReader_Synchronized(readerC, &__exceptionC)
		
		let __returnValue = System_IO_TextReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var null: System_IO_TextReader? /* System.IO.TextReader */ { get {
		
		
		let __returnValueC = System_IO_TextReader_Null_Get()
		
		let __returnValue = System_IO_TextReader(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_TextReader_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_TextReader_Destroy(self.__handle)
		
	}
	
	
}










public class System_IO_StreamWriter /* System.IO.StreamWriter */: System_IO_TextWriter {
	public override class var typeName: String { get {
		"StreamWriter"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.StreamWriter"
	}}

	public override func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ value: DNChar /* System.Char */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_1(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_3(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeLine(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_4(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_5(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_6(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func write(_ format: System_String? /* System.String */, _ arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_Write_7(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_1(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_2(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_3(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeLine(_ format: System_String? /* System.String */, _ arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_WriteLine_4(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func writeAsync(_ value: DNChar /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeAsync(_ value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteAsync_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeLineAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeLineAsync(_ value: DNChar /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeLineAsync(_ value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_2(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func writeLineAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_WriteLineAsync_3(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */) throws {
		let streamC = stream?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create(streamC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_1(streamC, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_2(streamC, encodingC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ stream: System_IO_Stream? /* System.IO.Stream */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ bufferSize: Int32 /* System.Int32 */, _ leaveOpen: Bool /* System.Boolean */) throws {
		let streamC = stream?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_3(streamC, encodingC, bufferSize, leaveOpen, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_4(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ append: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_5(pathC, append, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ append: Bool /* System.Boolean */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_6(pathC, append, encodingC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ append: Bool /* System.Boolean */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ bufferSize: Int32 /* System.Int32 */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_7(pathC, append, encodingC, bufferSize, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_8(pathC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */, _ encoding: System_Text_Encoding? /* System.Text.Encoding */, _ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws {
		let pathC = path?.__handle
		let encodingC = encoding?.__handle
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Create_9(pathC, encodingC, optionsC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var autoFlush: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_AutoFlush_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func autoFlush_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_StreamWriter_AutoFlush_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var baseStream: System_IO_Stream? /* System.IO.Stream */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_BaseStream_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_Stream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override var encoding: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_StreamWriter_Encoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var null: System_IO_StreamWriter? /* System.IO.StreamWriter */ { get {
		
		
		let __returnValueC = System_IO_StreamWriter_Null_Get()
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_StreamWriter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_StreamWriter_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_TextWriter /* System.IO.TextWriter */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"TextWriter"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.TextWriter"
	}}

	public func close() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Close(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func dispose() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Dispose(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func disposeAsync() throws -> System_Threading_Tasks_ValueTask? /* System.Threading.Tasks.ValueTask */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_DisposeAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_ValueTask(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func flush() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Flush(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: DNChar /* System.Char */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_1(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_2(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_3(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_4(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_5(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_6(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_7(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_8(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_9(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: System_Decimal? /* System.Decimal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_10(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_11(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_12(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_13(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_14(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_15(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_16(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func write(_ format: System_String? /* System.String */, _ arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_Write_17(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: DNChar /* System.Char */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_1(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ buffer: System_Char_Array? /* System.Char[] */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_2(self.__handle, bufferC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_3(self.__handle, bufferC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_4(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_5(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: UInt32 /* System.UInt32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_6(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: Int64 /* System.Int64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_7(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: UInt64 /* System.UInt64 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_8(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: Float /* System.Single */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_9(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: Double /* System.Double */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_10(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: System_Decimal? /* System.Decimal */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_11(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_12(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_13(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ value: System_Object? /* System.Object */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_14(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_15(self.__handle, formatC, arg0C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_16(self.__handle, formatC, arg0C, arg1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ format: System_String? /* System.String */, _ arg0: System_Object? /* System.Object */, _ arg1: System_Object? /* System.Object */, _ arg2: System_Object? /* System.Object */) throws {
		let formatC = format?.__handle
		let arg0C = arg0?.__handle
		let arg1C = arg1?.__handle
		let arg2C = arg2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_17(self.__handle, formatC, arg0C, arg1C, arg2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeLine(_ format: System_String? /* System.String */, _ arg: System_Object_Array? /* System.Object[] */) throws {
		let formatC = format?.__handle
		let argC = arg?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_WriteLine_18(self.__handle, formatC, argC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func writeAsync(_ value: DNChar /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeAsync(_ value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeAsync(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_2(self.__handle, valueC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeAsync(_ buffer: System_Char_Array? /* System.Char[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_3(self.__handle, bufferC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteAsync_4(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync(_ value: DNChar /* System.Char */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync(_ value: System_String? /* System.String */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_1(self.__handle, valueC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync(_ value: System_Text_StringBuilder? /* System.Text.StringBuilder */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let valueC = value?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_2(self.__handle, valueC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync(_ buffer: System_Char_Array? /* System.Char[] */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_3(self.__handle, bufferC, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync(_ buffer: System_Char_Array? /* System.Char[] */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		let bufferC = buffer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_4(self.__handle, bufferC, index, count, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func writeLineAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_WriteLineAsync_5(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func flushAsync() throws -> System_Threading_Tasks_Task? /* System.Threading.Tasks.Task */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_FlushAsync(self.__handle, &__exceptionC)
		
		let __returnValue = System_Threading_Tasks_Task(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func synchronized(_ writer: System_IO_TextWriter? /* System.IO.TextWriter */) throws -> System_IO_TextWriter? /* System.IO.TextWriter */ {
		let writerC = writer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_Synchronized(writerC, &__exceptionC)
		
		let __returnValue = System_IO_TextWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var formatProvider: System_IFormatProvider? /* System.IFormatProvider */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_FormatProvider_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IFormatProvider(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var encoding: System_Text_Encoding? /* System.Text.Encoding */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_Encoding_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Text_Encoding(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var newLine: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_TextWriter_NewLine_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func newLine_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_TextWriter_NewLine_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public class var null: System_IO_TextWriter? /* System.IO.TextWriter */ { get {
		
		
		let __returnValueC = System_IO_TextWriter_Null_Get()
		
		let __returnValue = System_IO_TextWriter(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_TextWriter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_TextWriter_Destroy(self.__handle)
		
	}
	
	
}






















public class System_IO_FileSystemInfo /* System.IO.FileSystemInfo */: System_MarshalByRefObject {
	public override class var typeName: String { get {
		"FileSystemInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileSystemInfo"
	}}

	public func getObjectData(_ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_GetObjectData(self.__handle, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func createAsSymbolicLink(_ pathToTarget: System_String? /* System.String */) throws {
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreateAsSymbolicLink(self.__handle, pathToTargetC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func resolveLinkTarget(_ returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_ResolveLinkTarget(self.__handle, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func toString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_ToString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func refresh() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Refresh(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public var fullName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var `extension`: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Extension_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var exists: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var creationTime: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_CreationTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func creationTime_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreationTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var creationTimeUtc: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_CreationTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func creationTimeUtc_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_CreationTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var lastAccessTime: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastAccessTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func lastAccessTime_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastAccessTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var lastAccessTimeUtc: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastAccessTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func lastAccessTimeUtc_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastAccessTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var lastWriteTime: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastWriteTime_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func lastWriteTime_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastWriteTime_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var lastWriteTimeUtc: System_DateTime? /* System.DateTime */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LastWriteTimeUtc_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func lastWriteTimeUtc_set(_ value: System_DateTime? /* System.DateTime */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_LastWriteTimeUtc_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var linkTarget: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_LinkTarget_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var unixFileMode: System_IO_UnixFileMode /* System.IO.UnixFileMode */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_UnixFileMode_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_UnixFileMode(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func unixFileMode_set(_ value: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_UnixFileMode_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var attributes: System_IO_FileAttributes /* System.IO.FileAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileSystemInfo_Attributes_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func attributes_set(_ value: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileSystemInfo_Attributes_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileSystemInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_FileSystemInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_FileInfo /* System.IO.FileInfo */: System_IO_FileSystemInfo {
	public override class var typeName: String { get {
		"FileInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileInfo"
	}}

	public func `open`(_ options: System_IO_FileStreamOptions? /* System.IO.FileStreamOptions */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let optionsC = options?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open(self.__handle, optionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func openText() throws -> System_IO_StreamReader? /* System.IO.StreamReader */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamReader(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func createText() throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CreateText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func appendText() throws -> System_IO_StreamWriter? /* System.IO.StreamWriter */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_AppendText(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_StreamWriter(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyTo(_ destFileName: System_String? /* System.String */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CopyTo(self.__handle, destFileNameC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func copyTo(_ destFileName: System_String? /* System.String */, _ overwrite: Bool /* System.Boolean */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_CopyTo_1(self.__handle, destFileNameC, overwrite, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func create() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Create_1(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func `open`(_ mode: System_IO_FileMode /* System.IO.FileMode */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_1(self.__handle, modeC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func `open`(_ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		let accessC = access.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_2(self.__handle, modeC, accessC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func `open`(_ mode: System_IO_FileMode /* System.IO.FileMode */, _ access: System_IO_FileAccess /* System.IO.FileAccess */, _ share: System_IO_FileShare /* System.IO.FileShare */) throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		let modeC = mode.cValue
		let accessC = access.cValue
		let shareC = share.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Open_3(self.__handle, modeC, accessC, shareC, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func openRead() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenRead(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func openWrite() throws -> System_IO_FileStream? /* System.IO.FileStream */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_OpenWrite(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileStream(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func moveTo(_ destFileName: System_String? /* System.String */) throws {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_MoveTo(self.__handle, destFileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func moveTo(_ destFileName: System_String? /* System.String */, _ overwrite: Bool /* System.Boolean */) throws {
		let destFileNameC = destFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_MoveTo_1(self.__handle, destFileNameC, overwrite, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func replace(_ destinationFileName: System_String? /* System.String */, _ destinationBackupFileName: System_String? /* System.String */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Replace(self.__handle, destinationFileNameC, destinationBackupFileNameC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func replace(_ destinationFileName: System_String? /* System.String */, _ destinationBackupFileName: System_String? /* System.String */, _ ignoreMetadataErrors: Bool /* System.Boolean */) throws -> System_IO_FileInfo? /* System.IO.FileInfo */ {
		let destinationFileNameC = destinationFileName?.__handle
		let destinationBackupFileNameC = destinationBackupFileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Replace_1(self.__handle, destinationFileNameC, destinationBackupFileNameC, ignoreMetadataErrors, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func decrypt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Decrypt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func encrypt() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_Encrypt(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ fileName: System_String? /* System.String */) throws {
		let fileNameC = fileName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Create_2(fileNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var length: Int64 /* System.Int64 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var directoryName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_DirectoryName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var directory: System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Directory_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var isReadOnly: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_IsReadOnly_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func isReadOnly_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_FileInfo_IsReadOnly_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override var exists: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_FileInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_FileInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_FileInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_DirectoryInfo /* System.IO.DirectoryInfo */: System_IO_FileSystemInfo {
	public override class var typeName: String { get {
		"DirectoryInfo"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.DirectoryInfo"
	}}

	public func createSubdirectory(_ path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_CreateSubdirectory(self.__handle, pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func create() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Create_1(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getFiles() throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFiles(_ searchPattern: System_String? /* System.String */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFiles(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFiles(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_FileInfo_Array? /* System.IO.FileInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFiles_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFileSystemInfos() throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFileSystemInfos(_ searchPattern: System_String? /* System.String */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFileSystemInfos(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getFileSystemInfos(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_FileSystemInfo_Array? /* System.IO.FileSystemInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetFileSystemInfos_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDirectories() throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDirectories(_ searchPattern: System_String? /* System.String */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDirectories(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDirectories(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_IO_DirectoryInfo_Array? /* System.IO.DirectoryInfo[] */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_GetDirectories_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateDirectories() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateDirectories(_ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateDirectories(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateDirectories(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateDirectories_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFiles() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFiles(_ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFiles(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFiles(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFiles_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFileSystemInfos() throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFileSystemInfos(_ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_1(self.__handle, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFileSystemInfos(_ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_2(self.__handle, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func enumerateFileSystemInfos(_ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> */ {
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_EnumerateFileSystemInfos_3(self.__handle, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func moveTo(_ destDirName: System_String? /* System.String */) throws {
		let destDirNameC = destDirName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_MoveTo(self.__handle, destDirNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public override func delete() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Delete(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func delete(_ recursive: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_DirectoryInfo_Delete_1(self.__handle, recursive, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Create_2(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var parent: System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Parent_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var root: System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Root_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override var exists: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_DirectoryInfo_Exists_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_DirectoryInfo_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_DirectoryInfo_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_FileInfo_Array /* System.IO.FileInfo[] */: System_Array {
	public override class var typeName: String { get {
		"FileInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileInfo[]"
	}}

	
}















public class System_IO_EnumerationOptions /* System.IO.EnumerationOptions */: System_Object {
	public override class var typeName: String { get {
		"EnumerationOptions"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.EnumerationOptions"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var recurseSubdirectories: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_RecurseSubdirectories_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func recurseSubdirectories_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_RecurseSubdirectories_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var ignoreInaccessible: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_IgnoreInaccessible_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func ignoreInaccessible_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_IgnoreInaccessible_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var bufferSize: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_BufferSize_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func bufferSize_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_BufferSize_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var attributesToSkip: System_IO_FileAttributes /* System.IO.FileAttributes */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_AttributesToSkip_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_FileAttributes(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func attributesToSkip_set(_ value: System_IO_FileAttributes /* System.IO.FileAttributes */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_AttributesToSkip_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var matchType: System_IO_MatchType /* System.IO.MatchType */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MatchType_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_MatchType(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func matchType_set(_ value: System_IO_MatchType /* System.IO.MatchType */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MatchType_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var matchCasing: System_IO_MatchCasing /* System.IO.MatchCasing */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MatchCasing_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_IO_MatchCasing(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func matchCasing_set(_ value: System_IO_MatchCasing /* System.IO.MatchCasing */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MatchCasing_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var maxRecursionDepth: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_MaxRecursionDepth_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func maxRecursionDepth_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_MaxRecursionDepth_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var returnSpecialDirectories: Bool /* System.Boolean */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_EnumerationOptions_ReturnSpecialDirectories_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func returnSpecialDirectories_set(_ value: Bool /* System.Boolean */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_EnumerationOptions_ReturnSpecialDirectories_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_EnumerationOptions_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_EnumerationOptions_Destroy(self.__handle)
		
	}
	
	
}


public class System_IO_FileSystemInfo_Array /* System.IO.FileSystemInfo[] */: System_Array {
	public override class var typeName: String { get {
		"FileSystemInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.FileSystemInfo[]"
	}}

	
}















public class System_IO_DirectoryInfo_Array /* System.IO.DirectoryInfo[] */: System_Array {
	public override class var typeName: String { get {
		"DirectoryInfo[]"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.DirectoryInfo[]"
	}}

	
}















public class System_IO_Directory /* System.IO.Directory */: System_Object {
	public override class var typeName: String { get {
		"Directory"
	}}

	public override class var fullTypeName: String { get {
		"System.IO.Directory"
	}}

	public class func getParent(_ path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetParent(pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createDirectory(_ path: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateDirectory(pathC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createDirectory(_ path: System_String? /* System.String */, _ unixCreateMode: System_IO_UnixFileMode /* System.IO.UnixFileMode */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let pathC = path?.__handle
		let unixCreateModeC = unixCreateMode.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateDirectory_1(pathC, unixCreateModeC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createTempSubdirectory(_ prefix: System_String? /* System.String */) throws -> System_IO_DirectoryInfo? /* System.IO.DirectoryInfo */ {
		let prefixC = prefix?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateTempSubdirectory(prefixC, &__exceptionC)
		
		let __returnValue = System_IO_DirectoryInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func exists(_ path: System_String? /* System.String */) throws -> Bool /* System.Boolean */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_Exists(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func setCreationTime(_ path: System_String? /* System.String */, _ creationTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeC = creationTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCreationTime(pathC, creationTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setCreationTimeUtc(_ path: System_String? /* System.String */, _ creationTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let creationTimeUtcC = creationTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCreationTimeUtc(pathC, creationTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getCreationTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCreationTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCreationTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCreationTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setLastWriteTime(_ path: System_String? /* System.String */, _ lastWriteTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeC = lastWriteTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastWriteTime(pathC, lastWriteTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastWriteTimeUtc(_ path: System_String? /* System.String */, _ lastWriteTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastWriteTimeUtcC = lastWriteTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastWriteTimeUtc(pathC, lastWriteTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastWriteTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastWriteTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastWriteTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastWriteTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setLastAccessTime(_ path: System_String? /* System.String */, _ lastAccessTime: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeC = lastAccessTime?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastAccessTime(pathC, lastAccessTimeC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func setLastAccessTimeUtc(_ path: System_String? /* System.String */, _ lastAccessTimeUtc: System_DateTime? /* System.DateTime */) throws {
		let pathC = path?.__handle
		let lastAccessTimeUtcC = lastAccessTimeUtc?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetLastAccessTimeUtc(pathC, lastAccessTimeUtcC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLastAccessTime(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastAccessTime(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getLastAccessTimeUtc(_ path: System_String? /* System.String */) throws -> System_DateTime? /* System.DateTime */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLastAccessTimeUtc(pathC, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFiles(_ path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFiles_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDirectories(_ path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectories_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileSystemEntries(_ path: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries(pathC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_String_Array? /* System.String[] */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetFileSystemEntries_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateDirectories(_ path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateDirectories(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateDirectories_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFiles(_ path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFiles(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFiles_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFileSystemEntries(_ path: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries(pathC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_1(pathC, searchPatternC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ searchOption: System_IO_SearchOption /* System.IO.SearchOption */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let searchOptionC = searchOption.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_2(pathC, searchPatternC, searchOptionC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func enumerateFileSystemEntries(_ path: System_String? /* System.String */, _ searchPattern: System_String? /* System.String */, _ enumerationOptions: System_IO_EnumerationOptions? /* System.IO.EnumerationOptions */) throws -> System_Collections_Generic_IEnumerable_A1? /* System.Collections.Generic.IEnumerable<System.String> */ {
		let pathC = path?.__handle
		let searchPatternC = searchPattern?.__handle
		let enumerationOptionsC = enumerationOptions?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_EnumerateFileSystemEntries_3(pathC, searchPatternC, enumerationOptionsC, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_IEnumerable_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getDirectoryRoot(_ path: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetDirectoryRoot(pathC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func getCurrentDirectory() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetCurrentDirectory(&__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func setCurrentDirectory(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_SetCurrentDirectory(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func move(_ sourceDirName: System_String? /* System.String */, _ destDirName: System_String? /* System.String */) throws {
		let sourceDirNameC = sourceDirName?.__handle
		let destDirNameC = destDirName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Move(sourceDirNameC, destDirNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func delete(_ path: System_String? /* System.String */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Delete(pathC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func delete(_ path: System_String? /* System.String */, _ recursive: Bool /* System.Boolean */) throws {
		let pathC = path?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_IO_Directory_Delete_1(pathC, recursive, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func getLogicalDrives() throws -> System_String_Array? /* System.String[] */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_GetLogicalDrives(&__exceptionC)
		
		let __returnValue = System_String_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createSymbolicLink(_ path: System_String? /* System.String */, _ pathToTarget: System_String? /* System.String */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let pathC = path?.__handle
		let pathToTargetC = pathToTarget?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_CreateSymbolicLink(pathC, pathToTargetC, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func resolveLinkTarget(_ linkPath: System_String? /* System.String */, _ returnFinalTarget: Bool /* System.Boolean */) throws -> System_IO_FileSystemInfo? /* System.IO.FileSystemInfo */ {
		let linkPathC = linkPath?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_IO_Directory_ResolveLinkTarget(linkPathC, returnFinalTarget, &__exceptionC)
		
		let __returnValue = System_IO_FileSystemInfo(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_IO_Directory_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_IO_Directory_Destroy(self.__handle)
		
	}
	
	
}


public class System_Threading_Tasks_Task_A1 /* System.Threading.Tasks.Task<> */: System_Threading_Tasks_Task {
	public override class var typeName: String { get {
		"Task`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Threading.Tasks.Task<>"
	}}

	public func waitAsync(_ TResult: System_Type /* System.Type */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Object? /* System.Object */ {
		let TResultC = TResult.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_A1_WaitAsync(self.__handle, TResultC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func waitAsync(_ TResult: System_Type /* System.Type */, _ timeout: System_TimeSpan? /* System.TimeSpan */) throws -> System_Object? /* System.Object */ {
		let TResultC = TResult.__handle
		let timeoutC = timeout?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_A1_WaitAsync_1(self.__handle, TResultC, timeoutC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func waitAsync(_ TResult: System_Type /* System.Type */, _ timeout: System_TimeSpan? /* System.TimeSpan */, _ cancellationToken: System_Threading_CancellationToken? /* System.Threading.CancellationToken */) throws -> System_Object? /* System.Object */ {
		let TResultC = TResult.__handle
		let timeoutC = timeout?.__handle
		let cancellationTokenC = cancellationToken?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_A1_WaitAsync_2(self.__handle, TResultC, timeoutC, cancellationTokenC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func result(_ TResult: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TResultC = TResult.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Threading_Tasks_Task_A1_Result_Get(self.__handle, TResultC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_Tasks_Task_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_Tasks_Task_A1_Destroy(self.__handle)
		
	}
	
	
}


// Type "TResult" was skipped. Reason: It has no full name.
public class System_Collections_Generic_IEnumerable_A1 /* System.Collections.Generic.IEnumerable<> */: DNObject {
	public override class var typeName: String { get {
		"IEnumerable`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.IEnumerable<>"
	}}

	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_IEnumerable_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_IEnumerable_A1_Destroy(self.__handle)
		
	}
	
	
}


public class System_Collections_Generic_List_A1 /* System.Collections.Generic.List<> */: System_Object {
	public override class var typeName: String { get {
		"List`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.List<>"
	}}

	public func add(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Add(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func binarySearch(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_BinarySearch(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func clear(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Clear(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func contains(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Contains(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copyTo(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo(self.__handle, TC, arrayC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ array: System_Array? /* System.Array */, _ arrayIndex: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo_1(self.__handle, TC, index, arrayC, arrayIndex, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func copyTo(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ arrayIndex: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_CopyTo_2(self.__handle, TC, arrayC, arrayIndex, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func ensureCapacity(_ T: System_Type /* System.Type */, _ capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_EnsureCapacity(self.__handle, TC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getRange(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_GetRange(self.__handle, TC, index, count, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func slice(_ T: System_Type /* System.Type */, _ start: Int32 /* System.Int32 */, _ length: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Slice(self.__handle, TC, start, length, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func indexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */, _ index: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf_1(self.__handle, TC, itemC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func indexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_IndexOf_2(self.__handle, TC, itemC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func insert(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Insert(self.__handle, TC, index, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func lastIndexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */, _ index: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf_1(self.__handle, TC, itemC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func lastIndexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_LastIndexOf_2(self.__handle, TC, itemC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func remove(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Remove(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func removeAt(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_RemoveAt(self.__handle, TC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeRange(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_RemoveRange(self.__handle, TC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func reverse(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Reverse(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func reverse(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ count: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Reverse_1(self.__handle, TC, index, count, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func sort(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Sort(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func toArray(_ T: System_Type /* System.Type */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_ToArray(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func trimExcess(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_TrimExcess(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Create(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ T: System_Type /* System.Type */, _ capacity: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Create_1(TC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func capacity(_ T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Capacity_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	public func capacity_set(_ T: System_Type /* System.Type */, _ value: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Capacity_Set(self.__handle, TC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public func count(_ T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Count_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	
	public func item(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_List_A1_Item_Get(self.__handle, TC, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_List_A1_Item_Set(self.__handle, TC, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_List_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_List_A1_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

public class System_Collections_Generic_IList_A1 /* System.Collections.Generic.IList<> */: DNObject {
	public override class var typeName: String { get {
		"IList`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.IList<>"
	}}

	public func indexOf(_ T: System_Type /* System.Type */, _ item: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IList_A1_IndexOf(self.__handle, TC, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func insert(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ item: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let itemC = item?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IList_A1_Insert(self.__handle, TC, index, itemC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeAt(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IList_A1_RemoveAt(self.__handle, TC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func item(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IList_A1_Item_Get(self.__handle, TC, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */, _ value: System_Object? /* System.Object */) throws {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IList_A1_Item_Set(self.__handle, TC, index, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_IList_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_IList_A1_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
public class System_Collections_Generic_Dictionary_A2 /* System.Collections.Generic.Dictionary<,> */: System_Object {
	public override class var typeName: String { get {
		"Dictionary`2"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.Dictionary<,>"
	}}

	public func add(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_Add(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func clear(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_Clear(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func containsKey(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_ContainsKey(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func containsValue(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_ContainsValue(self.__handle, TKeyC, TValueC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getObjectData(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ info: System_Runtime_Serialization_SerializationInfo? /* System.Runtime.Serialization.SerializationInfo */, _ context: System_Runtime_Serialization_StreamingContext? /* System.Runtime.Serialization.StreamingContext */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let infoC = info?.__handle
		let contextC = context?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_GetObjectData(self.__handle, TKeyC, TValueC, infoC, contextC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func onDeserialization(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ sender: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let senderC = sender?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_OnDeserialization(self.__handle, TKeyC, TValueC, senderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func remove(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Remove(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func remove(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Remove_1(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		value = System_Object(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func tryGetValue(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_TryGetValue(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		value = System_Object(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func tryAdd(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_TryAdd(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func ensureCapacity(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ capacity: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_EnsureCapacity(self.__handle, TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func trimExcess(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_TrimExcess(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func trimExcess(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ capacity: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_TrimExcess_1(self.__handle, TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Create(TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ capacity: Int32 /* System.Int32 */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Create_1(TKeyC, TValueC, capacity, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func count(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Count_Get(self.__handle, TKeyC, TValueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	
	public func item(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_Dictionary_A2_Item_Get(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_Dictionary_A2_Item_Set(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_Dictionary_A2_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_Dictionary_A2_Destroy(self.__handle)
		
	}
	
	
}


// Type "TValue" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

public class System_Collections_Generic_IDictionary_A2 /* System.Collections.Generic.IDictionary<,> */: DNObject {
	public override class var typeName: String { get {
		"IDictionary`2"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.IDictionary<,>"
	}}

	public func containsKey(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IDictionary_A2_ContainsKey(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func add(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IDictionary_A2_Add(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func remove(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IDictionary_A2_Remove(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func tryGetValue(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IDictionary_A2_TryGetValue(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		value = System_Object(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func item(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IDictionary_A2_Item_Get(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_Generic_IDictionary_A2_Item_Set(self.__handle, TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_IDictionary_A2_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_IDictionary_A2_Destroy(self.__handle)
		
	}
	
	
}


// Type "TValue" was skipped. Reason: It has no full name.
// Type "TKey" was skipped. Reason: It has no full name.

public class System_Collections_ObjectModel_ReadOnlyCollection_A1 /* System.Collections.ObjectModel.ReadOnlyCollection<> */: System_Object {
	public override class var typeName: String { get {
		"ReadOnlyCollection`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.ObjectModel.ReadOnlyCollection<>"
	}}

	public func contains(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ObjectModel_ReadOnlyCollection_A1_Contains(self.__handle, TC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func copyTo(_ T: System_Type /* System.Type */, _ array: System_Array? /* System.Array */, _ index: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		let arrayC = array?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		System_Collections_ObjectModel_ReadOnlyCollection_A1_CopyTo(self.__handle, TC, arrayC, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func indexOf(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ObjectModel_ReadOnlyCollection_A1_IndexOf(self.__handle, TC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func empty(_ T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ObjectModel_ReadOnlyCollection_A1_Empty_Get(TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func count(_ T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ObjectModel_ReadOnlyCollection_A1_Count_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	
	public func item(_ T: System_Type /* System.Type */, _ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_ObjectModel_ReadOnlyCollection_A1_Item_Get(self.__handle, TC, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_ObjectModel_ReadOnlyCollection_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_ObjectModel_ReadOnlyCollection_A1_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.

public class System_Collections_Generic_IReadOnlyDictionary_A2 /* System.Collections.Generic.IReadOnlyDictionary<,> */: DNObject {
	public override class var typeName: String { get {
		"IReadOnlyDictionary`2"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.IReadOnlyDictionary<,>"
	}}

	public func containsKey(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IReadOnlyDictionary_A2_ContainsKey(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func tryGetValue(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: inout System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		var valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IReadOnlyDictionary_A2_TryGetValue(self.__handle, TKeyC, TValueC, keyC, &valueC, &__exceptionC)
		
		value = System_Object(handle: valueC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func item(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Collections_Generic_IReadOnlyDictionary_A2_Item_Get(self.__handle, TKeyC, TValueC, keyC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_IReadOnlyDictionary_A2_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_IReadOnlyDictionary_A2_Destroy(self.__handle)
		
	}
	
	
}


// Type "TKey" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.

public class System_Collections_Generic_IAsyncEnumerable_A1 /* System.Collections.Generic.IAsyncEnumerable<> */: DNObject {
	public override class var typeName: String { get {
		"IAsyncEnumerable`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Collections.Generic.IAsyncEnumerable<>"
	}}

	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Collections_Generic_IAsyncEnumerable_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Collections_Generic_IAsyncEnumerable_A1_Destroy(self.__handle)
		
	}
	
	
}


public class System_Tuple_A1 /* System.Tuple<> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`1"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Equals(self.__handle, T1C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_GetHashCode(self.__handle, T1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_ToString(self.__handle, T1C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let item1C = item1?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Create(T1C, item1C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A1_Item1_Get(self.__handle, T1C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A1_Destroy(self.__handle)
		
	}
	
	
}


public class System_Runtime_CompilerServices_ITuple /* System.Runtime.CompilerServices.ITuple */: DNObject {
	public override class var typeName: String { get {
		"ITuple"
	}}

	public override class var fullTypeName: String { get {
		"System.Runtime.CompilerServices.ITuple"
	}}

	public var length: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ITuple_Length_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public func item(_ index: Int32 /* System.Int32 */) throws -> System_Object? /* System.Object */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Runtime_CompilerServices_ITuple_Item_Get(self.__handle, index, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Runtime_CompilerServices_ITuple_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Runtime_CompilerServices_ITuple_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
public class System_Tuple_A2 /* System.Tuple<,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`2"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Equals(self.__handle, T1C, T2C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_GetHashCode(self.__handle, T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_ToString(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Create(T1C, T2C, item1C, item2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Item1_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A2_Item2_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A2_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A2_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
public class System_Tuple_A3 /* System.Tuple<,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`3"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Equals(self.__handle, T1C, T2C, T3C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_GetHashCode(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_ToString(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Create(T1C, T2C, T3C, item1C, item2C, item3C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item1_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item2_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A3_Item3_Get(self.__handle, T1C, T2C, T3C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A3_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A3_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
public class System_Tuple_A4 /* System.Tuple<,,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`4"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Equals(self.__handle, T1C, T2C, T3C, T4C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_GetHashCode(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_ToString(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */, _ item4: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		let item4C = item4?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Create(T1C, T2C, T3C, T4C, item1C, item2C, item3C, item4C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Item1_Get(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Item2_Get(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Item3_Get(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item4(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A4_Item4_Get(self.__handle, T1C, T2C, T3C, T4C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A4_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A4_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
// Type "T4" was skipped. Reason: It has no full name.
public class System_Tuple_A5 /* System.Tuple<,,,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`5"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Equals(self.__handle, T1C, T2C, T3C, T4C, T5C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_GetHashCode(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_ToString(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */, _ item4: System_Object? /* System.Object */, _ item5: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		let item4C = item4?.__handle
		let item5C = item5?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Create(T1C, T2C, T3C, T4C, T5C, item1C, item2C, item3C, item4C, item5C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Item1_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Item2_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Item3_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item4(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Item4_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item5(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A5_Item5_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A5_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A5_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
// Type "T4" was skipped. Reason: It has no full name.
// Type "T5" was skipped. Reason: It has no full name.
public class System_Tuple_A6 /* System.Tuple<,,,,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`6"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,,,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Equals(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_GetHashCode(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_ToString(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */, _ item4: System_Object? /* System.Object */, _ item5: System_Object? /* System.Object */, _ item6: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		let item4C = item4?.__handle
		let item5C = item5?.__handle
		let item6C = item6?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Create(T1C, T2C, T3C, T4C, T5C, T6C, item1C, item2C, item3C, item4C, item5C, item6C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item1_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item2_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item3_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item4(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item4_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item5(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item5_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item6(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A6_Item6_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A6_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A6_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
// Type "T4" was skipped. Reason: It has no full name.
// Type "T5" was skipped. Reason: It has no full name.
// Type "T6" was skipped. Reason: It has no full name.
public class System_Tuple_A7 /* System.Tuple<,,,,,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`7"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,,,,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Equals(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_GetHashCode(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_ToString(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */, _ item4: System_Object? /* System.Object */, _ item5: System_Object? /* System.Object */, _ item6: System_Object? /* System.Object */, _ item7: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		let item4C = item4?.__handle
		let item5C = item5?.__handle
		let item6C = item6?.__handle
		let item7C = item7?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Create(T1C, T2C, T3C, T4C, T5C, T6C, T7C, item1C, item2C, item3C, item4C, item5C, item6C, item7C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item1_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item2_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item3_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item4(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item4_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item5(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item5_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item6(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item6_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item7(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A7_Item7_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A7_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A7_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
// Type "T4" was skipped. Reason: It has no full name.
// Type "T5" was skipped. Reason: It has no full name.
// Type "T6" was skipped. Reason: It has no full name.
// Type "T7" was skipped. Reason: It has no full name.
public class System_Tuple_A8 /* System.Tuple<,,,,,,,> */: System_Object {
	public override class var typeName: String { get {
		"Tuple`8"
	}}

	public override class var fullTypeName: String { get {
		"System.Tuple<,,,,,,,>"
	}}

	public func equals(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */, _ obj: System_Object? /* System.Object */) throws -> Bool /* System.Boolean */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		let objC = obj?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Equals(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, objC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func getHashCode(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_GetHashCode(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func toString(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_String? /* System.String */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_ToString(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */, _ item1: System_Object? /* System.Object */, _ item2: System_Object? /* System.Object */, _ item3: System_Object? /* System.Object */, _ item4: System_Object? /* System.Object */, _ item5: System_Object? /* System.Object */, _ item6: System_Object? /* System.Object */, _ item7: System_Object? /* System.Object */, _ rest: System_Object? /* System.Object */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		let item1C = item1?.__handle
		let item2C = item2?.__handle
		let item3C = item3?.__handle
		let item4C = item4?.__handle
		let item5C = item5?.__handle
		let item6C = item6?.__handle
		let item7C = item7?.__handle
		let restC = rest?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Create(T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, item1C, item2C, item3C, item4C, item5C, item6C, item7C, restC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func item1(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item1_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item2(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item2_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item3(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item3_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item4(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item4_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item5(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item5_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item6(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item6_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func item7(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Item7_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public func rest(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ T3: System_Type /* System.Type */, _ T4: System_Type /* System.Type */, _ T5: System_Type /* System.Type */, _ T6: System_Type /* System.Type */, _ T7: System_Type /* System.Type */, _ TRest: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let T3C = T3.__handle
		let T4C = T4.__handle
		let T5C = T5.__handle
		let T6C = T6.__handle
		let T7C = T7.__handle
		let TRestC = TRest.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = System_Tuple_A8_Rest_Get(self.__handle, T1C, T2C, T3C, T4C, T5C, T6C, T7C, TRestC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Tuple_A8_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Tuple_A8_Destroy(self.__handle)
		
	}
	
	
}


// Type "T1" was skipped. Reason: It has no full name.
// Type "T2" was skipped. Reason: It has no full name.
// Type "T3" was skipped. Reason: It has no full name.
// Type "T4" was skipped. Reason: It has no full name.
// Type "T5" was skipped. Reason: It has no full name.
// Type "T6" was skipped. Reason: It has no full name.
// Type "T7" was skipped. Reason: It has no full name.
// Type "TRest" was skipped. Reason: It has no full name.
public class NativeAOT_CodeGeneratorInputSample_Address /* NativeAOT.CodeGeneratorInputSample.Address */: System_Object {
	public override class var typeName: String { get {
		"Address"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Address"
	}}

	public func move(_ mover: NativeAOT_CodeGeneratorInputSample_MoveDelegate? /* NativeAOT.CodeGeneratorInputSample.MoveDelegate */, _ newStreet: System_String? /* System.String */, _ newCity: System_String? /* System.String */) throws -> NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */ {
		let moverC = mover?.__handle
		let newStreetC = newStreet?.__handle
		let newCityC = newCity?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_Move(self.__handle, moverC, newStreetC, newCityC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Address(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ street: System_String? /* System.String */, _ city: System_String? /* System.String */) throws {
		let streetC = street?.__handle
		let cityC = city?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_Create(streetC, cityC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var street: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_Street_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var city: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Address_City_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Address_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Address_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_IAnimal /* NativeAOT.CodeGeneratorInputSample.IAnimal */: DNObject {
	public override class var typeName: String { get {
		"IAnimal"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.IAnimal"
	}}

	public func eat(_ food: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let foodC = food?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IAnimal_Eat(self.__handle, foodC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_IAnimal_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_AnimalFactory /* NativeAOT.CodeGeneratorInputSample.AnimalFactory */: System_Object {
	public override class var typeName: String { get {
		"AnimalFactory"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.AnimalFactory"
	}}

	public class func createAnimal(_ animalName: System_String? /* System.String */) throws -> NativeAOT_CodeGeneratorInputSample_IAnimal? /* NativeAOT.CodeGeneratorInputSample.IAnimal */ {
		let animalNameC = animalName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal(animalNameC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_IAnimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createAnimal(_ animalName: System_String? /* System.String */, _ creator: NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate? /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */) throws -> NativeAOT_CodeGeneratorInputSample_IAnimal? /* NativeAOT.CodeGeneratorInputSample.IAnimal */ {
		let animalNameC = animalName?.__handle
		let creatorC = creator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_1(animalNameC, creatorC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_IAnimal(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func createAnimal(_ T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_A1(TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class var dEFAULT_CREATOR: NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate? /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalFactory_DEFAULT_CREATOR_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_AnimalFactory_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.
public class NativeAOT_CodeGeneratorInputSample_BaseAnimal /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */: System_Object {
	public override class var typeName: String { get {
		"BaseAnimal"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.BaseAnimal"
	}}

	public func eat(_ food: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let foodC = food?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat(self.__handle, foodC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_BaseAnimal_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_Cat /* NativeAOT.CodeGeneratorInputSample.Cat */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public override class var typeName: String { get {
		"Cat"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Cat"
	}}

	public override var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Cat_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var catName: System_String? /* System.String */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Cat_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Cat_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_Dog /* NativeAOT.CodeGeneratorInputSample.Dog */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public override class var typeName: String { get {
		"Dog"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Dog"
	}}

	public override var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Dog_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var dogName: System_String? /* System.String */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get()
		
		let __returnValue = System_String(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Dog_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Dog_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_GenericAnimal /* NativeAOT.CodeGeneratorInputSample.GenericAnimal */: NativeAOT_CodeGeneratorInputSample_BaseAnimal {
	public override class var typeName: String { get {
		"GenericAnimal"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.GenericAnimal"
	}}

	public convenience init?(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericAnimal_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public override var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericAnimal_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericAnimal_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericAnimal_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1 /* NativeAOT.CodeGeneratorInputSample.GenericTestClass<> */: System_Object {
	public override class var typeName: String { get {
		"GenericTestClass`1"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.GenericTestClass<>"
	}}

	public func returnGenericClassType(_ T: System_Type /* System.Type */) throws -> System_Type? /* System.Type */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_ReturnGenericClassType(self.__handle, TC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnGenericClassTypeAndGenericMethodType(_ T: System_Type /* System.Type */, _ TM: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let TC = T.__handle
		let TMC = TM.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_ReturnGenericClassTypeAndGenericMethodType_A1(TC, TMC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func extreme(_ T: System_Type /* System.Type */, _ TM: System_Type /* System.Type */, _ countIn: Int32 /* System.Int32 */, _ countOut: inout Int32 /* System.Int32 */, _ typeGenericInput: System_Object? /* System.Object */, _ typeGenericOutput: inout System_Object? /* System.Object */, _ methodGenericInputThatIsToBeReplacedWithDefault: inout System_Object? /* System.Object */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		let TMC = TM.__handle
		let typeGenericInputC = typeGenericInput?.__handle
		var typeGenericOutputC = typeGenericOutput?.__handle
		var methodGenericInputThatIsToBeReplacedWithDefaultC = methodGenericInputThatIsToBeReplacedWithDefault?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Extreme_A1(self.__handle, TC, TMC, countIn, &countOut, typeGenericInputC, &typeGenericOutputC, &methodGenericInputThatIsToBeReplacedWithDefaultC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		typeGenericOutput = System_Object(handle: typeGenericOutputC)
		
		methodGenericInputThatIsToBeReplacedWithDefault = System_Object(handle: methodGenericInputThatIsToBeReplacedWithDefaultC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T: System_Type /* System.Type */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Create(TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func aProperty(_ T: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AProperty_Get(self.__handle, TC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	public func aProperty_set(_ T: System_Type /* System.Type */, _ value: Int32 /* System.Int32 */) throws {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AProperty_Set(self.__handle, TC, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public func aField(_ T: System_Type /* System.Type */) -> Int32 /* System.Int32 */ {
		let TC = T.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AField_Get(self.__handle, TC)
		
		return __returnValueC
		
	}
	public func aField_set(_ T: System_Type /* System.Type */, _ value: Int32 /* System.Int32 */) {
		let TC = T.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_AField_Set(self.__handle, TC, value)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A1_Destroy(self.__handle)
		
	}
	
	
}


// Type "T" was skipped. Reason: It has no full name.

// Type "TM" was skipped. Reason: It has no full name.

public class NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2 /* NativeAOT.CodeGeneratorInputSample.GenericTestClass<,> */: System_Object {
	public override class var typeName: String { get {
		"GenericTestClass`2"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.GenericTestClass<,>"
	}}

	public func returnGenericClassTypes(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_ReturnGenericClassTypes(self.__handle, T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnGenericClassTypeAndGenericMethodType(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ TM: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		let TMC = TM.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_ReturnGenericClassTypeAndGenericMethodType_A1(T1C, T2C, TMC, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_Create(T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public func aProperty(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AProperty_Get(self.__handle, T1C, T2C, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	public func aProperty_set(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ value: Int32 /* System.Int32 */) throws {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AProperty_Set(self.__handle, T1C, T2C, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public func aField(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) -> Int32 /* System.Int32 */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AField_Get(self.__handle, T1C, T2C)
		
		return __returnValueC
		
	}
	public func aField_set(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */, _ value: Int32 /* System.Int32 */) {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_AField_Set(self.__handle, T1C, T2C, value)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTestClass_A2_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_GenericTests /* NativeAOT.CodeGeneratorInputSample.GenericTests */: System_Object {
	public override class var typeName: String { get {
		"GenericTests"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.GenericTests"
	}}

	public func joinListOfStrings(_ listOfString: System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */, _ separator: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let listOfStringC = listOfString?.__handle
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_JoinListOfStrings(self.__handle, listOfStringC, separatorC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnGenericType(_ T: System_Type /* System.Type */) throws -> System_Type? /* System.Type */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericType_A1(TC, &__exceptionC)
		
		let __returnValue = System_Type(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnGenericTypeAsOutParameter(_ T: System_Type /* System.Type */, _ typeOfT: inout System_Type? /* System.Type */) throws {
		let TC = T.__handle
		var typeOfTC = typeOfT?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypeAsOutParameter_A1(TC, &typeOfTC, &__exceptionC)
		
		typeOfT = System_Type(handle: typeOfTC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func returnGenericTypeAsRefParameter(_ T: System_Type /* System.Type */, _ typeOfT: inout System_Type? /* System.Type */) throws {
		let TC = T.__handle
		var typeOfTC = typeOfT?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypeAsRefParameter_A1(TC, &typeOfTC, &__exceptionC)
		
		typeOfT = System_Type(handle: typeOfTC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func returnGenericTypes(_ T1: System_Type /* System.Type */, _ T2: System_Type /* System.Type */) throws -> System_Type_Array? /* System.Type[] */ {
		let T1C = T1.__handle
		let T2C = T2.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypes_A2(T1C, T2C, &__exceptionC)
		
		let __returnValue = System_Type_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnSimpleKeyValuePair(_ TKey: System_Type /* System.Type */, _ TValue: System_Type /* System.Type */, _ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws -> NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair? /* NativeAOT.CodeGeneratorInputSample.GenericTests.SimpleKeyValuePair */ {
		let TKeyC = TKey.__handle
		let TValueC = TValue.__handle
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnSimpleKeyValuePair_A2(TKeyC, TValueC, keyC, valueC, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnDefaultValueOfGenericType(_ T: System_Type /* System.Type */) throws -> System_Object? /* System.Object */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnDefaultValueOfGenericType_A1(TC, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnArrayOfDefaultValuesOfGenericType(_ T: System_Type /* System.Type */, _ numberOfElements: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfDefaultValuesOfGenericType_A1(TC, numberOfElements, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func returnArrayOfRepeatedValues(_ T: System_Type /* System.Type */, _ value: System_Object? /* System.Object */, _ numberOfElements: Int32 /* System.Int32 */) throws -> System_Array? /* System.Array */ {
		let TC = T.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfRepeatedValues_A1(self.__handle, TC, valueC, numberOfElements, &__exceptionC)
		
		let __returnValue = System_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func returnStringOfJoinedArray(_ T: System_Type /* System.Type */, _ values: System_Array? /* System.Array */, _ separator: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let TC = T.__handle
		let valuesC = values?.__handle
		let separatorC = separator?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnStringOfJoinedArray_A1(TC, valuesC, separatorC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var listOfStrings: System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_ListOfStrings_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_List_A1(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func listOfStrings_set(_ value: System_Collections_Generic_List_A1? /* System.Collections.Generic.List<System.String> */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_ListOfStrings_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var dictionaryOfStringKeysAndExceptionValues: System_Collections_Generic_Dictionary_A2? /* System.Collections.Generic.Dictionary<System.String,System.Exception> */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_DictionaryOfStringKeysAndExceptionValues_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Collections_Generic_Dictionary_A2(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func dictionaryOfStringKeysAndExceptionValues_set(_ value: System_Collections_Generic_Dictionary_A2? /* System.Collections.Generic.Dictionary<System.String,System.Exception> */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_GenericTests_DictionaryOfStringKeysAndExceptionValues_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTests_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTests_Destroy(self.__handle)
		
	}
	
	
}


























public class NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair /* NativeAOT.CodeGeneratorInputSample.GenericTests.SimpleKeyValuePair */: System_ValueType {
	public override class var typeName: String { get {
		"SimpleKeyValuePair"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.GenericTests.SimpleKeyValuePair"
	}}

	public convenience init?(_ key: System_Object? /* System.Object */, _ value: System_Object? /* System.Object */) throws {
		let keyC = key?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Create(keyC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var key: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Key_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var value: System_Object? /* System.Object */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Value_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_GenericTests_SimpleKeyValuePair_Destroy(self.__handle)
		
	}
	
	
}


// Type "TKey" was skipped. Reason: It has no full name.
// Type "TValue" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T[]" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

public class NativeAOT_CodeGeneratorInputSample_IndexerTests /* NativeAOT.CodeGeneratorInputSample.IndexerTests */: System_Object {
	public override class var typeName: String { get {
		"IndexerTests"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.IndexerTests"
	}}

	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var storedString: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_StoredString_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var storedNumber: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_StoredNumber_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public var storedGuid: System_Guid? /* System.Guid */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_StoredGuid_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Guid(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var storedValue: System_Object_Array? /* System.Object[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_StoredValue_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public func item(_ aString: System_String? /* System.String */, _ aNumber: Int32 /* System.Int32 */, _ aGuid: System_Guid? /* System.Guid */) throws -> System_Object_Array? /* System.Object[] */ {
		let aStringC = aString?.__handle
		let aGuidC = aGuid?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_IndexerTests_Item_Get(self.__handle, aStringC, aNumber, aGuidC, &__exceptionC)
		
		let __returnValue = System_Object_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	public func item_set(_ aString: System_String? /* System.String */, _ aNumber: Int32 /* System.Int32 */, _ aGuid: System_Guid? /* System.Guid */, _ value: System_Object_Array? /* System.Object[] */) throws {
		let aStringC = aString?.__handle
		let aGuidC = aGuid?.__handle
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_IndexerTests_Item_Set(self.__handle, aStringC, aNumber, aGuidC, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_IndexerTests_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_IndexerTests_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_Person /* NativeAOT.CodeGeneratorInputSample.Person */: System_Object {
	public override class var typeName: String { get {
		"Person"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person"
	}}

	public func getNiceLevelString() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getWelcomeMessage() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func addChild(_ child: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_AddChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeChild(_ child: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */) throws {
		let childC = child?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_RemoveChild(self.__handle, childC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func removeChildAt(_ index: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt(self.__handle, index, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func childAt(_ index: Int32 /* System.Int32 */) throws -> NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_ChildAt(self.__handle, index, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func changeAge(_ newAgeProvider: NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate? /* NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate */) throws {
		let newAgeProviderC = newAgeProvider?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_ChangeAge(self.__handle, newAgeProviderC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public convenience init?(_ firstName: System_String? /* System.String */, _ lastName: System_String? /* System.String */, _ age: Int32 /* System.Int32 */) throws {
		let firstNameC = firstName?.__handle
		let lastNameC = lastName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Create(firstNameC, lastNameC, age, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public convenience init?(_ firstName: System_String? /* System.String */, _ lastName: System_String? /* System.String */) throws {
		let firstNameC = firstName?.__handle
		let lastNameC = lastName?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Create_1(firstNameC, lastNameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var firstName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func firstName_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var lastName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_LastName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func lastName_set(_ value: System_String? /* System.String */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_LastName_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var age: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Age_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	public func age_set(_ value: Int32 /* System.Int32 */) throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Age_Set(self.__handle, value, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var address: NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Address_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Address(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func address_set(_ value: NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Address_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var children: NativeAOT_CodeGeneratorInputSample_Person_Array? /* NativeAOT.CodeGeneratorInputSample.Person[] */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Children_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Person_Array(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func children_set(_ value: NativeAOT_CodeGeneratorInputSample_Person_Array? /* NativeAOT.CodeGeneratorInputSample.Person[] */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Children_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var niceLevel: NativeAOT_CodeGeneratorInputSample_NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get(self.__handle, &__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_NiceLevels(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public func niceLevel_set(_ value: NativeAOT_CodeGeneratorInputSample_NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */) throws {
		let valueC = value.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set(self.__handle, valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public var fullName: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_FullName_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public var numberOfChildren: Int32 /* System.Int32 */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}}
	
	
	public func numberOfChildrenChanged_add(_ value: NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate? /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */) {
		let valueC = value?.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Add(self.__handle, valueC)
		
		
	}
	public func numberOfChildrenChanged_remove(_ value: NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate? /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */) {
		let valueC = value?.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Remove(self.__handle, valueC)
		
		
	}
	
	
	public class var aGE_WHEN_BORN: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get()
		
		return __returnValueC
		
	}}
	
	
	public class var dEFAULT_AGE: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get()
		
		return __returnValueC
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_Person_Array /* NativeAOT.CodeGeneratorInputSample.Person[] */: System_Array {
	public override class var typeName: String { get {
		"Person[]"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person[]"
	}}

	
}















public class NativeAOT_CodeGeneratorInputSample_Person_Extensions /* NativeAOT.CodeGeneratorInputSample.Person_Extensions */: System_Object {
	public override class var typeName: String { get {
		"Person_Extensions"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person_Extensions"
	}}

	public class func increaseAge(_ person: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */, _ byYears: Int32 /* System.Int32 */) throws {
		let personC = person?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge(personC, byYears, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public class func tryGetAddress(_ person: NativeAOT_CodeGeneratorInputSample_Person? /* NativeAOT.CodeGeneratorInputSample.Person */, _ address: inout NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */) throws -> Bool /* System.Boolean */ {
		let personC = person?.__handle
		var addressC = address?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_Extensions_TryGetAddress(personC, &addressC, &__exceptionC)
		
		address = NativeAOT_CodeGeneratorInputSample_Address(handle: addressC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_Extensions_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy(self.__handle)
		
	}
	
	
}



public class NativeAOT_CodeGeneratorInputSample_Book /* NativeAOT.CodeGeneratorInputSample.Book */: System_Object {
	public override class var typeName: String { get {
		"Book"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Book"
	}}

	public convenience init?(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_Create(nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var name: System_String? /* System.String */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_Name_Get(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	
	
	public class var donQuixote: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_DonQuixote_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var aTaleOfTwoCities: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_ATaleOfTwoCities_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public class var theLordOfTheRings: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Book_TheLordOfTheRings_Get()
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	}}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Book_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Book_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_TestClass /* NativeAOT.CodeGeneratorInputSample.TestClass */: System_Object {
	public override class var typeName: String { get {
		"TestClass"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.TestClass"
	}}

	public func getChar(_ charReturnerDelegate: NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate? /* NativeAOT.CodeGeneratorInputSample.CharReturnerDelegate */) throws -> DNChar /* System.Char */ {
		let charReturnerDelegateC = charReturnerDelegate?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetChar(self.__handle, charReturnerDelegateC, &__exceptionC)
		
		let __returnValue = DNChar(cValue: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func sayHello() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_SayHello(self.__handle, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func sayHello(_ name: System_String? /* System.String */) throws {
		let nameC = name?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_SayHello_1(self.__handle, nameC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func getHello() throws -> System_String? /* System.String */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetHello(self.__handle, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func getDate() throws -> System_DateTime? /* System.DateTime */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetDate(self.__handle, &__exceptionC)
		
		let __returnValue = System_DateTime(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func add(_ number1: Int32 /* System.Int32 */, _ number2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Add(self.__handle, number1, number2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func divide(_ number1: Int32 /* System.Int32 */, _ number2: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Divide(self.__handle, number1, number2, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getTestEnumName(_ testEnum: NativeAOT_CodeGeneratorInputSample_TestEnum /* NativeAOT.CodeGeneratorInputSample.TestEnum */) throws -> System_String? /* System.String */ {
		let testEnumC = testEnum.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName(testEnumC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public func modifyByRefValueAndReturnOriginalValue(_ valueToModify: inout Int32 /* System.Int32 */, _ targetValue: Int32 /* System.Int32 */) throws -> Int32 /* System.Int32 */ {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefValueAndReturnOriginalValue(self.__handle, &valueToModify, targetValue, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public func modifyByRefEnum(_ enumToModify: inout NativeAOT_CodeGeneratorInputSample_TestEnum /* NativeAOT.CodeGeneratorInputSample.TestEnum */) throws {
		var enumToModifyC = enumToModify.cValue
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefEnum(self.__handle, &enumToModifyC, &__exceptionC)
		
		enumToModify = NativeAOT_CodeGeneratorInputSample_TestEnum(cValue: enumToModifyC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	public func modifyByRefBookAndReturnOriginalBookAsOutParameter(_ bookToModify: inout NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */, _ targetBook: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */, _ originalBook: inout NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */) throws {
		var bookToModifyC = bookToModify?.__handle
		let targetBookC = targetBook?.__handle
		var originalBookC = originalBook?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefBookAndReturnOriginalBookAsOutParameter(self.__handle, &bookToModifyC, targetBookC, &originalBookC, &__exceptionC)
		
		bookToModify = NativeAOT_CodeGeneratorInputSample_Book(handle: bookToModifyC)
		
		originalBook = NativeAOT_CodeGeneratorInputSample_Book(handle: originalBookC)
		
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	// TODO: Method with by ref return or setter or event handler type (NativeAOT_CodeGeneratorInputSample_TestClass_GetCurrentBookByRef)
	
	// TODO: Method with by ref return or setter or event handler type (NativeAOT_CodeGeneratorInputSample_TestClass_IncreaseAndGetCurrentIntValueByRef)
	
	public convenience init?() throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_Create(&__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		guard let __returnValueC else { return nil }
		
		self.init(handle: __returnValueC)
		
	}
	
	public var currentBook: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Get(self.__handle)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Book(handle: __returnValueC)
		
		return __returnValue
		
	}}
	public func currentBook_set(_ value: NativeAOT_CodeGeneratorInputSample_Book? /* NativeAOT.CodeGeneratorInputSample.Book */) {
		let valueC = value?.__handle
		
		
		NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Set(self.__handle, valueC)
		
		
	}
	
	
	public var currentIntValue: Int32 /* System.Int32 */ { get {
		
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Get(self.__handle)
		
		return __returnValueC
		
	}}
	public func currentIntValue_set(_ value: Int32 /* System.Int32 */) {
		
		
		NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Set(self.__handle, value)
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_TestClass_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_TestClass_Destroy(self.__handle)
		
	}
	
	
}




public class NativeAOT_CodeGeneratorInputSample_Transformer /* NativeAOT.CodeGeneratorInputSample.Transformer */: System_Object {
	public override class var typeName: String { get {
		"Transformer"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer"
	}}

	public class func transformString(_ inputString: System_String? /* System.String */, _ stringTransformer: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */) throws -> System_String? /* System.String */ {
		let inputStringC = inputString?.__handle
		let stringTransformerC = stringTransformer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_TransformString(inputStringC, stringTransformerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func transformDoubles(_ number1: Double /* System.Double */, _ number2: Double /* System.Double */, _ doublesTransformer: NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate */) throws -> Double /* System.Double */ {
		let doublesTransformerC = doublesTransformer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_TransformDoubles(number1, number2, doublesTransformerC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValueC
		
	}
	
	public class func getAndTransformString(_ stringGetter: NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate */, _ stringTransformer: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */) throws -> System_String? /* System.String */ {
		let stringGetterC = stringGetter?.__handle
		let stringTransformerC = stringTransformer?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_GetAndTransformString(stringGetterC, stringTransformerC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public class func uppercaseString(_ inputString: System_String? /* System.String */) throws -> System_String? /* System.String */ {
		let inputStringC = inputString?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_UppercaseString(inputStringC, &__exceptionC)
		
		let __returnValue = System_String(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_Destroy(self.__handle)
		
	}
	
	
}


public class NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers /* NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers */: System_Object {
	public override class var typeName: String { get {
		"BuiltInTransformers"
	}}

	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers"
	}}

	public class var uppercaseStringTransformer: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ { get throws {
		
		
		var __exceptionC: System_Exception_t?
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Get(&__exceptionC)
		
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(handle: __returnValueC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		return __returnValue
		
	}}
	public class func uppercaseStringTransformer_set(_ value: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate? /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */) throws {
		let valueC = value?.__handle
		
		
		var __exceptionC: System_Exception_t?
		
		NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Set(valueC, &__exceptionC)
		
		if let __exceptionC {
		    let __exception = System_Exception(handle: __exceptionC)
		    let __error = __exception.error
		    
		    throw __error
		}
		
		
	}
	
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_Destroy(self.__handle)
		
	}
	
	
}


public class System_Action /* System.Action */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Action"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Action"
	}}
	
	public typealias ClosureType = () -> Void
	
	
	private static func __createCFunction() -> System_Action_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			__innerClosure()
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Action_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Action_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		System_Action_Invoke(__selfC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Action_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Action_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_MulticastDelegate /* System.MulticastDelegate */: System_Delegate {
	public override class var typeName: String { get {
		"System.MulticastDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"System.MulticastDelegate"
	}}
	
	public typealias ClosureType = () -> Void
	
	
	private static func __createCFunction() -> System_MulticastDelegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			__innerClosure()
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_MulticastDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_MulticastDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_MulticastDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_MulticastDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Delegate /* System.Delegate */: System_Object {
	public override class var typeName: String { get {
		"System.Delegate"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Delegate"
	}}
	
	public typealias ClosureType = () -> Void
	
	
	private static func __createCFunction() -> System_Delegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			__innerClosure()
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Delegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Delegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Delegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Delegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
public class System_Reflection_TypeFilter /* System.Reflection.TypeFilter */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Reflection.TypeFilter"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Reflection.TypeFilter"
	}}
	
	public typealias ClosureType = (_ m: System_Type? /* System.Type */, _ filterCriteria: System_Object? /* System.Object */) -> Bool
	
	
	private static func __createCFunction() -> System_Reflection_TypeFilter_CFunction_t {
		return { __innerContext, m, filterCriteria in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let mSwift = System_Type(handle: m)
			let filterCriteriaSwift = System_Object(handle: filterCriteria)
			
			let __returnValueSwift = __innerClosure(mSwift, filterCriteriaSwift)
		
			return __returnValueSwift
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Reflection_TypeFilter_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Reflection_TypeFilter_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ m: System_Type? /* System.Type */, _ filterCriteria: System_Object? /* System.Object */) throws -> Bool {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let mC = m?.__handle
		let filterCriteriaC = filterCriteria?.__handle
		
		let __returnValueC = System_Reflection_TypeFilter_Invoke(__selfC, mC, filterCriteriaC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValueC
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_TypeFilter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_TypeFilter_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_AsyncCallback /* System.AsyncCallback */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.AsyncCallback"
	}}
	
	public override class var fullTypeName: String { get {
		"System.AsyncCallback"
	}}
	
	public typealias ClosureType = (_ ar: System_IAsyncResult? /* System.IAsyncResult */) -> Void
	
	
	private static func __createCFunction() -> System_AsyncCallback_CFunction_t {
		return { __innerContext, ar in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let arSwift = System_IAsyncResult(handle: ar)
			
			__innerClosure(arSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_AsyncCallback_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_AsyncCallback_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ ar: System_IAsyncResult? /* System.IAsyncResult */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let arC = ar?.__handle
		
		System_AsyncCallback_Invoke(__selfC, arC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AsyncCallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AsyncCallback_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Reflection_ModuleResolveEventHandler /* System.Reflection.ModuleResolveEventHandler */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Reflection.ModuleResolveEventHandler"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Reflection.ModuleResolveEventHandler"
	}}
	
	public typealias ClosureType = (_ sender: System_Object? /* System.Object */, _ e: System_ResolveEventArgs? /* System.ResolveEventArgs */) -> System_Reflection_Module?
	
	
	private static func __createCFunction() -> System_Reflection_ModuleResolveEventHandler_CFunction_t {
		return { __innerContext, sender, e in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let senderSwift = System_Object(handle: sender)
			let eSwift = System_ResolveEventArgs(handle: e)
			
			let __returnValueSwift = __innerClosure(senderSwift, eSwift)
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Reflection_ModuleResolveEventHandler_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Reflection_ModuleResolveEventHandler_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ sender: System_Object? /* System.Object */, _ e: System_ResolveEventArgs? /* System.ResolveEventArgs */) throws -> System_Reflection_Module? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let senderC = sender?.__handle
		let eC = e?.__handle
		
		let __returnValueC = System_Reflection_ModuleResolveEventHandler_Invoke(__selfC, senderC, eC, &__exceptionC)
	
		let __returnValue = System_Reflection_Module(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_ModuleResolveEventHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_ModuleResolveEventHandler_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Reflection_MemberFilter /* System.Reflection.MemberFilter */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Reflection.MemberFilter"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Reflection.MemberFilter"
	}}
	
	public typealias ClosureType = (_ m: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ filterCriteria: System_Object? /* System.Object */) -> Bool
	
	
	private static func __createCFunction() -> System_Reflection_MemberFilter_CFunction_t {
		return { __innerContext, m, filterCriteria in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let mSwift = System_Reflection_MemberInfo(handle: m)
			let filterCriteriaSwift = System_Object(handle: filterCriteria)
			
			let __returnValueSwift = __innerClosure(mSwift, filterCriteriaSwift)
		
			return __returnValueSwift
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Reflection_MemberFilter_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Reflection_MemberFilter_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ m: System_Reflection_MemberInfo? /* System.Reflection.MemberInfo */, _ filterCriteria: System_Object? /* System.Object */) throws -> Bool {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let mC = m?.__handle
		let filterCriteriaC = filterCriteria?.__handle
		
		let __returnValueC = System_Reflection_MemberFilter_Invoke(__selfC, mC, filterCriteriaC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValueC
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Reflection_MemberFilter_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Reflection_MemberFilter_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Threading_ContextCallback /* System.Threading.ContextCallback */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Threading.ContextCallback"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Threading.ContextCallback"
	}}
	
	public typealias ClosureType = (_ state: System_Object? /* System.Object */) -> Void
	
	
	private static func __createCFunction() -> System_Threading_ContextCallback_CFunction_t {
		return { __innerContext, state in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let stateSwift = System_Object(handle: state)
			
			__innerClosure(stateSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Threading_ContextCallback_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Threading_ContextCallback_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ state: System_Object? /* System.Object */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let stateC = state?.__handle
		
		System_Threading_ContextCallback_Invoke(__selfC, stateC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ContextCallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_ContextCallback_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_UnhandledExceptionEventHandler /* System.UnhandledExceptionEventHandler */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.UnhandledExceptionEventHandler"
	}}
	
	public override class var fullTypeName: String { get {
		"System.UnhandledExceptionEventHandler"
	}}
	
	public typealias ClosureType = (_ sender: System_Object? /* System.Object */, _ e: System_UnhandledExceptionEventArgs? /* System.UnhandledExceptionEventArgs */) -> Void
	
	
	private static func __createCFunction() -> System_UnhandledExceptionEventHandler_CFunction_t {
		return { __innerContext, sender, e in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let senderSwift = System_Object(handle: sender)
			let eSwift = System_UnhandledExceptionEventArgs(handle: e)
			
			__innerClosure(senderSwift, eSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_UnhandledExceptionEventHandler_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_UnhandledExceptionEventHandler_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ sender: System_Object? /* System.Object */, _ e: System_UnhandledExceptionEventArgs? /* System.UnhandledExceptionEventArgs */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let senderC = sender?.__handle
		let eC = e?.__handle
		
		System_UnhandledExceptionEventHandler_Invoke(__selfC, senderC, eC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_UnhandledExceptionEventHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_UnhandledExceptionEventHandler_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_EventHandler /* System.EventHandler */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.EventHandler"
	}}
	
	public override class var fullTypeName: String { get {
		"System.EventHandler"
	}}
	
	public typealias ClosureType = (_ sender: System_Object? /* System.Object */, _ e: System_EventArgs? /* System.EventArgs */) -> Void
	
	
	private static func __createCFunction() -> System_EventHandler_CFunction_t {
		return { __innerContext, sender, e in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let senderSwift = System_Object(handle: sender)
			let eSwift = System_EventArgs(handle: e)
			
			__innerClosure(senderSwift, eSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_EventHandler_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_EventHandler_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ sender: System_Object? /* System.Object */, _ e: System_EventArgs? /* System.EventArgs */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let senderC = sender?.__handle
		let eC = e?.__handle
		
		System_EventHandler_Invoke(__selfC, senderC, eC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_EventHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_EventHandler_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_AssemblyLoadEventHandler /* System.AssemblyLoadEventHandler */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.AssemblyLoadEventHandler"
	}}
	
	public override class var fullTypeName: String { get {
		"System.AssemblyLoadEventHandler"
	}}
	
	public typealias ClosureType = (_ sender: System_Object? /* System.Object */, _ args: System_AssemblyLoadEventArgs? /* System.AssemblyLoadEventArgs */) -> Void
	
	
	private static func __createCFunction() -> System_AssemblyLoadEventHandler_CFunction_t {
		return { __innerContext, sender, args in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let senderSwift = System_Object(handle: sender)
			let argsSwift = System_AssemblyLoadEventArgs(handle: args)
			
			__innerClosure(senderSwift, argsSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_AssemblyLoadEventHandler_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_AssemblyLoadEventHandler_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ sender: System_Object? /* System.Object */, _ args: System_AssemblyLoadEventArgs? /* System.AssemblyLoadEventArgs */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let senderC = sender?.__handle
		let argsC = args?.__handle
		
		System_AssemblyLoadEventHandler_Invoke(__selfC, senderC, argsC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_AssemblyLoadEventHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_AssemblyLoadEventHandler_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_ResolveEventHandler /* System.ResolveEventHandler */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.ResolveEventHandler"
	}}
	
	public override class var fullTypeName: String { get {
		"System.ResolveEventHandler"
	}}
	
	public typealias ClosureType = (_ sender: System_Object? /* System.Object */, _ args: System_ResolveEventArgs? /* System.ResolveEventArgs */) -> System_Reflection_Assembly?
	
	
	private static func __createCFunction() -> System_ResolveEventHandler_CFunction_t {
		return { __innerContext, sender, args in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let senderSwift = System_Object(handle: sender)
			let argsSwift = System_ResolveEventArgs(handle: args)
			
			let __returnValueSwift = __innerClosure(senderSwift, argsSwift)
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_ResolveEventHandler_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_ResolveEventHandler_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ sender: System_Object? /* System.Object */, _ args: System_ResolveEventArgs? /* System.ResolveEventArgs */) throws -> System_Reflection_Assembly? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let senderC = sender?.__handle
		let argsC = args?.__handle
		
		let __returnValueC = System_ResolveEventHandler_Invoke(__selfC, senderC, argsC, &__exceptionC)
	
		let __returnValue = System_Reflection_Assembly(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_ResolveEventHandler_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_ResolveEventHandler_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Threading_ThreadStart /* System.Threading.ThreadStart */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Threading.ThreadStart"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Threading.ThreadStart"
	}}
	
	public typealias ClosureType = () -> Void
	
	
	private static func __createCFunction() -> System_Threading_ThreadStart_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			__innerClosure()
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Threading_ThreadStart_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Threading_ThreadStart_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		System_Threading_ThreadStart_Invoke(__selfC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ThreadStart_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_ThreadStart_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Threading_ParameterizedThreadStart /* System.Threading.ParameterizedThreadStart */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Threading.ParameterizedThreadStart"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Threading.ParameterizedThreadStart"
	}}
	
	public typealias ClosureType = (_ obj: System_Object? /* System.Object */) -> Void
	
	
	private static func __createCFunction() -> System_Threading_ParameterizedThreadStart_CFunction_t {
		return { __innerContext, obj in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let objSwift = System_Object(handle: obj)
			
			__innerClosure(objSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Threading_ParameterizedThreadStart_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Threading_ParameterizedThreadStart_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ obj: System_Object? /* System.Object */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let objC = obj?.__handle
		
		System_Threading_ParameterizedThreadStart_Invoke(__selfC, objC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_ParameterizedThreadStart_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_ParameterizedThreadStart_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class System_Threading_TimerCallback /* System.Threading.TimerCallback */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"System.Threading.TimerCallback"
	}}
	
	public override class var fullTypeName: String { get {
		"System.Threading.TimerCallback"
	}}
	
	public typealias ClosureType = (_ state: System_Object? /* System.Object */) -> Void
	
	
	private static func __createCFunction() -> System_Threading_TimerCallback_CFunction_t {
		return { __innerContext, state in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let stateSwift = System_Object(handle: state)
			
			__innerClosure(stateSwift)
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> System_Threading_TimerCallback_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = System_Threading_TimerCallback_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ state: System_Object? /* System.Object */) throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let stateC = state?.__handle
		
		System_Threading_TimerCallback_Invoke(__selfC, stateC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: System_Threading_TimerCallback_TypeOf())
		
	}}
	
	internal override func destroy() {
		System_Threading_TimerCallback_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_MoveDelegate /* NativeAOT.CodeGeneratorInputSample.MoveDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.MoveDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.MoveDelegate"
	}}
	
	public typealias ClosureType = (_ newStreet: System_String? /* System.String */, _ newCity: System_String? /* System.String */) -> NativeAOT_CodeGeneratorInputSample_Address?
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_MoveDelegate_CFunction_t {
		return { __innerContext, newStreet, newCity in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let newStreetSwift = System_String(handle: newStreet)
			let newCitySwift = System_String(handle: newCity)
			
			let __returnValueSwift = __innerClosure(newStreetSwift, newCitySwift)
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_MoveDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_MoveDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ newStreet: System_String? /* System.String */, _ newCity: System_String? /* System.String */) throws -> NativeAOT_CodeGeneratorInputSample_Address? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let newStreetC = newStreet?.__handle
		let newCityC = newCity?.__handle
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_MoveDelegate_Invoke(__selfC, newStreetC, newCityC, &__exceptionC)
	
		let __returnValue = NativeAOT_CodeGeneratorInputSample_Address(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_MoveDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_MoveDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate"
	}}
	
	public typealias ClosureType = (_ animalName: System_String? /* System.String */) -> NativeAOT_CodeGeneratorInputSample_IAnimal?
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_CFunction_t {
		return { __innerContext, animalName in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let animalNameSwift = System_String(handle: animalName)
			
			let __returnValueSwift = __innerClosure(animalNameSwift)
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ animalName: System_String? /* System.String */) throws -> NativeAOT_CodeGeneratorInputSample_IAnimal? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let animalNameC = animalName?.__handle
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Invoke(__selfC, animalNameC, &__exceptionC)
	
		let __returnValue = NativeAOT_CodeGeneratorInputSample_IAnimal(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate /* NativeAOT.CodeGeneratorInputSample.Person+NumberOfChildrenChangedDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person+NumberOfChildrenChangedDelegate"
	}}
	
	public typealias ClosureType = () -> Void
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			__innerClosure()
		
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> Void {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Invoke(__selfC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate /* NativeAOT.CodeGeneratorInputSample.Person+NewAgeProviderDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Person+NewAgeProviderDelegate"
	}}
	
	public typealias ClosureType = () -> Int32
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			let __returnValueSwift = __innerClosure()
		
			return __returnValueSwift
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> Int32 {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Invoke(__selfC, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValueC
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

// TODO: (NativeAOT_CodeGeneratorInputSample_ByRefReturnValueDelegate) Unsupported delegate type. Reason: Has by ref return type

// TODO: (NativeAOT_CodeGeneratorInputSample_ByRefParametersDelegate) Unsupported delegate type. Reason: Has by ref or out parameters

// TODO: (NativeAOT_CodeGeneratorInputSample_OutParametersDelegate) Unsupported delegate type. Reason: Has by ref or out parameters

public class NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate /* NativeAOT.CodeGeneratorInputSample.CharReturnerDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.CharReturnerDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.CharReturnerDelegate"
	}}
	
	public typealias ClosureType = () -> DNChar
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			let __returnValueSwift = __innerClosure()
		
			let __returnValue = __returnValueSwift.cValue
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> DNChar {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_Invoke(__selfC, &__exceptionC)
	
		let __returnValue = DNChar(cValue: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_CharReturnerDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate /* NativeAOT.CodeGeneratorInputSample.Transformer+StringTransformerDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer+StringTransformerDelegate"
	}}
	
	public typealias ClosureType = (_ inputString: System_String? /* System.String */) -> System_String?
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_CFunction_t {
		return { __innerContext, inputString in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			let inputStringSwift = System_String(handle: inputString)
			
			let __returnValueSwift = __innerClosure(inputStringSwift)
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ inputString: System_String? /* System.String */) throws -> System_String? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		let inputStringC = inputString?.__handle
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Invoke(__selfC, inputStringC, &__exceptionC)
	
		let __returnValue = System_String(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate /* NativeAOT.CodeGeneratorInputSample.Transformer+DoublesTransformerDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer+DoublesTransformerDelegate"
	}}
	
	public typealias ClosureType = (_ number1: Double /* System.Double */, _ number2: Double /* System.Double */) -> Double
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_CFunction_t {
		return { __innerContext, number1, number2 in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			let __returnValueSwift = __innerClosure(number1, number2)
		
			return __returnValueSwift
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke(_ number1: Double /* System.Double */, _ number2: Double /* System.Double */) throws -> Double {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Invoke(__selfC, number1, number2, &__exceptionC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValueC
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}

public class NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate /* NativeAOT.CodeGeneratorInputSample.Transformer+StringGetterDelegate */: System_MulticastDelegate {
	public override class var typeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate"
	}}
	
	public override class var fullTypeName: String { get {
		"NativeAOT.CodeGeneratorInputSample.Transformer+StringGetterDelegate"
	}}
	
	public typealias ClosureType = () -> System_String?
	
	
	private static func __createCFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_CFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			let __innerSwiftContext = NativeBox<ClosureType>.fromPointer(__innerContext)
			let __innerClosure = __innerSwiftContext.value
		
			
			let __returnValueSwift = __innerClosure()
		
			let __returnValue = __returnValueSwift?.__handle
			__returnValueSwift?.__skipDestroy = true // Will be destroyed by .NET
		
			return __returnValue
		}
		
	}
	
	private static func __createCDestructorFunction() -> NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_CDestructorFunction_t {
		return { __innerContext in
			guard let __innerContext else { fatalError("Context is nil") }
		
			NativeBox<ClosureType>.release(__innerContext)
		}
		
	}
	
	public convenience init?(_ __closure: @escaping ClosureType) {
		let __cFunction = Self.__createCFunction()
		let __cDestructorFunction = Self.__createCDestructorFunction()
		
		let __outerSwiftContext = NativeBox(__closure)
		let __outerContext = __outerSwiftContext.retainedPointer()
		
		guard let __delegateC = NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Create(__outerContext, __cFunction, __cDestructorFunction) else { return nil }
		
		self.init(handle: __delegateC)
		
	}
	
	public func invoke() throws -> System_String? {
		var __exceptionC: System_Exception_t?
	
		let __selfC = self.__handle
	
		
		let __returnValueC = NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Invoke(__selfC, &__exceptionC)
	
		let __returnValue = System_String(handle: __returnValueC)
	
	    if let __exceptionC {
	        let __exception = System_Exception(handle: __exceptionC)
	        let __error = __exception.error
	        
	        throw __error
	    }
	
		return __returnValue
	}
	
	public override class var typeOf: System_Type /* System.Type */ { get {
		return System_Type(handle: NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_TypeOf())
		
	}}
	
	internal override func destroy() {
		NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Destroy(self.__handle)
		
	}
	
	
	
	
}


// MARK: - END APIs

// MARK: - BEGIN API Extensions
extension NativeAOT_CodeGeneratorInputSample_Person? {
	public func increaseAge(_ byYears: Int32 /* System.Int32 */) throws {
		try NativeAOT_CodeGeneratorInputSample_Person_Extensions.increaseAge(self, byYears)
	}
	
	public func tryGetAddress(_ address: inout NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */) throws -> Bool {
		return try NativeAOT_CodeGeneratorInputSample_Person_Extensions.tryGetAddress(self, &address)
	}
	
	
}

extension NativeAOT_CodeGeneratorInputSample_Person {
	public func increaseAge(_ byYears: Int32 /* System.Int32 */) throws {
		try NativeAOT_CodeGeneratorInputSample_Person_Extensions.increaseAge(self, byYears)
	}
	
	public func tryGetAddress(_ address: inout NativeAOT_CodeGeneratorInputSample_Address? /* NativeAOT.CodeGeneratorInputSample.Address */) throws -> Bool {
		return try NativeAOT_CodeGeneratorInputSample_Person_Extensions.tryGetAddress(self, &address)
	}
	
	
}


// MARK: - END API Extensions

// MARK: - BEGIN Footer


// MARK: - END Footer

