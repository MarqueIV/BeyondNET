// Number of generated types: 179
// Number of generated members: 1892

// <Header>
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace NativeGeneratedCode;


// </Header>
// <Shared Code>
internal enum CBool: byte
{
    True = 1,
    False = 0
}

internal enum CStatus: int
{
    Success = 1,
    Failure = -1
}

#if NETSTANDARD2_0 ||  NETCOREAPP2_0 ||  NETCOREAPP2_1 ||  NETCOREAPP2_2 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NET47 || NET471 || NET472 || NET48
public static class ConditionalWeakTable_Extensions
{
    public static void AddOrUpdate<TKey, TValue>(
        this ConditionalWeakTable<TKey, TValue> conditionalWeakTable,
        TKey key,
        TValue value
    ) 
        where TKey: class
        where TValue: class
    {
        conditionalWeakTable.Remove(key);
        conditionalWeakTable.Add(key, value);
    }
}
#endif

internal unsafe class NativeDelegateBox<TDelegateType, TFunctionPointerType>
    where TDelegateType: Delegate
    where TFunctionPointerType: unmanaged
{
    internal TDelegateType Trampoline { get; }
    internal void* Context { get; }
    internal TFunctionPointerType FunctionPointer { get; }

    internal NativeDelegateBox(
        TDelegateType trampoline,
        void* context,
        TFunctionPointerType? functionPointer
    )
    {
        Trampoline = trampoline ?? throw new ArgumentNullException(nameof(trampoline));
        Context = context is not null ? context : throw new ArgumentNullException(nameof(context));
        FunctionPointer = functionPointer ?? throw new ArgumentNullException(nameof(functionPointer));
    }
}

internal static unsafe class InteropUtils
{
    #region Allocation
    internal static GCHandle AllocateGCHandle(this object instance, GCHandleType handleType)
    {
        GCHandle handle = GCHandle.Alloc(instance, handleType);

        return handle;
    }
    
    internal static void* AllocateGCHandleAndGetAddress(this object? instance)
    {
        if (instance is null) {
            return null;
        }
        
        GCHandle handle = instance.AllocateGCHandle(GCHandleType.Normal);
        void* handleAddress = handle.ToHandleAddress();

        return handleAddress;
    }
    #endregion Allocation

    #region Free
    internal static void FreeIfAllocated(void* handleAddress)
    {
        if (handleAddress is null) {
            return;
        }

        GCHandle? handle = GetGCHandle(handleAddress);
        
        handle?.FreeIfAllocated();
    }
    
    internal static void FreeIfAllocated(this GCHandle handle)
    {
        if (!handle.IsAllocated) {
            return;
        }

        handle.Free();
    }
    #endregion Free

    #region Handle Address/GCHandle <-> Object Conversion
    internal static void* ToHandleAddress(this GCHandle handle)
    {
        void* handleAddress = (void*)GCHandle.ToIntPtr(handle);

        return handleAddress;
    }

    internal static GCHandle? GetGCHandle(void* handleAddress)
    {
        if (handleAddress is null) {
            return null;
        }
        
        GCHandle handle = GCHandle.FromIntPtr((nint)handleAddress);

        return handle;
    }

    internal static T? GetInstance<T>(void* handleAddress)
    {
        GCHandle? handle = GetGCHandle(handleAddress);

        object? target = handle?.Target;

        if (target is null) {
            return default;
        }

        T instance = (T)target;

        return instance;
    }
    #endregion Handle Address/GCHandle <-> Object Conversion

    #region Strings
    /// <summary>
    /// This allocates a native char* and copies the contents of the managed string into it.
    /// The allocated native string must be freed when not needed anymore!
    /// </summary>
    internal static byte* CopyToCString(this string? @string)
    {
        if (@string is null) {
            return null;
        }

        byte* cString = (byte*)Marshal.StringToHGlobalAuto(@string);
        
        return cString;
    }

    /// <summary>
    /// This allocates a managed string and copies the contents of the native char* into it.
    /// </summary>
    internal static string? ToDotNetString(byte* cString)
    {
        if (cString is null) {
            return null;
        }
        
        string? @string = Marshal.PtrToStringAuto((nint)cString);

        return @string;
    }
    #endregion Strings

    #region Bools
    internal static CBool ToCBool(this bool @bool)
    {
        if (@bool) {
            return CBool.True;
        } else {
            return CBool.False;
        }
    }

    public static bool ToBool(this CBool cBool)
    {
        return cBool == CBool.True;
    }
    #endregion Bools
}

// </Shared Code>
// <Unsupported Types>
// Omitted due to settings

// </Unsupported Types>
// <APIs>
internal unsafe class NativeAOT_CodeGeneratorInputSample_AnimalFactory
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal(byte* /* System.String */ animalName, void** /* System.Exception */ __outException)
	{
		System.String animalNameConverted = InteropUtils.ToDotNetString(animalName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.IAnimal __returnValue = NativeAOT.CodeGeneratorInputSample.AnimalFactory.CreateAnimal(animalNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.AnimalFactory */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Object
{
	[UnmanagedCallersOnly(EntryPoint = "System_Object_GetType")]
	internal static void* /* System.Type */ System_Object_GetType(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_ToString")]
	internal static byte* /* System.String */ System_Object_ToString(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Equals")]
	internal static CBool /* System.Boolean */ System_Object_Equals(void* /* System.Object */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Equals1")]
	internal static CBool /* System.Boolean */ System_Object_Equals1(void* /* System.Object */ objA, void* /* System.Object */ objB, void** /* System.Exception */ __outException)
	{
		System.Object objAConverted = InteropUtils.GetInstance<System.Object>(objA);
		System.Object objBConverted = InteropUtils.GetInstance<System.Object>(objB);
	
	    try {
			System.Boolean __returnValue = System.Object.Equals(objAConverted, objBConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_ReferenceEquals")]
	internal static CBool /* System.Boolean */ System_Object_ReferenceEquals(void* /* System.Object */ objA, void* /* System.Object */ objB, void** /* System.Exception */ __outException)
	{
		System.Object objAConverted = InteropUtils.GetInstance<System.Object>(objA);
		System.Object objBConverted = InteropUtils.GetInstance<System.Object>(objB);
	
	    try {
			System.Boolean __returnValue = System.Object.ReferenceEquals(objAConverted, objBConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_GetHashCode")]
	internal static int /* System.Int32 */ System_Object_GetHashCode(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Create")]
	internal static void* /* System.Object */ System_Object_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object __returnValue = new System.Object();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Destroy")]
	internal static void /* System.Void */ System_Object_Destroy(void* /* System.Object */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Type
{
	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType")]
	internal static void* /* System.Type */ System_Type_GetType(byte* /* System.String */ typeName, CBool /* System.Boolean */ throwOnError, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType1")]
	internal static void* /* System.Type */ System_Type_GetType1(byte* /* System.String */ typeName, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType2")]
	internal static void* /* System.Type */ System_Type_GetType2(byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromHandle")]
	internal static void* /* System.Type */ System_Type_GetTypeFromHandle(void* /* System.RuntimeTypeHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeTypeHandle handleConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(handle);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromHandle(handleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType3")]
	internal static void* /* System.Type */ System_Type_GetType3(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetElementType")]
	internal static void* /* System.Type */ System_Type_GetElementType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetElementType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetArrayRank")]
	internal static int /* System.Int32 */ System_Type_GetArrayRank(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetArrayRank();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetGenericTypeDefinition")]
	internal static void* /* System.Type */ System_Type_GetGenericTypeDefinition(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetGenericTypeDefinition();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAssignableTo")]
	internal static CBool /* System.Boolean */ System_Type_IsAssignableTo(void* /* System.Type */ __self, void* /* System.Type */ targetType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type targetTypeConverted = InteropUtils.GetInstance<System.Type>(targetType);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssignableTo(targetTypeConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvent")]
	internal static void* /* System.Reflection.EventInfo */ System_Type_GetEvent(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.EventInfo __returnValue = __selfConverted.GetEvent(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvent1")]
	internal static void* /* System.Reflection.EventInfo */ System_Type_GetEvent1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.EventInfo __returnValue = __selfConverted.GetEvent(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Type_GetField(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetField1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Type_GetField1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFunctionPointerReturnType")]
	internal static void* /* System.Type */ System_Type_GetFunctionPointerReturnType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetFunctionPointerReturnType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMemberWithSameMetadataDefinitionAs")]
	internal static void* /* System.Reflection.MemberInfo */ System_Type_GetMemberWithSameMetadataDefinitionAs(void* /* System.Type */ __self, void* /* System.Reflection.MemberInfo */ member, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.MemberInfo memberConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(member);
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.GetMemberWithSameMetadataDefinitionAs(memberConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedType")]
	internal static void* /* System.Type */ System_Type_GetNestedType(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetNestedType(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedType1")]
	internal static void* /* System.Type */ System_Type_GetNestedType1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetNestedType(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty1")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty2")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty2(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type */ returnType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, returnTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeHandle")]
	internal static void* /* System.RuntimeTypeHandle */ System_Type_GetTypeHandle(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.RuntimeTypeHandle __returnValue = System.Type.GetTypeHandle(oConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Type_GetTypeCode(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.TypeCode __returnValue = System.Type.GetTypeCode(typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID(void* /* System.Guid */ clsid, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID1")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID1(void* /* System.Guid */ clsid, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID2")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID2(void* /* System.Guid */ clsid, byte* /* System.String */ server, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, serverConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID3")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID3(void* /* System.Guid */ clsid, byte* /* System.String */ server, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, serverConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID(byte* /* System.String */ progID, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID1")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID1(byte* /* System.String */ progID, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID2")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID2(byte* /* System.String */ progID, byte* /* System.String */ server, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, serverConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID3")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID3(byte* /* System.String */ progID, byte* /* System.String */ server, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, serverConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterface")]
	internal static void* /* System.Type */ System_Type_GetInterface(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetInterface(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterface1")]
	internal static void* /* System.Type */ System_Type_GetInterface1(void* /* System.Type */ __self, byte* /* System.String */ name, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetInterface(nameConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterfaceMap")]
	internal static void* /* System.Reflection.InterfaceMapping */ System_Type_GetInterfaceMap(void* /* System.Type */ __self, void* /* System.Type */ interfaceType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type interfaceTypeConverted = InteropUtils.GetInstance<System.Type>(interfaceType);
	
	    try {
			System.Reflection.InterfaceMapping __returnValue = __selfConverted.GetInterfaceMap(interfaceTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsInstanceOfType")]
	internal static CBool /* System.Boolean */ System_Type_IsInstanceOfType(void* /* System.Type */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInstanceOfType(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEquivalentTo")]
	internal static CBool /* System.Boolean */ System_Type_IsEquivalentTo(void* /* System.Type */ __self, void* /* System.Type */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type otherConverted = InteropUtils.GetInstance<System.Type>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEquivalentTo(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumUnderlyingType")]
	internal static void* /* System.Type */ System_Type_GetEnumUnderlyingType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetEnumUnderlyingType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumValues")]
	internal static void* /* System.Array */ System_Type_GetEnumValues(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Array __returnValue = __selfConverted.GetEnumValues();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumValuesAsUnderlyingType")]
	internal static void* /* System.Array */ System_Type_GetEnumValuesAsUnderlyingType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Array __returnValue = __selfConverted.GetEnumValuesAsUnderlyingType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeArrayType")]
	internal static void* /* System.Type */ System_Type_MakeArrayType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeArrayType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeArrayType1")]
	internal static void* /* System.Type */ System_Type_MakeArrayType1(void* /* System.Type */ __self, int /* System.Int32 */ rank, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeArrayType(rank);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeByRefType")]
	internal static void* /* System.Type */ System_Type_MakeByRefType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeByRefType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakePointerType")]
	internal static void* /* System.Type */ System_Type_MakePointerType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakePointerType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeGenericMethodParameter")]
	internal static void* /* System.Type */ System_Type_MakeGenericMethodParameter(int /* System.Int32 */ position, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Type __returnValue = System.Type.MakeGenericMethodParameter(position);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ToString")]
	internal static byte* /* System.String */ System_Type_ToString(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Equals")]
	internal static CBool /* System.Boolean */ System_Type_Equals(void* /* System.Type */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetHashCode")]
	internal static int /* System.Int32 */ System_Type_GetHashCode(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Equals1")]
	internal static CBool /* System.Boolean */ System_Type_Equals1(void* /* System.Type */ __self, void* /* System.Type */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type oConverted = InteropUtils.GetInstance<System.Type>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ReflectionOnlyGetType")]
	internal static void* /* System.Type */ System_Type_ReflectionOnlyGetType(byte* /* System.String */ typeName, CBool /* System.Boolean */ throwIfNotFound, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwIfNotFoundConverted = throwIfNotFound.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.ReflectionOnlyGetType(typeNameConverted, throwIfNotFoundConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEnumDefined")]
	internal static CBool /* System.Boolean */ System_Type_IsEnumDefined(void* /* System.Type */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEnumDefined(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumName")]
	internal static byte* /* System.String */ System_Type_GetEnumName(void* /* System.Type */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = __selfConverted.GetEnumName(valueConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSubclassOf")]
	internal static CBool /* System.Boolean */ System_Type_IsSubclassOf(void* /* System.Type */ __self, void* /* System.Type */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type cConverted = InteropUtils.GetInstance<System.Type>(c);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSubclassOf(cConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAssignableFrom")]
	internal static CBool /* System.Boolean */ System_Type_IsAssignableFrom(void* /* System.Type */ __self, void* /* System.Type */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type cConverted = InteropUtils.GetInstance<System.Type>(c);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssignableFrom(cConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsInterface_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsInterface_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInterface;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Type_MemberType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Namespace_Get")]
	internal static byte* /* System.String */ System_Type_Namespace_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Namespace;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_AssemblyQualifiedName_Get")]
	internal static byte* /* System.String */ System_Type_AssemblyQualifiedName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AssemblyQualifiedName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FullName_Get")]
	internal static byte* /* System.String */ System_Type_FullName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Assembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Type_Assembly_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Assembly;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Module_Get")]
	internal static void* /* System.Reflection.Module */ System_Type_Module_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.Module;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNested_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNested_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNested;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DeclaringType_Get")]
	internal static void* /* System.Type */ System_Type_DeclaringType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.DeclaringType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DeclaringMethod_Get")]
	internal static void* /* System.Reflection.MethodBase */ System_Type_DeclaringMethod_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.DeclaringMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ReflectedType_Get")]
	internal static void* /* System.Type */ System_Type_ReflectedType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReflectedType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_UnderlyingSystemType_Get")]
	internal static void* /* System.Type */ System_Type_UnderlyingSystemType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.UnderlyingSystemType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsTypeDefinition_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsTypeDefinition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsTypeDefinition;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsArray_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsArray;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsByRef_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsByRef_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsByRef;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPointer_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPointer;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsConstructedGenericType_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsConstructedGenericType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructedGenericType;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericParameter_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsGenericParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericParameter;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericTypeParameter_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsGenericTypeParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericTypeParameter;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericMethodParameter_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsGenericMethodParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethodParameter;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericType_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsGenericType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericType;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericTypeDefinition_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsGenericTypeDefinition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericTypeDefinition;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSZArray_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSZArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSZArray;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsVariableBoundArray_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsVariableBoundArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVariableBoundArray;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsByRefLike_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsByRefLike_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsByRefLike;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsFunctionPointer_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsFunctionPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFunctionPointer;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsUnmanagedFunctionPointer_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsUnmanagedFunctionPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsUnmanagedFunctionPointer;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_HasElementType_Get")]
	internal static CBool /* System.Boolean */ System_Type_HasElementType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasElementType;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GenericParameterPosition_Get")]
	internal static int /* System.Int32 */ System_Type_GenericParameterPosition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GenericParameterPosition;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GenericParameterAttributes_Get")]
	internal static System.Reflection.GenericParameterAttributes /* System.Reflection.GenericParameterAttributes */ System_Type_GenericParameterAttributes_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.GenericParameterAttributes __returnValue = __selfConverted.GenericParameterAttributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.GenericParameterAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Attributes_Get")]
	internal static System.Reflection.TypeAttributes /* System.Reflection.TypeAttributes */ System_Type_Attributes_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.TypeAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.TypeAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAbstract_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsAbstract_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAbstract;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsImport_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsImport_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsImport;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSealed_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSealed_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSealed;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSpecialName_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSpecialName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsClass_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsClass;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedAssembly_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamANDAssem_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedFamANDAssem_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamANDAssem;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamily_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedFamily_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamily;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamORAssem_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedFamORAssem_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamORAssem;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedPrivate_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedPrivate_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedPrivate;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedPublic_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNestedPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedPublic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNotPublic_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsNotPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNotPublic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPublic_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAutoLayout_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsAutoLayout_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAutoLayout;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsExplicitLayout_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsExplicitLayout_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsExplicitLayout;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsLayoutSequential_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsLayoutSequential_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLayoutSequential;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAnsiClass_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsAnsiClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAnsiClass;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAutoClass_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsAutoClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAutoClass;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsUnicodeClass_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsUnicodeClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsUnicodeClass;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsCOMObject_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsCOMObject_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCOMObject;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsContextful_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsContextful_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsContextful;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEnum_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsEnum_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEnum;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsMarshalByRef_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsMarshalByRef_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMarshalByRef;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPrimitive_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsPrimitive_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrimitive;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsValueType_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsValueType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsValueType;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSignatureType_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSignatureType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSignatureType;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecurityCritical_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSecurityCritical_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecuritySafeCritical_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSecuritySafeCritical_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecurityTransparent_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSecurityTransparent_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_StructLayoutAttribute_Get")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Type_StructLayoutAttribute_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = __selfConverted.StructLayoutAttribute;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_TypeInitializer_Get")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_TypeInitializer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.TypeInitializer;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_TypeHandle_Get")]
	internal static void* /* System.RuntimeTypeHandle */ System_Type_TypeHandle_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.TypeHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GUID_Get")]
	internal static void* /* System.Guid */ System_Type_GUID_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.GUID;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_BaseType_Get")]
	internal static void* /* System.Type */ System_Type_BaseType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.BaseType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DefaultBinder_Get")]
	internal static void* /* System.Reflection.Binder */ System_Type_DefaultBinder_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Binder __returnValue = System.Type.DefaultBinder;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSerializable_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsSerializable_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSerializable;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ContainsGenericParameters_Get")]
	internal static CBool /* System.Boolean */ System_Type_ContainsGenericParameters_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsGenericParameters;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsVisible_Get")]
	internal static CBool /* System.Boolean */ System_Type_IsVisible_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVisible;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Delimiter_Get")]
	internal static char /* System.Char */ System_Type_Delimiter_Get()
	{
	
		System.Char __returnValue = System.Type.Delimiter;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Missing_Get")]
	internal static void* /* System.Object */ System_Type_Missing_Get()
	{
	
		System.Object __returnValue = System.Type.Missing;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterAttribute_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterAttribute_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterAttribute;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterName_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterName_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterName;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterNameIgnoreCase_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterNameIgnoreCase_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterNameIgnoreCase;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Destroy")]
	internal static void /* System.Void */ System_Type_Destroy(void* /* System.Type */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MemberInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_HasSameMetadataDefinitionAs")]
	internal static CBool /* System.Boolean */ System_Reflection_MemberInfo_HasSameMetadataDefinitionAs(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Reflection.MemberInfo */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Reflection.MemberInfo otherConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasSameMetadataDefinitionAs(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_IsDefined")]
	internal static CBool /* System.Boolean */ System_Reflection_MemberInfo_IsDefined(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_MemberInfo_Equals(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MemberInfo_GetHashCode(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_MemberInfo_MemberType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_MemberInfo_Name_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_DeclaringType_Get")]
	internal static void* /* System.Type */ System_Reflection_MemberInfo_DeclaringType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.DeclaringType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_ReflectedType_Get")]
	internal static void* /* System.Type */ System_Reflection_MemberInfo_ReflectedType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReflectedType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Module_Get")]
	internal static void* /* System.Reflection.Module */ System_Reflection_MemberInfo_Module_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.Module;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_IsCollectible_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MemberInfo_IsCollectible_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCollectible;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_MemberInfo_MetadataToken_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_MemberInfo_Destroy(void* /* System.Reflection.MemberInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Enum
{
	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetName")]
	internal static byte* /* System.String */ System_Enum_GetName(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = System.Enum.GetName(enumTypeConverted, valueConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetUnderlyingType")]
	internal static void* /* System.Type */ System_Enum_GetUnderlyingType(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Type __returnValue = System.Enum.GetUnderlyingType(enumTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValues")]
	internal static void* /* System.Array */ System_Enum_GetValues(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Array __returnValue = System.Enum.GetValues(enumTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValuesAsUnderlyingType")]
	internal static void* /* System.Array */ System_Enum_GetValuesAsUnderlyingType(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Array __returnValue = System.Enum.GetValuesAsUnderlyingType(enumTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_HasFlag")]
	internal static CBool /* System.Boolean */ System_Enum_HasFlag(void* /* System.Enum */ __self, void* /* System.Enum */ flag, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Enum flagConverted = InteropUtils.GetInstance<System.Enum>(flag);
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasFlag(flagConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_IsDefined")]
	internal static CBool /* System.Boolean */ System_Enum_IsDefined(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = System.Enum.IsDefined(enumTypeConverted, valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse")]
	internal static void* /* System.Object */ System_Enum_Parse(void* /* System.Type */ enumType, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Object __returnValue = System.Enum.Parse(enumTypeConverted, valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse1")]
	internal static void* /* System.Object */ System_Enum_Parse1(void* /* System.Type */ enumType, byte* /* System.String */ value, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Object __returnValue = System.Enum.Parse(enumTypeConverted, valueConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Equals")]
	internal static CBool /* System.Boolean */ System_Enum_Equals(void* /* System.Enum */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetHashCode")]
	internal static int /* System.Int32 */ System_Enum_GetHashCode(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_CompareTo")]
	internal static int /* System.Int32 */ System_Enum_CompareTo(void* /* System.Enum */ __self, void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(targetConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString")]
	internal static byte* /* System.String */ System_Enum_ToString(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString1")]
	internal static byte* /* System.String */ System_Enum_ToString1(void* /* System.Enum */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString2")]
	internal static byte* /* System.String */ System_Enum_ToString2(void* /* System.Enum */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString3")]
	internal static byte* /* System.String */ System_Enum_ToString3(void* /* System.Enum */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Format")]
	internal static byte* /* System.String */ System_Enum_Format(void* /* System.Type */ enumType, void* /* System.Object */ value, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = System.Enum.Format(enumTypeConverted, valueConverted, formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Enum_GetTypeCode(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject")]
	internal static void* /* System.Object */ System_Enum_ToObject(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject1")]
	internal static void* /* System.Object */ System_Enum_ToObject1(void* /* System.Type */ enumType, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject2")]
	internal static void* /* System.Object */ System_Enum_ToObject2(void* /* System.Type */ enumType, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject3")]
	internal static void* /* System.Object */ System_Enum_ToObject3(void* /* System.Type */ enumType, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject4")]
	internal static void* /* System.Object */ System_Enum_ToObject4(void* /* System.Type */ enumType, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject5")]
	internal static void* /* System.Object */ System_Enum_ToObject5(void* /* System.Type */ enumType, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject6")]
	internal static void* /* System.Object */ System_Enum_ToObject6(void* /* System.Type */ enumType, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject7")]
	internal static void* /* System.Object */ System_Enum_ToObject7(void* /* System.Type */ enumType, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject8")]
	internal static void* /* System.Object */ System_Enum_ToObject8(void* /* System.Type */ enumType, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Destroy")]
	internal static void /* System.Void */ System_Enum_Destroy(void* /* System.Enum */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ValueType
{
	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_Equals")]
	internal static CBool /* System.Boolean */ System_ValueType_Equals(void* /* System.ValueType */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_GetHashCode")]
	internal static int /* System.Int32 */ System_ValueType_GetHashCode(void* /* System.ValueType */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_ToString")]
	internal static byte* /* System.String */ System_ValueType_ToString(void* /* System.ValueType */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_Destroy")]
	internal static void /* System.Void */ System_ValueType_Destroy(void* /* System.ValueType */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_String
{
	[UnmanagedCallersOnly(EntryPoint = "System_String_Intern")]
	internal static byte* /* System.String */ System_String_Intern(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.Intern(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsInterned")]
	internal static byte* /* System.String */ System_String_IsInterned(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.IsInterned(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare")]
	internal static int /* System.Int32 */ System_String_Compare(byte* /* System.String */ strA, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare1")]
	internal static int /* System.Int32 */ System_String_Compare1(byte* /* System.String */ strA, byte* /* System.String */ strB, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, ignoreCaseConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare2")]
	internal static int /* System.Int32 */ System_String_Compare2(byte* /* System.String */ strA, byte* /* System.String */ strB, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare3")]
	internal static int /* System.Int32 */ System_String_Compare3(byte* /* System.String */ strA, byte* /* System.String */ strB, void* /* System.Globalization.CultureInfo */ culture, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, cultureConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare4")]
	internal static int /* System.Int32 */ System_String_Compare4(byte* /* System.String */ strA, byte* /* System.String */ strB, CBool /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, ignoreCaseConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare5")]
	internal static int /* System.Int32 */ System_String_Compare5(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare6")]
	internal static int /* System.Int32 */ System_String_Compare6(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, ignoreCaseConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare7")]
	internal static int /* System.Int32 */ System_String_Compare7(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, CBool /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, ignoreCaseConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare8")]
	internal static int /* System.Int32 */ System_String_Compare8(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void* /* System.Globalization.CultureInfo */ culture, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, cultureConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare9")]
	internal static int /* System.Int32 */ System_String_Compare9(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareOrdinal")]
	internal static int /* System.Int32 */ System_String_CompareOrdinal(byte* /* System.String */ strA, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.CompareOrdinal(strAConverted, strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareOrdinal1")]
	internal static int /* System.Int32 */ System_String_CompareOrdinal1(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.CompareOrdinal(strAConverted, indexA, strBConverted, indexB, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareTo")]
	internal static int /* System.Int32 */ System_String_CompareTo(byte* /* System.String */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareTo1")]
	internal static int /* System.Int32 */ System_String_CompareTo1(byte* /* System.String */ __self, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith")]
	internal static CBool /* System.Boolean */ System_String_EndsWith(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith1")]
	internal static CBool /* System.Boolean */ System_String_EndsWith1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith2")]
	internal static CBool /* System.Boolean */ System_String_EndsWith2(byte* /* System.String */ __self, byte* /* System.String */ value, CBool /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted, ignoreCaseConverted, cultureConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith3")]
	internal static CBool /* System.Boolean */ System_String_EndsWith3(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(value);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals")]
	internal static CBool /* System.Boolean */ System_String_Equals(byte* /* System.String */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals1")]
	internal static CBool /* System.Boolean */ System_String_Equals1(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals2")]
	internal static CBool /* System.Boolean */ System_String_Equals2(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals3")]
	internal static CBool /* System.Boolean */ System_String_Equals3(byte* /* System.String */ a, byte* /* System.String */ b, void** /* System.Exception */ __outException)
	{
		System.String aConverted = InteropUtils.ToDotNetString(a);
		System.String bConverted = InteropUtils.ToDotNetString(b);
	
	    try {
			System.Boolean __returnValue = System.String.Equals(aConverted, bConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals4")]
	internal static CBool /* System.Boolean */ System_String_Equals4(byte* /* System.String */ a, byte* /* System.String */ b, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String aConverted = InteropUtils.ToDotNetString(a);
		System.String bConverted = InteropUtils.ToDotNetString(b);
	
	    try {
			System.Boolean __returnValue = System.String.Equals(aConverted, bConverted, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetHashCode")]
	internal static int /* System.Int32 */ System_String_GetHashCode(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetHashCode1")]
	internal static int /* System.Int32 */ System_String_GetHashCode1(byte* /* System.String */ __self, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith")]
	internal static CBool /* System.Boolean */ System_String_StartsWith(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith1")]
	internal static CBool /* System.Boolean */ System_String_StartsWith1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith2")]
	internal static CBool /* System.Boolean */ System_String_StartsWith2(byte* /* System.String */ __self, byte* /* System.String */ value, CBool /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted, ignoreCaseConverted, cultureConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith3")]
	internal static CBool /* System.Boolean */ System_String_StartsWith3(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(value);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Clone")]
	internal static void* /* System.Object */ System_String_Clone(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Copy")]
	internal static byte* /* System.String */ System_String_Copy(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.Copy(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNullOrEmpty")]
	internal static CBool /* System.Boolean */ System_String_IsNullOrEmpty(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.String.IsNullOrEmpty(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNullOrWhiteSpace")]
	internal static CBool /* System.Boolean */ System_String_IsNullOrWhiteSpace(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.String.IsNullOrWhiteSpace(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToString")]
	internal static byte* /* System.String */ System_String_ToString(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToString1")]
	internal static byte* /* System.String */ System_String_ToString1(byte* /* System.String */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetEnumerator")]
	internal static void* /* System.CharEnumerator */ System_String_GetEnumerator(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.CharEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EnumerateRunes")]
	internal static void* /* System.Text.StringRuneEnumerator */ System_String_EnumerateRunes(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Text.StringRuneEnumerator __returnValue = __selfConverted.EnumerateRunes();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_String_GetTypeCode(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNormalized")]
	internal static CBool /* System.Boolean */ System_String_IsNormalized(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNormalized();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNormalized1")]
	internal static CBool /* System.Boolean */ System_String_IsNormalized1(byte* /* System.String */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ normalizationForm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNormalized(normalizationForm);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Normalize")]
	internal static byte* /* System.String */ System_String_Normalize(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Normalize();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Normalize1")]
	internal static byte* /* System.String */ System_String_Normalize1(byte* /* System.String */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ normalizationForm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Normalize(normalizationForm);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat")]
	internal static byte* /* System.String */ System_String_Concat(void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat1")]
	internal static byte* /* System.String */ System_String_Concat1(void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted, arg1Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat2")]
	internal static byte* /* System.String */ System_String_Concat2(void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted, arg1Converted, arg2Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat3")]
	internal static byte* /* System.String */ System_String_Concat3(byte* /* System.String */ str0, byte* /* System.String */ str1, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat4")]
	internal static byte* /* System.String */ System_String_Concat4(byte* /* System.String */ str0, byte* /* System.String */ str1, byte* /* System.String */ str2, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
		System.String str2Converted = InteropUtils.ToDotNetString(str2);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted, str2Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat5")]
	internal static byte* /* System.String */ System_String_Concat5(byte* /* System.String */ str0, byte* /* System.String */ str1, byte* /* System.String */ str2, byte* /* System.String */ str3, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
		System.String str2Converted = InteropUtils.ToDotNetString(str2);
		System.String str3Converted = InteropUtils.ToDotNetString(str3);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted, str2Converted, str3Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format")]
	internal static byte* /* System.String */ System_String_Format(byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format1")]
	internal static byte* /* System.String */ System_String_Format1(byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted, arg1Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format2")]
	internal static byte* /* System.String */ System_String_Format2(byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted, arg1Converted, arg2Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format3")]
	internal static byte* /* System.String */ System_String_Format3(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format4")]
	internal static byte* /* System.String */ System_String_Format4(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted, arg1Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format5")]
	internal static byte* /* System.String */ System_String_Format5(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted, arg1Converted, arg2Converted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Insert")]
	internal static byte* /* System.String */ System_String_Insert(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.String __returnValue = __selfConverted.Insert(startIndex, valueConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadLeft")]
	internal static byte* /* System.String */ System_String_PadLeft(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadLeft(totalWidth);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadLeft1")]
	internal static byte* /* System.String */ System_String_PadLeft1(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, char /* System.Char */ paddingChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadLeft(totalWidth, paddingChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadRight")]
	internal static byte* /* System.String */ System_String_PadRight(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadRight(totalWidth);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadRight1")]
	internal static byte* /* System.String */ System_String_PadRight1(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, char /* System.Char */ paddingChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadRight(totalWidth, paddingChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Remove")]
	internal static byte* /* System.String */ System_String_Remove(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Remove(startIndex, count);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Remove1")]
	internal static byte* /* System.String */ System_String_Remove1(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Remove(startIndex);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace")]
	internal static byte* /* System.String */ System_String_Replace(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, CBool /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted, ignoreCaseConverted, cultureConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace1")]
	internal static byte* /* System.String */ System_String_Replace1(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted, comparisonType);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace2")]
	internal static byte* /* System.String */ System_String_Replace2(byte* /* System.String */ __self, char /* System.Char */ oldChar, char /* System.Char */ newChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldChar, newChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace3")]
	internal static byte* /* System.String */ System_String_Replace3(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ReplaceLineEndings")]
	internal static byte* /* System.String */ System_String_ReplaceLineEndings(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReplaceLineEndings();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ReplaceLineEndings1")]
	internal static byte* /* System.String */ System_String_ReplaceLineEndings1(byte* /* System.String */ __self, byte* /* System.String */ replacementText, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String replacementTextConverted = InteropUtils.ToDotNetString(replacementText);
	
	    try {
			System.String __returnValue = __selfConverted.ReplaceLineEndings(replacementTextConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Substring")]
	internal static byte* /* System.String */ System_String_Substring(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Substring(startIndex);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Substring1")]
	internal static byte* /* System.String */ System_String_Substring1(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Substring(startIndex, length);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLower")]
	internal static byte* /* System.String */ System_String_ToLower(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLower();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLower1")]
	internal static byte* /* System.String */ System_String_ToLower1(byte* /* System.String */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.ToLower(cultureConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLowerInvariant")]
	internal static byte* /* System.String */ System_String_ToLowerInvariant(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLowerInvariant();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpper")]
	internal static byte* /* System.String */ System_String_ToUpper(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpper1")]
	internal static byte* /* System.String */ System_String_ToUpper1(byte* /* System.String */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper(cultureConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpperInvariant")]
	internal static byte* /* System.String */ System_String_ToUpperInvariant(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToUpperInvariant();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Trim")]
	internal static byte* /* System.String */ System_String_Trim(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Trim();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Trim1")]
	internal static byte* /* System.String */ System_String_Trim1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Trim(trimChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimStart")]
	internal static byte* /* System.String */ System_String_TrimStart(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimStart();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimStart1")]
	internal static byte* /* System.String */ System_String_TrimStart1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimStart(trimChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimEnd")]
	internal static byte* /* System.String */ System_String_TrimEnd(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimEnd();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimEnd1")]
	internal static byte* /* System.String */ System_String_TrimEnd1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimEnd(trimChar);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains")]
	internal static CBool /* System.Boolean */ System_String_Contains(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains1")]
	internal static CBool /* System.Boolean */ System_String_Contains1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(valueConverted, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains2")]
	internal static CBool /* System.Boolean */ System_String_Contains2(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(value);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains3")]
	internal static CBool /* System.Boolean */ System_String_Contains3(byte* /* System.String */ __self, char /* System.Char */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(value, comparisonType);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf")]
	internal static int /* System.Int32 */ System_String_IndexOf(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf1")]
	internal static int /* System.Int32 */ System_String_IndexOf1(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf2")]
	internal static int /* System.Int32 */ System_String_IndexOf2(byte* /* System.String */ __self, char /* System.Char */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf3")]
	internal static int /* System.Int32 */ System_String_IndexOf3(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf4")]
	internal static int /* System.Int32 */ System_String_IndexOf4(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf5")]
	internal static int /* System.Int32 */ System_String_IndexOf5(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf6")]
	internal static int /* System.Int32 */ System_String_IndexOf6(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf7")]
	internal static int /* System.Int32 */ System_String_IndexOf7(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf8")]
	internal static int /* System.Int32 */ System_String_IndexOf8(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf9")]
	internal static int /* System.Int32 */ System_String_IndexOf9(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, count, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf")]
	internal static int /* System.Int32 */ System_String_LastIndexOf(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf1")]
	internal static int /* System.Int32 */ System_String_LastIndexOf1(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf2")]
	internal static int /* System.Int32 */ System_String_LastIndexOf2(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf3")]
	internal static int /* System.Int32 */ System_String_LastIndexOf3(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf4")]
	internal static int /* System.Int32 */ System_String_LastIndexOf4(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf5")]
	internal static int /* System.Int32 */ System_String_LastIndexOf5(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf6")]
	internal static int /* System.Int32 */ System_String_LastIndexOf6(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf7")]
	internal static int /* System.Int32 */ System_String_LastIndexOf7(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf8")]
	internal static int /* System.Int32 */ System_String_LastIndexOf8(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, count, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Create")]
	internal static byte* /* System.String */ System_String_Create(char /* System.Char */ c, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = new System.String(c, count);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Length_Get")]
	internal static int /* System.Int32 */ System_String_Length_Get(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Empty_Get")]
	internal static byte* /* System.String */ System_String_Empty_Get()
	{
	
		System.String __returnValue = System.String.Empty;
		byte* _returnValueNative = __returnValue.CopyToCString();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Destroy")]
	internal static void /* System.Void */ System_String_Destroy(byte* /* System.String */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Globalization_CultureInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CreateSpecificCulture")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CreateSpecificCulture(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CreateSpecificCulture(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Globalization_CultureInfo_Equals(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_GetHashCode(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ToString(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_CultureInfo_GetFormat(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ClearCachedData")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_ClearCachedData(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.ClearCachedData();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetConsoleFallbackUICulture")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetConsoleFallbackUICulture(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.GetConsoleFallbackUICulture();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_CultureInfo_Clone(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ReadOnly")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_ReadOnly(void* /* System.Globalization.CultureInfo */ ci, void** /* System.Exception */ __outException)
	{
		System.Globalization.CultureInfo ciConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(ci);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.ReadOnly(ciConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(culture);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo1")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo1(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo2")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo2(byte* /* System.String */ name, byte* /* System.String */ altName, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.String altNameConverted = InteropUtils.ToDotNetString(altName);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted, altNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo3")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo3(byte* /* System.String */ name, CBool /* System.Boolean */ predefinedOnly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean predefinedOnlyConverted = predefinedOnly.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted, predefinedOnlyConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create1")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create1(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create2")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create2(byte* /* System.String */ name, CBool /* System.Boolean */ useUserOverride, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean useUserOverrideConverted = useUserOverride.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(nameConverted, useUserOverrideConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create3")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create3(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(culture);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create4")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create4(int /* System.Int32 */ culture, CBool /* System.Boolean */ useUserOverride, void** /* System.Exception */ __outException)
	{
		System.Boolean useUserOverrideConverted = useUserOverride.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(culture, useUserOverrideConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CurrentCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CurrentCulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentCulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_CurrentCulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.CurrentCulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CurrentUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CurrentUICulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentUICulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_CurrentUICulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.CurrentUICulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_InstalledUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_InstalledUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.InstalledUICulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.DefaultThreadCurrentCulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.DefaultThreadCurrentCulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.DefaultThreadCurrentUICulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.DefaultThreadCurrentUICulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_InvariantCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_InvariantCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.InvariantCulture;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Parent_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Parent_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.Parent;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_LCID_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_KeyboardLayoutId_Get")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_KeyboardLayoutId_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.KeyboardLayoutId;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Name_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_Name_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IetfLanguageTag_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_IetfLanguageTag_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.IetfLanguageTag;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DisplayName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_DisplayName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DisplayName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NativeName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_NativeName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NativeName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_EnglishName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_EnglishName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EnglishName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TwoLetterISOLanguageName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ThreeLetterISOLanguageName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ThreeLetterWindowsLanguageName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CompareInfo_Get")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CultureInfo_CompareInfo_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CompareInfo __returnValue = __selfConverted.CompareInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_TextInfo_Get")]
	internal static void* /* System.Globalization.TextInfo */ System_Globalization_CultureInfo_TextInfo_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.TextInfo __returnValue = __selfConverted.TextInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IsNeutralCulture_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_CultureInfo_IsNeutralCulture_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNeutralCulture;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CultureTypes_Get")]
	internal static System.Globalization.CultureTypes /* System.Globalization.CultureTypes */ System_Globalization_CultureInfo_CultureTypes_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureTypes __returnValue = __selfConverted.CultureTypes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CultureTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NumberFormat_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_CultureInfo_NumberFormat_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = __selfConverted.NumberFormat;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NumberFormat_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_NumberFormat_Set(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Globalization.NumberFormatInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.NumberFormat = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DateTimeFormat_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_CultureInfo_DateTimeFormat_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = __selfConverted.DateTimeFormat;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DateTimeFormat_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DateTimeFormat_Set(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Globalization.DateTimeFormatInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.DateTimeFormat = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Calendar_Get")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_CultureInfo_Calendar_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.Calendar __returnValue = __selfConverted.Calendar;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_UseUserOverride_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_CultureInfo_UseUserOverride_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.UseUserOverride;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_CultureInfo_IsReadOnly_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_Destroy(void* /* System.Globalization.CultureInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Void
{
	

}



internal unsafe class System_Globalization_CompareInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo(int /* System.Int32 */ culture, void* /* System.Reflection.Assembly */ assembly, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly assemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(assembly);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(culture, assemblyConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo1")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo1(byte* /* System.String */ name, void* /* System.Reflection.Assembly */ assembly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Assembly assemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(assembly);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(nameConverted, assemblyConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo2")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo2(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(culture);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo3")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo3(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsSortable(char /* System.Char */ ch, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(ch);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable1")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsSortable1(byte* /* System.String */ text, void** /* System.Exception */ __outException)
	{
		System.String textConverted = InteropUtils.ToDotNetString(text);
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(textConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable2")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsSortable2(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, byte* /* System.String */ string2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, string2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, byte* /* System.String */ string2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, string2Converted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, int /* System.Int32 */ length1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, int /* System.Int32 */ length2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, length1, string2Converted, offset2, length2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, string2Converted, offset2, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, string2Converted, offset2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, int /* System.Int32 */ length1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, int /* System.Int32 */ length2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, length1, string2Converted, offset2, length2, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsPrefix")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsPrefix(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ prefix, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String prefixConverted = InteropUtils.ToDotNetString(prefix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrefix(sourceConverted, prefixConverted, options);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsPrefix1")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsPrefix1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ prefix, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String prefixConverted = InteropUtils.ToDotNetString(prefix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrefix(sourceConverted, prefixConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSuffix")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsSuffix(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ suffix, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String suffixConverted = InteropUtils.ToDotNetString(suffix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSuffix(sourceConverted, suffixConverted, options);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSuffix1")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_IsSuffix1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ suffix, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String suffixConverted = InteropUtils.ToDotNetString(suffix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSuffix(sourceConverted, suffixConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf6")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf6(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf7")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf7(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf8")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf8(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf9")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf9(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf10")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf10(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf11")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf11(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf6")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf6(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf7")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf7(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf8")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf8(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf9")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf9(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf10")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf10(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf11")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf11(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetSortKey")]
	internal static void* /* System.Globalization.SortKey */ System_Globalization_CompareInfo_GetSortKey(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Globalization.SortKey __returnValue = __selfConverted.GetSortKey(sourceConverted, options);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetSortKey1")]
	internal static void* /* System.Globalization.SortKey */ System_Globalization_CompareInfo_GetSortKey1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Globalization.SortKey __returnValue = __selfConverted.GetSortKey(sourceConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Globalization_CompareInfo_Equals(void* /* System.Globalization.CompareInfo */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_GetHashCode(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetHashCode1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_GetHashCode1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(sourceConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_CompareInfo_ToString(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Name_Get")]
	internal static byte* /* System.String */ System_Globalization_CompareInfo_Name_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Version_Get")]
	internal static void* /* System.Globalization.SortVersion */ System_Globalization_CompareInfo_Version_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Globalization.SortVersion __returnValue = __selfConverted.Version;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LCID_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_CompareInfo_Destroy(void* /* System.Globalization.CompareInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_Assembly
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load(byte* /* System.String */ assemblyString, void** /* System.Exception */ __outException)
	{
		System.String assemblyStringConverted = InteropUtils.ToDotNetString(assemblyString);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(assemblyStringConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadWithPartialName")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadWithPartialName(byte* /* System.String */ partialName, void** /* System.Exception */ __outException)
	{
		System.String partialNameConverted = InteropUtils.ToDotNetString(partialName);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadWithPartialName(partialNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load1(void* /* System.Reflection.AssemblyName */ assemblyRef, void** /* System.Exception */ __outException)
	{
		System.Reflection.AssemblyName assemblyRefConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(assemblyRef);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(assemblyRefConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetExecutingAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetExecutingAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetExecutingAssembly();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetCallingAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetCallingAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetCallingAssembly();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceInfo")]
	internal static void* /* System.Reflection.ManifestResourceInfo */ System_Reflection_Assembly_GetManifestResourceInfo(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ resourceName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String resourceNameConverted = InteropUtils.ToDotNetString(resourceName);
	
	    try {
			System.Reflection.ManifestResourceInfo __returnValue = __selfConverted.GetManifestResourceInfo(resourceNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceStream")]
	internal static void* /* System.IO.Stream */ System_Reflection_Assembly_GetManifestResourceStream(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.GetManifestResourceStream(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceStream1")]
	internal static void* /* System.IO.Stream */ System_Reflection_Assembly_GetManifestResourceStream1(void* /* System.Reflection.Assembly */ __self, void* /* System.Type */ type, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.GetManifestResourceStream(typeConverted, nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetName")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_Assembly_GetName(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.AssemblyName __returnValue = __selfConverted.GetName();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetName1")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_Assembly_GetName1(void* /* System.Reflection.Assembly */ __self, CBool /* System.Boolean */ copiedName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean copiedNameConverted = copiedName.ToBool();
	
	    try {
			System.Reflection.AssemblyName __returnValue = __selfConverted.GetName(copiedNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType1")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType1(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, CBool /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted, throwOnErrorConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType2")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType2(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, CBool /* System.Boolean */ throwOnError, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsDefined")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_IsDefined(void* /* System.Reflection.Assembly */ __self, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateInstance")]
	internal static void* /* System.Object */ System_Reflection_Assembly_CreateInstance(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstance(typeNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateInstance1")]
	internal static void* /* System.Object */ System_Reflection_Assembly_CreateInstance1(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ typeName, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstance(typeNameConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetModule")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_GetModule(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.GetModule(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetSatelliteAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetSatelliteAssembly(void* /* System.Reflection.Assembly */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.GetSatelliteAssembly(cultureConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetSatelliteAssembly1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetSatelliteAssembly1(void* /* System.Reflection.Assembly */ __self, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Version */ version, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Version versionConverted = InteropUtils.GetInstance<System.Version>(version);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.GetSatelliteAssembly(cultureConverted, versionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetFile")]
	internal static void* /* System.IO.FileStream */ System_Reflection_Assembly_GetFile(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.GetFile(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_Assembly_GetObjectData(void* /* System.Reflection.Assembly */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ToString")]
	internal static byte* /* System.String */ System_Reflection_Assembly_ToString(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_Equals(void* /* System.Reflection.Assembly */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_Assembly_GetHashCode(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateQualifiedName")]
	internal static byte* /* System.String */ System_Reflection_Assembly_CreateQualifiedName(byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.String __returnValue = System.Reflection.Assembly.CreateQualifiedName(assemblyNameConverted, typeNameConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetAssembly(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetAssembly(typeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetEntryAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetEntryAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetEntryAssembly();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadFile")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadFile(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadFile(pathConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadFrom(assemblyFileConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_UnsafeLoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_UnsafeLoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.UnsafeLoadFrom(assemblyFileConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnlyLoad")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_ReflectionOnlyLoad(byte* /* System.String */ assemblyString, void** /* System.Exception */ __outException)
	{
		System.String assemblyStringConverted = InteropUtils.ToDotNetString(assemblyString);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.ReflectionOnlyLoad(assemblyStringConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnlyLoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_ReflectionOnlyLoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.ReflectionOnlyLoadFrom(assemblyFileConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_CodeBase_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CodeBase;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_EntryPoint_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Assembly_EntryPoint_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.EntryPoint;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_FullName_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_FullName_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ImageRuntimeVersion_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_ImageRuntimeVersion_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ImageRuntimeVersion;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsDynamic_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_IsDynamic_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDynamic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Location_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_Location_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Location;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_ReflectionOnly_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ReflectionOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsCollectible_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_IsCollectible_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCollectible;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsFullyTrusted_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_IsFullyTrusted_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFullyTrusted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_EscapedCodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_EscapedCodeBase_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EscapedCodeBase;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ManifestModule_Get")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_ManifestModule_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.ManifestModule;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GlobalAssemblyCache_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_Assembly_GlobalAssemblyCache_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.GlobalAssemblyCache;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_HostContext_Get")]
	internal static long /* System.Int64 */ System_Reflection_Assembly_HostContext_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.HostContext;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_SecurityRuleSet_Get")]
	internal static System.Security.SecurityRuleSet /* System.Security.SecurityRuleSet */ System_Reflection_Assembly_SecurityRuleSet_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Security.SecurityRuleSet __returnValue = __selfConverted.SecurityRuleSet;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Security.SecurityRuleSet);
		}
	}
	
	

	// TODO (Event): ModuleResolve
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Destroy")]
	internal static void /* System.Void */ System_Reflection_Assembly_Destroy(void* /* System.Reflection.Assembly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_AssemblyName
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Clone")]
	internal static void* /* System.Object */ System_Reflection_AssemblyName_Clone(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetAssemblyName")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_GetAssemblyName(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.AssemblyName __returnValue = System.Reflection.AssemblyName.GetAssemblyName(assemblyFileConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ToString")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_ToString(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_GetObjectData(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_OnDeserialization")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_OnDeserialization(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Object */ sender, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
	
	    try {
			__selfConverted.OnDeserialization(senderConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ReferenceMatchesDefinition")]
	internal static CBool /* System.Boolean */ System_Reflection_AssemblyName_ReferenceMatchesDefinition(void* /* System.Reflection.AssemblyName */ reference, void* /* System.Reflection.AssemblyName */ definition, void** /* System.Exception */ __outException)
	{
		System.Reflection.AssemblyName referenceConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(reference);
		System.Reflection.AssemblyName definitionConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(definition);
	
	    try {
			System.Boolean __returnValue = System.Reflection.AssemblyName.ReferenceMatchesDefinition(referenceConverted, definitionConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Create")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_Create(byte* /* System.String */ assemblyName, void** /* System.Exception */ __outException)
	{
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
	
	    try {
			System.Reflection.AssemblyName __returnValue = new System.Reflection.AssemblyName(assemblyNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Create1")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_Create1(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.AssemblyName __returnValue = new System.Reflection.AssemblyName();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_Name_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Name_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Name_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Name = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Version_Get")]
	internal static void* /* System.Version */ System_Reflection_AssemblyName_Version_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Version __returnValue = __selfConverted.Version;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Version_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Version_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Version */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Version = InteropUtils.GetInstance<System.Version>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureInfo_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Reflection_AssemblyName_CultureInfo_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.CultureInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureInfo_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CultureInfo_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CultureInfo = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureName_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_CultureName_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CultureName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureName_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CultureName_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CultureName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_CodeBase_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CodeBase;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CodeBase_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CodeBase_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CodeBase = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_EscapedCodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_EscapedCodeBase_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EscapedCodeBase;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ProcessorArchitecture_Get")]
	internal static System.Reflection.ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ System_Reflection_AssemblyName_ProcessorArchitecture_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.ProcessorArchitecture __returnValue = __selfConverted.ProcessorArchitecture;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ProcessorArchitecture);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ProcessorArchitecture_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_ProcessorArchitecture_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.ProcessorArchitecture = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ContentType_Get")]
	internal static System.Reflection.AssemblyContentType /* System.Reflection.AssemblyContentType */ System_Reflection_AssemblyName_ContentType_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.AssemblyContentType __returnValue = __selfConverted.ContentType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.AssemblyContentType);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ContentType_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_ContentType_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.AssemblyContentType /* System.Reflection.AssemblyContentType */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.ContentType = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Flags_Get")]
	internal static System.Reflection.AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ System_Reflection_AssemblyName_Flags_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.AssemblyNameFlags __returnValue = __selfConverted.Flags;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.AssemblyNameFlags);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Flags_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Flags_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Flags = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_HashAlgorithm_Get")]
	internal static System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ System_Reflection_AssemblyName_HashAlgorithm_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Configuration.Assemblies.AssemblyHashAlgorithm __returnValue = __selfConverted.HashAlgorithm;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Configuration.Assemblies.AssemblyHashAlgorithm);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_HashAlgorithm_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_HashAlgorithm_Set(void* /* System.Reflection.AssemblyName */ __self, System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.HashAlgorithm = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_VersionCompatibility_Get")]
	internal static System.Configuration.Assemblies.AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ System_Reflection_AssemblyName_VersionCompatibility_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Configuration.Assemblies.AssemblyVersionCompatibility __returnValue = __selfConverted.VersionCompatibility;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Configuration.Assemblies.AssemblyVersionCompatibility);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_VersionCompatibility_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_VersionCompatibility_Set(void* /* System.Reflection.AssemblyName */ __self, System.Configuration.Assemblies.AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.VersionCompatibility = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_KeyPair_Get")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_AssemblyName_KeyPair_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = __selfConverted.KeyPair;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_KeyPair_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_KeyPair_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Reflection.StrongNameKeyPair */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.KeyPair = InteropUtils.GetInstance<System.Reflection.StrongNameKeyPair>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_FullName_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_FullName_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Destroy")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Destroy(void* /* System.Reflection.AssemblyName */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Version
{
	[UnmanagedCallersOnly(EntryPoint = "System_Version_Clone")]
	internal static void* /* System.Object */ System_Version_Clone(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_CompareTo")]
	internal static int /* System.Int32 */ System_Version_CompareTo(void* /* System.Version */ __self, void* /* System.Object */ version, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Object versionConverted = InteropUtils.GetInstance<System.Object>(version);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(versionConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_CompareTo1")]
	internal static int /* System.Int32 */ System_Version_CompareTo1(void* /* System.Version */ __self, void* /* System.Version */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Version valueConverted = InteropUtils.GetInstance<System.Version>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Equals")]
	internal static CBool /* System.Boolean */ System_Version_Equals(void* /* System.Version */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Equals1")]
	internal static CBool /* System.Boolean */ System_Version_Equals1(void* /* System.Version */ __self, void* /* System.Version */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Version objConverted = InteropUtils.GetInstance<System.Version>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_GetHashCode")]
	internal static int /* System.Int32 */ System_Version_GetHashCode(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_ToString")]
	internal static byte* /* System.String */ System_Version_ToString(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_ToString1")]
	internal static byte* /* System.String */ System_Version_ToString1(void* /* System.Version */ __self, int /* System.Int32 */ fieldCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString(fieldCount);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Parse")]
	internal static void* /* System.Version */ System_Version_Parse(byte* /* System.String */ input, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Version __returnValue = System.Version.Parse(inputConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create")]
	internal static void* /* System.Version */ System_Version_Create(int /* System.Int32 */ major, int /* System.Int32 */ minor, int /* System.Int32 */ build, int /* System.Int32 */ revision, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor, build, revision);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create1")]
	internal static void* /* System.Version */ System_Version_Create1(int /* System.Int32 */ major, int /* System.Int32 */ minor, int /* System.Int32 */ build, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor, build);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create2")]
	internal static void* /* System.Version */ System_Version_Create2(int /* System.Int32 */ major, int /* System.Int32 */ minor, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create3")]
	internal static void* /* System.Version */ System_Version_Create3(byte* /* System.String */ version, void** /* System.Exception */ __outException)
	{
		System.String versionConverted = InteropUtils.ToDotNetString(version);
	
	    try {
			System.Version __returnValue = new System.Version(versionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create4")]
	internal static void* /* System.Version */ System_Version_Create4(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Major_Get")]
	internal static int /* System.Int32 */ System_Version_Major_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Major;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Minor_Get")]
	internal static int /* System.Int32 */ System_Version_Minor_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minor;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Build_Get")]
	internal static int /* System.Int32 */ System_Version_Build_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Build;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Revision_Get")]
	internal static int /* System.Int32 */ System_Version_Revision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Revision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_MajorRevision_Get")]
	internal static short /* System.Int16 */ System_Version_MajorRevision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int16 __returnValue = __selfConverted.MajorRevision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_MinorRevision_Get")]
	internal static short /* System.Int16 */ System_Version_MinorRevision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int16 __returnValue = __selfConverted.MinorRevision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Destroy")]
	internal static void /* System.Void */ System_Version_Destroy(void* /* System.Version */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_IFormatProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_IFormatProvider_GetFormat")]
	internal static void* /* System.Object */ System_IFormatProvider_GetFormat(void* /* System.IFormatProvider */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IFormatProvider __selfConverted = InteropUtils.GetInstance<System.IFormatProvider>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IFormatProvider_Destroy")]
	internal static void /* System.Void */ System_IFormatProvider_Destroy(void* /* System.IFormatProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}









internal unsafe class System_Reflection_StrongNameKeyPair
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Create")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_StrongNameKeyPair_Create(void* /* System.IO.FileStream */ keyPairFile, void** /* System.Exception */ __outException)
	{
		System.IO.FileStream keyPairFileConverted = InteropUtils.GetInstance<System.IO.FileStream>(keyPairFile);
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = new System.Reflection.StrongNameKeyPair(keyPairFileConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Create1")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_StrongNameKeyPair_Create1(byte* /* System.String */ keyPairContainer, void** /* System.Exception */ __outException)
	{
		System.String keyPairContainerConverted = InteropUtils.ToDotNetString(keyPairContainer);
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = new System.Reflection.StrongNameKeyPair(keyPairContainerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Destroy")]
	internal static void /* System.Void */ System_Reflection_StrongNameKeyPair_Destroy(void* /* System.Reflection.StrongNameKeyPair */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_FileStream
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Lock")]
	internal static void /* System.Void */ System_IO_FileStream_Lock(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ position, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Lock(position, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Unlock")]
	internal static void /* System.Void */ System_IO_FileStream_Unlock(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ position, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Unlock(position, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_FileStream_FlushAsync(void* /* System.IO.FileStream */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Flush1")]
	internal static void /* System.Void */ System_IO_FileStream_Flush1(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Flush2")]
	internal static void /* System.Void */ System_IO_FileStream_Flush2(void* /* System.IO.FileStream */ __self, CBool /* System.Boolean */ flushToDisk, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Boolean flushToDiskConverted = flushToDisk.ToBool();
	
	    try {
			__selfConverted.Flush(flushToDiskConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_SetLength")]
	internal static void /* System.Void */ System_IO_FileStream_SetLength(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.SetLength(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_ReadByte")]
	internal static int /* System.Int32 */ System_IO_FileStream_ReadByte(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadByte();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_WriteByte")]
	internal static void /* System.Void */ System_IO_FileStream_WriteByte(void* /* System.IO.FileStream */ __self, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.WriteByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_FileStream_DisposeAsync(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CopyTo")]
	internal static void /* System.Void */ System_IO_FileStream_CopyTo(void* /* System.IO.FileStream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted, bufferSize);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CopyToAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_FileStream_CopyToAsync(void* /* System.IO.FileStream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_EndRead")]
	internal static int /* System.Int32 */ System_IO_FileStream_EndRead(void* /* System.IO.FileStream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			System.Int32 __returnValue = __selfConverted.EndRead(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_EndWrite")]
	internal static void /* System.Void */ System_IO_FileStream_EndWrite(void* /* System.IO.FileStream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			__selfConverted.EndWrite(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Seek")]
	internal static long /* System.Int64 */ System_IO_FileStream_Seek(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ offset, System.IO.SeekOrigin /* System.IO.SeekOrigin */ origin, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Seek(offset, origin);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create1")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create1(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, CBool /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create2")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create2(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, CBool /* System.Boolean */ ownsHandle, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted, bufferSize);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create3")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create3(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, CBool /* System.Boolean */ ownsHandle, int /* System.Int32 */ bufferSize, CBool /* System.Boolean */ isAsync, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
		System.Boolean isAsyncConverted = isAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted, bufferSize, isAsyncConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create4")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create4(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create5")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create5(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access, bufferSize);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create6")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create6(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, int /* System.Int32 */ bufferSize, CBool /* System.Boolean */ isAsync, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
		System.Boolean isAsyncConverted = isAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access, bufferSize, isAsyncConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create7")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create7(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create8")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create8(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create9")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create9(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create10")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create10(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create11")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create11(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, CBool /* System.Boolean */ useAsync, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean useAsyncConverted = useAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize, useAsyncConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create12")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create12(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, System.IO.FileOptions /* System.IO.FileOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize, options);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create13")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create13(byte* /* System.String */ path, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, optionsConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Handle_Get")]
	internal static nint /* System.IntPtr */ System_IO_FileStream_Handle_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Handle;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanRead_Get")]
	internal static CBool /* System.Boolean */ System_IO_FileStream_CanRead_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanWrite_Get")]
	internal static CBool /* System.Boolean */ System_IO_FileStream_CanWrite_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_SafeFileHandle_Get")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ System_IO_FileStream_SafeFileHandle_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = __selfConverted.SafeFileHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Name_Get")]
	internal static byte* /* System.String */ System_IO_FileStream_Name_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_IsAsync_Get")]
	internal static CBool /* System.Boolean */ System_IO_FileStream_IsAsync_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAsync;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Length_Get")]
	internal static long /* System.Int64 */ System_IO_FileStream_Length_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Position_Get")]
	internal static long /* System.Int64 */ System_IO_FileStream_Position_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Position_Set")]
	internal static void /* System.Void */ System_IO_FileStream_Position_Set(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Position = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanSeek_Get")]
	internal static CBool /* System.Boolean */ System_IO_FileStream_CanSeek_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanSeek;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Destroy")]
	internal static void /* System.Void */ System_IO_FileStream_Destroy(void* /* System.IO.FileStream */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_Stream
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyTo")]
	internal static void /* System.Void */ System_IO_Stream_CopyTo(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyTo1")]
	internal static void /* System.Void */ System_IO_Stream_CopyTo1(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted, bufferSize);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync1(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync2(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync3")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync3(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Dispose")]
	internal static void /* System.Void */ System_IO_Stream_Dispose(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Close")]
	internal static void /* System.Void */ System_IO_Stream_Close(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_Stream_DisposeAsync(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Flush")]
	internal static void /* System.Void */ System_IO_Stream_Flush(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_FlushAsync(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_FlushAsync1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_FlushAsync1(void* /* System.IO.Stream */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_EndRead")]
	internal static int /* System.Int32 */ System_IO_Stream_EndRead(void* /* System.IO.Stream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			System.Int32 __returnValue = __selfConverted.EndRead(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_EndWrite")]
	internal static void /* System.Void */ System_IO_Stream_EndWrite(void* /* System.IO.Stream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			__selfConverted.EndWrite(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Seek")]
	internal static long /* System.Int64 */ System_IO_Stream_Seek(void* /* System.IO.Stream */ __self, long /* System.Int64 */ offset, System.IO.SeekOrigin /* System.IO.SeekOrigin */ origin, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Seek(offset, origin);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_SetLength")]
	internal static void /* System.Void */ System_IO_Stream_SetLength(void* /* System.IO.Stream */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.SetLength(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadByte")]
	internal static int /* System.Int32 */ System_IO_Stream_ReadByte(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadByte();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteByte")]
	internal static void /* System.Void */ System_IO_Stream_WriteByte(void* /* System.IO.Stream */ __self, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.WriteByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Synchronized")]
	internal static void* /* System.IO.Stream */ System_IO_Stream_Synchronized(void* /* System.IO.Stream */ stream, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
	
	    try {
			System.IO.Stream __returnValue = System.IO.Stream.Synchronized(streamConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanRead_Get")]
	internal static CBool /* System.Boolean */ System_IO_Stream_CanRead_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanWrite_Get")]
	internal static CBool /* System.Boolean */ System_IO_Stream_CanWrite_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanSeek_Get")]
	internal static CBool /* System.Boolean */ System_IO_Stream_CanSeek_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanSeek;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanTimeout_Get")]
	internal static CBool /* System.Boolean */ System_IO_Stream_CanTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanTimeout;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Length_Get")]
	internal static long /* System.Int64 */ System_IO_Stream_Length_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Position_Get")]
	internal static long /* System.Int64 */ System_IO_Stream_Position_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Position_Set")]
	internal static void /* System.Void */ System_IO_Stream_Position_Set(void* /* System.IO.Stream */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Position = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadTimeout_Get")]
	internal static int /* System.Int32 */ System_IO_Stream_ReadTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadTimeout;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadTimeout_Set")]
	internal static void /* System.Void */ System_IO_Stream_ReadTimeout_Set(void* /* System.IO.Stream */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.ReadTimeout = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteTimeout_Get")]
	internal static int /* System.Int32 */ System_IO_Stream_WriteTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.WriteTimeout;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteTimeout_Set")]
	internal static void /* System.Void */ System_IO_Stream_WriteTimeout_Set(void* /* System.IO.Stream */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.WriteTimeout = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Null_Get")]
	internal static void* /* System.IO.Stream */ System_IO_Stream_Null_Get()
	{
	
		System.IO.Stream __returnValue = System.IO.Stream.Null;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Destroy")]
	internal static void /* System.Void */ System_IO_Stream_Destroy(void* /* System.IO.Stream */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_MarshalByRefObject
{
	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_GetLifetimeService")]
	internal static void* /* System.Object */ System_MarshalByRefObject_GetLifetimeService(void* /* System.MarshalByRefObject */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.MarshalByRefObject __selfConverted = InteropUtils.GetInstance<System.MarshalByRefObject>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetLifetimeService();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_InitializeLifetimeService")]
	internal static void* /* System.Object */ System_MarshalByRefObject_InitializeLifetimeService(void* /* System.MarshalByRefObject */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.MarshalByRefObject __selfConverted = InteropUtils.GetInstance<System.MarshalByRefObject>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.InitializeLifetimeService();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_Destroy")]
	internal static void /* System.Void */ System_MarshalByRefObject_Destroy(void* /* System.MarshalByRefObject */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Threading_Tasks_Task
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Start")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Start(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Start();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Start1")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Start1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			__selfConverted.Start(schedulerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_RunSynchronously")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_RunSynchronously(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.RunSynchronously();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_RunSynchronously1")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_RunSynchronously1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			__selfConverted.RunSynchronously(schedulerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Dispose")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Dispose(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.TaskAwaiter */ System_Threading_Tasks_Task_GetAwaiter(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.TaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_ConfigureAwait")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ System_Threading_Tasks_Task_ConfigureAwait(void* /* System.Threading.Tasks.Task */ __self, CBool /* System.Boolean */ continueOnCapturedContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Boolean continueOnCapturedContextConverted = continueOnCapturedContext.ToBool();
	
	    try {
			System.Runtime.CompilerServices.ConfiguredTaskAwaitable __returnValue = __selfConverted.ConfigureAwait(continueOnCapturedContextConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Yield")]
	internal static void* /* System.Runtime.CompilerServices.YieldAwaitable */ System_Threading_Tasks_Task_Yield(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.CompilerServices.YieldAwaitable __returnValue = System.Threading.Tasks.Task.Yield();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Wait(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Wait();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait1")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_Wait1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(timeoutConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait2")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_Wait2(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(timeoutConverted, cancellationTokenConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait3")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Wait3(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			__selfConverted.Wait(cancellationTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait4")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_Wait4(void* /* System.Threading.Tasks.Task */ __self, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(millisecondsTimeout);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait5")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_Wait5(void* /* System.Threading.Tasks.Task */ __self, int /* System.Int32 */ millisecondsTimeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(millisecondsTimeout, cancellationTokenConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(timeoutConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync2(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(timeoutConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_FromException")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_FromException(void* /* System.Exception */ exception, void** /* System.Exception */ __outException)
	{
		System.Exception exceptionConverted = InteropUtils.GetInstance<System.Exception>(exception);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.FromException(exceptionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_FromCanceled")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_FromCanceled(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.FromCanceled(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Run1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Run1(void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Run(actionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Run2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Run2(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Run(actionConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay(void* /* System.TimeSpan */ delay, void** /* System.Exception */ __outException)
	{
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(delayConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay1(void* /* System.TimeSpan */ delay, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(delayConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay2(int /* System.Int32 */ millisecondsDelay, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(millisecondsDelay);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay3(int /* System.Int32 */ millisecondsDelay, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(millisecondsDelay, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create(void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create1(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create2(void* /* System.Action */ action, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, creationOptions);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create3(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, cancellationTokenConverted, creationOptions);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Id_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_Id_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Id;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Exception_Get")]
	internal static void* /* System.AggregateException */ System_Threading_Tasks_Task_Exception_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.AggregateException __returnValue = __selfConverted.Exception;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Status_Get")]
	internal static System.Threading.Tasks.TaskStatus /* System.Threading.Tasks.TaskStatus */ System_Threading_Tasks_Task_Status_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskStatus __returnValue = __selfConverted.Status;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskStatus);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCanceled_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_IsCanceled_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCanceled;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_IsCompleted_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCompletedSuccessfully_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_IsCompletedSuccessfully_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompletedSuccessfully;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_CreationOptions_Get")]
	internal static System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ System_Threading_Tasks_Task_CreationOptions_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskCreationOptions __returnValue = __selfConverted.CreationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskCreationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_AsyncState_Get")]
	internal static void* /* System.Object */ System_Threading_Tasks_Task_AsyncState_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.AsyncState;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Factory_Get")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_Task_Factory_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = System.Threading.Tasks.Task.Factory;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_CompletedTask_Get")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_CompletedTask_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.CompletedTask;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsFaulted_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_Task_IsFaulted_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFaulted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Destroy(void* /* System.Threading.Tasks.Task */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_TaskScheduler
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get(void* /* System.Threading.Tasks.TaskScheduler */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskScheduler __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaximumConcurrencyLevel;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Default_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_Default_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.Default;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Current_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_Current_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.Current;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Id_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_TaskScheduler_Id_Get(void* /* System.Threading.Tasks.TaskScheduler */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskScheduler __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Id;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_TaskScheduler_Destroy(void* /* System.Threading.Tasks.TaskScheduler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AggregateException
{
	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_GetObjectData")]
	internal static void /* System.Void */ System_AggregateException_GetObjectData(void* /* System.AggregateException */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_GetBaseException")]
	internal static void* /* System.Exception */ System_AggregateException_GetBaseException(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.GetBaseException();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Flatten")]
	internal static void* /* System.AggregateException */ System_AggregateException_Flatten(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.AggregateException __returnValue = __selfConverted.Flatten();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_ToString")]
	internal static byte* /* System.String */ System_AggregateException_ToString(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create1")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create1(byte* /* System.String */ message, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(messageConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create2")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create2(byte* /* System.String */ message, void* /* System.Exception */ innerException, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
		System.Exception innerExceptionConverted = InteropUtils.GetInstance<System.Exception>(innerException);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(messageConverted, innerExceptionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Message_Get")]
	internal static byte* /* System.String */ System_AggregateException_Message_Get(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Message;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Destroy")]
	internal static void /* System.Void */ System_AggregateException_Destroy(void* /* System.AggregateException */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Exception
{
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetBaseException")]
	internal static void* /* System.Exception */ System_Exception_GetBaseException(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.GetBaseException();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetObjectData")]
	internal static void /* System.Void */ System_Exception_GetObjectData(void* /* System.Exception */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_ToString")]
	internal static byte* /* System.String */ System_Exception_ToString(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetType")]
	internal static void* /* System.Type */ System_Exception_GetType(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create")]
	internal static void* /* System.Exception */ System_Exception_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Exception __returnValue = new System.Exception();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create1")]
	internal static void* /* System.Exception */ System_Exception_Create1(byte* /* System.String */ message, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
	
	    try {
			System.Exception __returnValue = new System.Exception(messageConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create2")]
	internal static void* /* System.Exception */ System_Exception_Create2(byte* /* System.String */ message, void* /* System.Exception */ innerException, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
		System.Exception innerExceptionConverted = InteropUtils.GetInstance<System.Exception>(innerException);
	
	    try {
			System.Exception __returnValue = new System.Exception(messageConverted, innerExceptionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_TargetSite_Get")]
	internal static void* /* System.Reflection.MethodBase */ System_Exception_TargetSite_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.TargetSite;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Message_Get")]
	internal static byte* /* System.String */ System_Exception_Message_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Message;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Data_Get")]
	internal static void* /* System.Collections.IDictionary */ System_Exception_Data_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Collections.IDictionary __returnValue = __selfConverted.Data;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_InnerException_Get")]
	internal static void* /* System.Exception */ System_Exception_InnerException_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.InnerException;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HelpLink_Get")]
	internal static byte* /* System.String */ System_Exception_HelpLink_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.HelpLink;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HelpLink_Set")]
	internal static void /* System.Void */ System_Exception_HelpLink_Set(void* /* System.Exception */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.HelpLink = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Source_Get")]
	internal static byte* /* System.String */ System_Exception_Source_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Source;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Source_Set")]
	internal static void /* System.Void */ System_Exception_Source_Set(void* /* System.Exception */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.Source = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HResult_Get")]
	internal static int /* System.Int32 */ System_Exception_HResult_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.HResult;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HResult_Set")]
	internal static void /* System.Void */ System_Exception_HResult_Set(void* /* System.Exception */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.HResult = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_StackTrace_Get")]
	internal static byte* /* System.String */ System_Exception_StackTrace_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.StackTrace;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Destroy")]
	internal static void /* System.Void */ System_Exception_Destroy(void* /* System.Exception */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MethodBase
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodFromHandle")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetMethodFromHandle(void* /* System.RuntimeMethodHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetMethodFromHandle(handleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodFromHandle1")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetMethodFromHandle1(void* /* System.RuntimeMethodHandle */ handle, void* /* System.RuntimeTypeHandle */ declaringType, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
		System.RuntimeTypeHandle declaringTypeConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(declaringType);
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetMethodFromHandle(handleConverted, declaringTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetCurrentMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetCurrentMethod(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetCurrentMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodImplementationFlags")]
	internal static System.Reflection.MethodImplAttributes /* System.Reflection.MethodImplAttributes */ System_Reflection_MethodBase_GetMethodImplementationFlags(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodImplAttributes __returnValue = __selfConverted.GetMethodImplementationFlags();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodImplAttributes);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodBody")]
	internal static void* /* System.Reflection.MethodBody */ System_Reflection_MethodBase_GetMethodBody(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodBody __returnValue = __selfConverted.GetMethodBody();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_Equals(void* /* System.Reflection.MethodBase */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MethodBase_GetHashCode(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Attributes_Get")]
	internal static System.Reflection.MethodAttributes /* System.Reflection.MethodAttributes */ System_Reflection_MethodBase_Attributes_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_MethodImplementationFlags_Get")]
	internal static System.Reflection.MethodImplAttributes /* System.Reflection.MethodImplAttributes */ System_Reflection_MethodBase_MethodImplementationFlags_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodImplAttributes __returnValue = __selfConverted.MethodImplementationFlags;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodImplAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_CallingConvention_Get")]
	internal static System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ System_Reflection_MethodBase_CallingConvention_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.CallingConventions __returnValue = __selfConverted.CallingConvention;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.CallingConventions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsAbstract_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsAbstract_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAbstract;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsConstructor_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsConstructor_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructor;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFinal_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsFinal_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFinal;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsHideBySig_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsHideBySig_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsHideBySig;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSpecialName_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsSpecialName_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsStatic_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsStatic_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsStatic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsVirtual_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsVirtual_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVirtual;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamily_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsFamily_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamily;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamilyAndAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsFamilyAndAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyAndAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamilyOrAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsFamilyOrAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyOrAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsPrivate_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsPrivate_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrivate;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsPublic_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsPublic_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsConstructedGenericMethod_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsConstructedGenericMethod_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructedGenericMethod;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsGenericMethod_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsGenericMethod_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethod;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsGenericMethodDefinition_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsGenericMethodDefinition_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethodDefinition;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_ContainsGenericParameters_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_ContainsGenericParameters_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsGenericParameters;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_MethodHandle_Get")]
	internal static void* /* System.RuntimeMethodHandle */ System_Reflection_MethodBase_MethodHandle_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.MethodHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecurityCritical_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsSecurityCritical_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecuritySafeCritical_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsSecuritySafeCritical_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecurityTransparent_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBase_IsSecurityTransparent_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodBase_Destroy(void* /* System.Reflection.MethodBase */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_RuntimeMethodHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeMethodHandle_GetObjectData(void* /* System.RuntimeMethodHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeMethodHandle_GetHashCode(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Equals")]
	internal static CBool /* System.Boolean */ System_RuntimeMethodHandle_Equals(void* /* System.RuntimeMethodHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_FromIntPtr")]
	internal static void* /* System.RuntimeMethodHandle */ System_RuntimeMethodHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeMethodHandle __returnValue = System.RuntimeMethodHandle.FromIntPtr(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_ToIntPtr(void* /* System.RuntimeMethodHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle valueConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeMethodHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Equals1")]
	internal static CBool /* System.Boolean */ System_RuntimeMethodHandle_Equals1(void* /* System.RuntimeMethodHandle */ __self, void* /* System.RuntimeMethodHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetFunctionPointer")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_GetFunctionPointer(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.GetFunctionPointer();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_Value_Get(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeMethodHandle_Destroy(void* /* System.RuntimeMethodHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_SetType")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_SetType(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			__selfConverted.SetType(typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetEnumerator")]
	internal static void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ System_Runtime_Serialization_SerializationInfo_GetEnumerator(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Runtime.Serialization.SerializationInfoEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Object */ value, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted, typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue1")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue1(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue2")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue2(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, CBool /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue3")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue3(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue4")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue4(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue5")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue5(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue6")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue6(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue7")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue7(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue8")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue8(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue9")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue9(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue10")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue10(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue11")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue11(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue12")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue12(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue13")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue13(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue14")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue14(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue15")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue15(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetValue")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationInfo_GetValue(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(nameConverted, typeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetBoolean")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_GetBoolean(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Boolean __returnValue = __selfConverted.GetBoolean(nameConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetChar")]
	internal static char /* System.Char */ System_Runtime_Serialization_SerializationInfo_GetChar(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Char __returnValue = __selfConverted.GetChar(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetSByte")]
	internal static sbyte /* System.SByte */ System_Runtime_Serialization_SerializationInfo_GetSByte(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.SByte __returnValue = __selfConverted.GetSByte(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetByte")]
	internal static byte /* System.Byte */ System_Runtime_Serialization_SerializationInfo_GetByte(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Byte __returnValue = __selfConverted.GetByte(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt16")]
	internal static short /* System.Int16 */ System_Runtime_Serialization_SerializationInfo_GetInt16(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int16 __returnValue = __selfConverted.GetInt16(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt16")]
	internal static ushort /* System.UInt16 */ System_Runtime_Serialization_SerializationInfo_GetUInt16(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt16 __returnValue = __selfConverted.GetUInt16(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt32")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_SerializationInfo_GetInt32(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetInt32(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt32")]
	internal static uint /* System.UInt32 */ System_Runtime_Serialization_SerializationInfo_GetUInt32(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt32 __returnValue = __selfConverted.GetUInt32(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt64")]
	internal static long /* System.Int64 */ System_Runtime_Serialization_SerializationInfo_GetInt64(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int64 __returnValue = __selfConverted.GetInt64(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt64")]
	internal static ulong /* System.UInt64 */ System_Runtime_Serialization_SerializationInfo_GetUInt64(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt64 __returnValue = __selfConverted.GetUInt64(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetSingle")]
	internal static float /* System.Single */ System_Runtime_Serialization_SerializationInfo_GetSingle(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Single __returnValue = __selfConverted.GetSingle(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDouble")]
	internal static double /* System.Double */ System_Runtime_Serialization_SerializationInfo_GetDouble(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Double __returnValue = __selfConverted.GetDouble(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDecimal")]
	internal static void* /* System.Decimal */ System_Runtime_Serialization_SerializationInfo_GetDecimal(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Decimal __returnValue = __selfConverted.GetDecimal(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDateTime")]
	internal static void* /* System.DateTime */ System_Runtime_Serialization_SerializationInfo_GetDateTime(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.DateTime __returnValue = __selfConverted.GetDateTime(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetString")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_GetString(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.String __returnValue = __selfConverted.GetString(nameConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Create")]
	internal static void* /* System.Runtime.Serialization.SerializationInfo */ System_Runtime_Serialization_SerializationInfo_Create(void* /* System.Type */ type, void* /* System.Runtime.Serialization.IFormatterConverter */ converter, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Runtime.Serialization.IFormatterConverter converterConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(converter);
	
	    try {
			System.Runtime.Serialization.SerializationInfo __returnValue = new System.Runtime.Serialization.SerializationInfo(typeConverted, converterConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Create1")]
	internal static void* /* System.Runtime.Serialization.SerializationInfo */ System_Runtime_Serialization_SerializationInfo_Create1(void* /* System.Type */ type, void* /* System.Runtime.Serialization.IFormatterConverter */ converter, CBool /* System.Boolean */ requireSameTokenInPartialTrust, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Runtime.Serialization.IFormatterConverter converterConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(converter);
		System.Boolean requireSameTokenInPartialTrustConverted = requireSameTokenInPartialTrust.ToBool();
	
	    try {
			System.Runtime.Serialization.SerializationInfo __returnValue = new System.Runtime.Serialization.SerializationInfo(typeConverted, converterConverted, requireSameTokenInPartialTrustConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_FullTypeName_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_FullTypeName_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullTypeName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_FullTypeName_Set")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_FullTypeName_Set(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			__selfConverted.FullTypeName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AssemblyName_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_AssemblyName_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AssemblyName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AssemblyName_Set")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AssemblyName_Set(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			__selfConverted.AssemblyName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFullTypeNameSetExplicit;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssemblyNameSetExplicit;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_MemberCount_Get")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_SerializationInfo_MemberCount_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MemberCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfo_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_Destroy(void* /* System.Runtime.Serialization.SerializationInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationInfoEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Reset")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfoEnumerator_Reset(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get")]
	internal static void* /* System.Runtime.Serialization.SerializationEntry */ System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Runtime.Serialization.SerializationEntry __returnValue = __selfConverted.Current;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfoEnumerator_Destroy(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationEntry
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Value_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationEntry_Value_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Name_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationEntry_Name_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationEntry_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationEntry_Destroy(void* /* System.Runtime.Serialization.SerializationEntry */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}












internal unsafe class System_Decimal
{
	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_FromOACurrency")]
	internal static void* /* System.Decimal */ System_Decimal_FromOACurrency(long /* System.Int64 */ cy, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Decimal.FromOACurrency(cy);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToOACurrency")]
	internal static long /* System.Int64 */ System_Decimal_ToOACurrency(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int64 __returnValue = System.Decimal.ToOACurrency(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Add")]
	internal static void* /* System.Decimal */ System_Decimal_Add(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Add(d1Converted, d2Converted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Ceiling")]
	internal static void* /* System.Decimal */ System_Decimal_Ceiling(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Ceiling(dConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Compare")]
	internal static int /* System.Int32 */ System_Decimal_Compare(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Int32 __returnValue = System.Decimal.Compare(d1Converted, d2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CompareTo")]
	internal static int /* System.Int32 */ System_Decimal_CompareTo(void* /* System.Decimal */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CompareTo1")]
	internal static int /* System.Int32 */ System_Decimal_CompareTo1(void* /* System.Decimal */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Divide")]
	internal static void* /* System.Decimal */ System_Decimal_Divide(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Divide(d1Converted, d2Converted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals")]
	internal static CBool /* System.Boolean */ System_Decimal_Equals(void* /* System.Decimal */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals1")]
	internal static CBool /* System.Boolean */ System_Decimal_Equals1(void* /* System.Decimal */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_GetHashCode")]
	internal static int /* System.Int32 */ System_Decimal_GetHashCode(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals2")]
	internal static CBool /* System.Boolean */ System_Decimal_Equals2(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Boolean __returnValue = System.Decimal.Equals(d1Converted, d2Converted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Floor")]
	internal static void* /* System.Decimal */ System_Decimal_Floor(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Floor(dConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString")]
	internal static byte* /* System.String */ System_Decimal_ToString(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString1")]
	internal static byte* /* System.String */ System_Decimal_ToString1(void* /* System.Decimal */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString2")]
	internal static byte* /* System.String */ System_Decimal_ToString2(void* /* System.Decimal */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString3")]
	internal static byte* /* System.String */ System_Decimal_ToString3(void* /* System.Decimal */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse")]
	internal static void* /* System.Decimal */ System_Decimal_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse1")]
	internal static void* /* System.Decimal */ System_Decimal_Parse1(byte* /* System.String */ s, System.Globalization.NumberStyles /* System.Globalization.NumberStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse2")]
	internal static void* /* System.Decimal */ System_Decimal_Parse2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse3")]
	internal static void* /* System.Decimal */ System_Decimal_Parse3(byte* /* System.String */ s, System.Globalization.NumberStyles /* System.Globalization.NumberStyles */ style, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, style, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Remainder")]
	internal static void* /* System.Decimal */ System_Decimal_Remainder(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Remainder(d1Converted, d2Converted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Multiply")]
	internal static void* /* System.Decimal */ System_Decimal_Multiply(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Multiply(d1Converted, d2Converted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Negate")]
	internal static void* /* System.Decimal */ System_Decimal_Negate(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Negate(dConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round")]
	internal static void* /* System.Decimal */ System_Decimal_Round(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round1")]
	internal static void* /* System.Decimal */ System_Decimal_Round1(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, decimals);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round2")]
	internal static void* /* System.Decimal */ System_Decimal_Round2(void* /* System.Decimal */ d, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, mode);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round3")]
	internal static void* /* System.Decimal */ System_Decimal_Round3(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, decimals, mode);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Subtract")]
	internal static void* /* System.Decimal */ System_Decimal_Subtract(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Subtract(d1Converted, d2Converted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToByte")]
	internal static byte /* System.Byte */ System_Decimal_ToByte(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Byte __returnValue = System.Decimal.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToSByte")]
	internal static sbyte /* System.SByte */ System_Decimal_ToSByte(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.SByte __returnValue = System.Decimal.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt16")]
	internal static short /* System.Int16 */ System_Decimal_ToInt16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int16 __returnValue = System.Decimal.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToDouble")]
	internal static double /* System.Double */ System_Decimal_ToDouble(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Double __returnValue = System.Decimal.ToDouble(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt32")]
	internal static int /* System.Int32 */ System_Decimal_ToInt32(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int32 __returnValue = System.Decimal.ToInt32(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt64")]
	internal static long /* System.Int64 */ System_Decimal_ToInt64(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int64 __returnValue = System.Decimal.ToInt64(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt16")]
	internal static ushort /* System.UInt16 */ System_Decimal_ToUInt16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.UInt16 __returnValue = System.Decimal.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt32")]
	internal static uint /* System.UInt32 */ System_Decimal_ToUInt32(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.UInt32 __returnValue = System.Decimal.ToUInt32(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt64")]
	internal static ulong /* System.UInt64 */ System_Decimal_ToUInt64(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.UInt64 __returnValue = System.Decimal.ToUInt64(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToSingle")]
	internal static float /* System.Single */ System_Decimal_ToSingle(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Single __returnValue = System.Decimal.ToSingle(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Truncate")]
	internal static void* /* System.Decimal */ System_Decimal_Truncate(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Truncate(dConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Decimal_GetTypeCode(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Clamp")]
	internal static void* /* System.Decimal */ System_Decimal_Clamp(void* /* System.Decimal */ value, void* /* System.Decimal */ min, void* /* System.Decimal */ max, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.Decimal minConverted = InteropUtils.GetInstance<System.Decimal>(min);
		System.Decimal maxConverted = InteropUtils.GetInstance<System.Decimal>(max);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Clamp(valueConverted, minConverted, maxConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CopySign")]
	internal static void* /* System.Decimal */ System_Decimal_CopySign(void* /* System.Decimal */ value, void* /* System.Decimal */ sign, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.Decimal signConverted = InteropUtils.GetInstance<System.Decimal>(sign);
	
	    try {
			System.Decimal __returnValue = System.Decimal.CopySign(valueConverted, signConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Max")]
	internal static void* /* System.Decimal */ System_Decimal_Max(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Max(xConverted, yConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Min")]
	internal static void* /* System.Decimal */ System_Decimal_Min(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Min(xConverted, yConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Sign")]
	internal static int /* System.Int32 */ System_Decimal_Sign(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int32 __returnValue = System.Decimal.Sign(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Abs")]
	internal static void* /* System.Decimal */ System_Decimal_Abs(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Abs(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsCanonical")]
	internal static CBool /* System.Boolean */ System_Decimal_IsCanonical(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsCanonical(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsEvenInteger")]
	internal static CBool /* System.Boolean */ System_Decimal_IsEvenInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsEvenInteger(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsInteger")]
	internal static CBool /* System.Boolean */ System_Decimal_IsInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsInteger(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsNegative")]
	internal static CBool /* System.Boolean */ System_Decimal_IsNegative(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsNegative(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsOddInteger")]
	internal static CBool /* System.Boolean */ System_Decimal_IsOddInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsOddInteger(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsPositive")]
	internal static CBool /* System.Boolean */ System_Decimal_IsPositive(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsPositive(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MaxMagnitude")]
	internal static void* /* System.Decimal */ System_Decimal_MaxMagnitude(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.MaxMagnitude(xConverted, yConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinMagnitude")]
	internal static void* /* System.Decimal */ System_Decimal_MinMagnitude(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.MinMagnitude(xConverted, yConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create")]
	internal static void* /* System.Decimal */ System_Decimal_Create(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create1")]
	internal static void* /* System.Decimal */ System_Decimal_Create1(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create2")]
	internal static void* /* System.Decimal */ System_Decimal_Create2(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create3")]
	internal static void* /* System.Decimal */ System_Decimal_Create3(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create4")]
	internal static void* /* System.Decimal */ System_Decimal_Create4(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create5")]
	internal static void* /* System.Decimal */ System_Decimal_Create5(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create6")]
	internal static void* /* System.Decimal */ System_Decimal_Create6(int /* System.Int32 */ lo, int /* System.Int32 */ mid, int /* System.Int32 */ hi, CBool /* System.Boolean */ isNegative, byte /* System.Byte */ scale, void** /* System.Exception */ __outException)
	{
		System.Boolean isNegativeConverted = isNegative.ToBool();
	
	    try {
			System.Decimal __returnValue = new System.Decimal(lo, mid, hi, isNegativeConverted, scale);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Scale_Get")]
	internal static byte /* System.Byte */ System_Decimal_Scale_Get(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.Byte __returnValue = __selfConverted.Scale;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Zero_Get")]
	internal static void* /* System.Decimal */ System_Decimal_Zero_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.Zero;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_One_Get")]
	internal static void* /* System.Decimal */ System_Decimal_One_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.One;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinusOne_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MinusOne_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MinusOne;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MaxValue_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MaxValue_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MaxValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinValue_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MinValue_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MinValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Destroy")]
	internal static void /* System.Void */ System_Decimal_Destroy(void* /* System.Decimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_DateTime
{
	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Add")]
	internal static void* /* System.DateTime */ System_DateTime_Add(void* /* System.DateTime */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.Add(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddDays")]
	internal static void* /* System.DateTime */ System_DateTime_AddDays(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddDays(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddHours")]
	internal static void* /* System.DateTime */ System_DateTime_AddHours(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddHours(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMilliseconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddMilliseconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMilliseconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMicroseconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddMicroseconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMicroseconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMinutes")]
	internal static void* /* System.DateTime */ System_DateTime_AddMinutes(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMinutes(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMonths")]
	internal static void* /* System.DateTime */ System_DateTime_AddMonths(void* /* System.DateTime */ __self, int /* System.Int32 */ months, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMonths(months);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddSeconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddSeconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddSeconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddTicks")]
	internal static void* /* System.DateTime */ System_DateTime_AddTicks(void* /* System.DateTime */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddTicks(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddYears")]
	internal static void* /* System.DateTime */ System_DateTime_AddYears(void* /* System.DateTime */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddYears(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Compare")]
	internal static int /* System.Int32 */ System_DateTime_Compare(void* /* System.DateTime */ t1, void* /* System.DateTime */ t2, void** /* System.Exception */ __outException)
	{
		System.DateTime t1Converted = InteropUtils.GetInstance<System.DateTime>(t1);
		System.DateTime t2Converted = InteropUtils.GetInstance<System.DateTime>(t2);
	
	    try {
			System.Int32 __returnValue = System.DateTime.Compare(t1Converted, t2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_CompareTo")]
	internal static int /* System.Int32 */ System_DateTime_CompareTo(void* /* System.DateTime */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_CompareTo1")]
	internal static int /* System.Int32 */ System_DateTime_CompareTo1(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DaysInMonth")]
	internal static int /* System.Int32 */ System_DateTime_DaysInMonth(int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.DateTime.DaysInMonth(year, month);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals")]
	internal static CBool /* System.Boolean */ System_DateTime_Equals(void* /* System.DateTime */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals1")]
	internal static CBool /* System.Boolean */ System_DateTime_Equals1(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals2")]
	internal static CBool /* System.Boolean */ System_DateTime_Equals2(void* /* System.DateTime */ t1, void* /* System.DateTime */ t2, void** /* System.Exception */ __outException)
	{
		System.DateTime t1Converted = InteropUtils.GetInstance<System.DateTime>(t1);
		System.DateTime t2Converted = InteropUtils.GetInstance<System.DateTime>(t2);
	
	    try {
			System.Boolean __returnValue = System.DateTime.Equals(t1Converted, t2Converted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromBinary")]
	internal static void* /* System.DateTime */ System_DateTime_FromBinary(long /* System.Int64 */ dateData, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromBinary(dateData);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromFileTime")]
	internal static void* /* System.DateTime */ System_DateTime_FromFileTime(long /* System.Int64 */ fileTime, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromFileTime(fileTime);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromFileTimeUtc")]
	internal static void* /* System.DateTime */ System_DateTime_FromFileTimeUtc(long /* System.Int64 */ fileTime, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromFileTimeUtc(fileTime);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromOADate")]
	internal static void* /* System.DateTime */ System_DateTime_FromOADate(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromOADate(d);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_IsDaylightSavingTime")]
	internal static CBool /* System.Boolean */ System_DateTime_IsDaylightSavingTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDaylightSavingTime();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_SpecifyKind")]
	internal static void* /* System.DateTime */ System_DateTime_SpecifyKind(void* /* System.DateTime */ value, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.DateTime __returnValue = System.DateTime.SpecifyKind(valueConverted, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToBinary")]
	internal static long /* System.Int64 */ System_DateTime_ToBinary(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToBinary();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetHashCode")]
	internal static int /* System.Int32 */ System_DateTime_GetHashCode(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_IsLeapYear")]
	internal static CBool /* System.Boolean */ System_DateTime_IsLeapYear(int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.DateTime.IsLeapYear(year);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse")]
	internal static void* /* System.DateTime */ System_DateTime_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse1")]
	internal static void* /* System.DateTime */ System_DateTime_Parse1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse2")]
	internal static void* /* System.DateTime */ System_DateTime_Parse2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ styles, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted, providerConverted, styles);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ParseExact")]
	internal static void* /* System.DateTime */ System_DateTime_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.ParseExact(sConverted, formatConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ParseExact1")]
	internal static void* /* System.DateTime */ System_DateTime_ParseExact1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Subtract")]
	internal static void* /* System.TimeSpan */ System_DateTime_Subtract(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Subtract(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Subtract1")]
	internal static void* /* System.DateTime */ System_DateTime_Subtract1(void* /* System.DateTime */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.Subtract(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToOADate")]
	internal static double /* System.Double */ System_DateTime_ToOADate(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.ToOADate();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToFileTime")]
	internal static long /* System.Int64 */ System_DateTime_ToFileTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToFileTime();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToFileTimeUtc")]
	internal static long /* System.Int64 */ System_DateTime_ToFileTimeUtc(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToFileTimeUtc();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLocalTime")]
	internal static void* /* System.DateTime */ System_DateTime_ToLocalTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToLocalTime();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLongDateString")]
	internal static byte* /* System.String */ System_DateTime_ToLongDateString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongDateString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLongTimeString")]
	internal static byte* /* System.String */ System_DateTime_ToLongTimeString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongTimeString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToShortDateString")]
	internal static byte* /* System.String */ System_DateTime_ToShortDateString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortDateString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToShortTimeString")]
	internal static byte* /* System.String */ System_DateTime_ToShortTimeString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortTimeString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString")]
	internal static byte* /* System.String */ System_DateTime_ToString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString1")]
	internal static byte* /* System.String */ System_DateTime_ToString1(void* /* System.DateTime */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString2")]
	internal static byte* /* System.String */ System_DateTime_ToString2(void* /* System.DateTime */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString3")]
	internal static byte* /* System.String */ System_DateTime_ToString3(void* /* System.DateTime */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToUniversalTime")]
	internal static void* /* System.DateTime */ System_DateTime_ToUniversalTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToUniversalTime();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_DateTime_GetTypeCode(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create")]
	internal static void* /* System.DateTime */ System_DateTime_Create(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(ticks);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create1")]
	internal static void* /* System.DateTime */ System_DateTime_Create1(long /* System.Int64 */ ticks, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(ticks, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create2")]
	internal static void* /* System.DateTime */ System_DateTime_Create2(void* /* System.DateOnly */ date, void* /* System.TimeOnly */ time, void** /* System.Exception */ __outException)
	{
		System.DateOnly dateConverted = InteropUtils.GetInstance<System.DateOnly>(date);
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(dateConverted, timeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create3")]
	internal static void* /* System.DateTime */ System_DateTime_Create3(void* /* System.DateOnly */ date, void* /* System.TimeOnly */ time, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.DateOnly dateConverted = InteropUtils.GetInstance<System.DateOnly>(date);
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(dateConverted, timeConverted, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create4")]
	internal static void* /* System.DateTime */ System_DateTime_Create4(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create5")]
	internal static void* /* System.DateTime */ System_DateTime_Create5(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create6")]
	internal static void* /* System.DateTime */ System_DateTime_Create6(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void* /* System.Globalization.Calendar */ calendar, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, calendarConverted, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create7")]
	internal static void* /* System.DateTime */ System_DateTime_Create7(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create8")]
	internal static void* /* System.DateTime */ System_DateTime_Create8(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create9")]
	internal static void* /* System.DateTime */ System_DateTime_Create9(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create10")]
	internal static void* /* System.DateTime */ System_DateTime_Create10(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create11")]
	internal static void* /* System.DateTime */ System_DateTime_Create11(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create12")]
	internal static void* /* System.DateTime */ System_DateTime_Create12(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create13")]
	internal static void* /* System.DateTime */ System_DateTime_Create13(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create14")]
	internal static void* /* System.DateTime */ System_DateTime_Create14(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create15")]
	internal static void* /* System.DateTime */ System_DateTime_Create15(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create16")]
	internal static void* /* System.DateTime */ System_DateTime_Create16(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void* /* System.Globalization.Calendar */ calendar, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendarConverted, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Date_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Date_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.Date;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Day_Get")]
	internal static int /* System.Int32 */ System_DateTime_Day_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Day;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_DateTime_DayOfWeek_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.DayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DayOfYear_Get")]
	internal static int /* System.Int32 */ System_DateTime_DayOfYear_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayOfYear;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Hour_Get")]
	internal static int /* System.Int32 */ System_DateTime_Hour_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hour;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Kind_Get")]
	internal static System.DateTimeKind /* System.DateTimeKind */ System_DateTime_Kind_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTimeKind __returnValue = __selfConverted.Kind;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DateTimeKind);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Millisecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Millisecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Millisecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Microsecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Microsecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microsecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Nanosecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Nanosecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanosecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Minute_Get")]
	internal static int /* System.Int32 */ System_DateTime_Minute_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minute;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Month_Get")]
	internal static int /* System.Int32 */ System_DateTime_Month_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Month;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Now_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Now_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.Now;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Second_Get")]
	internal static int /* System.Int32 */ System_DateTime_Second_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Second;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Ticks_Get")]
	internal static long /* System.Int64 */ System_DateTime_Ticks_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TimeOfDay_Get")]
	internal static void* /* System.TimeSpan */ System_DateTime_TimeOfDay_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.TimeOfDay;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Today_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Today_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.Today;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Year_Get")]
	internal static int /* System.Int32 */ System_DateTime_Year_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Year;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_UtcNow_Get")]
	internal static void* /* System.DateTime */ System_DateTime_UtcNow_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.UtcNow;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_MinValue_Get")]
	internal static void* /* System.DateTime */ System_DateTime_MinValue_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.MinValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_MaxValue_Get")]
	internal static void* /* System.DateTime */ System_DateTime_MaxValue_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.MaxValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_UnixEpoch_Get")]
	internal static void* /* System.DateTime */ System_DateTime_UnixEpoch_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.UnixEpoch;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Destroy")]
	internal static void /* System.Void */ System_DateTime_Destroy(void* /* System.DateTime */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_TimeSpan
{
	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Add")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Add(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Add(tsConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Compare")]
	internal static int /* System.Int32 */ System_TimeSpan_Compare(void* /* System.TimeSpan */ t1, void* /* System.TimeSpan */ t2, void** /* System.Exception */ __outException)
	{
		System.TimeSpan t1Converted = InteropUtils.GetInstance<System.TimeSpan>(t1);
		System.TimeSpan t2Converted = InteropUtils.GetInstance<System.TimeSpan>(t2);
	
	    try {
			System.Int32 __returnValue = System.TimeSpan.Compare(t1Converted, t2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_CompareTo")]
	internal static int /* System.Int32 */ System_TimeSpan_CompareTo(void* /* System.TimeSpan */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_CompareTo1")]
	internal static int /* System.Int32 */ System_TimeSpan_CompareTo1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromDays")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromDays(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromDays(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Duration")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Duration(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Duration();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals")]
	internal static CBool /* System.Boolean */ System_TimeSpan_Equals(void* /* System.TimeSpan */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals1")]
	internal static CBool /* System.Boolean */ System_TimeSpan_Equals1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan objConverted = InteropUtils.GetInstance<System.TimeSpan>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals2")]
	internal static CBool /* System.Boolean */ System_TimeSpan_Equals2(void* /* System.TimeSpan */ t1, void* /* System.TimeSpan */ t2, void** /* System.Exception */ __outException)
	{
		System.TimeSpan t1Converted = InteropUtils.GetInstance<System.TimeSpan>(t1);
		System.TimeSpan t2Converted = InteropUtils.GetInstance<System.TimeSpan>(t2);
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.Equals(t1Converted, t2Converted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_GetHashCode")]
	internal static int /* System.Int32 */ System_TimeSpan_GetHashCode(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromHours")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromHours(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromHours(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMilliseconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMilliseconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMilliseconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMicroseconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMicroseconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMicroseconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMinutes")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMinutes(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMinutes(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Negate")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Negate(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Negate();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromSeconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromSeconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromSeconds(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Subtract")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Subtract(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Subtract(tsConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Multiply")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Multiply(void* /* System.TimeSpan */ __self, double /* System.Double */ factor, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Multiply(factor);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Divide")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Divide(void* /* System.TimeSpan */ __self, double /* System.Double */ divisor, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Divide(divisor);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Divide1")]
	internal static double /* System.Double */ System_TimeSpan_Divide1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.Double __returnValue = __selfConverted.Divide(tsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromTicks")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromTicks(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromTicks(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Parse")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.Parse(sConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Parse1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Parse1(byte* /* System.String */ input, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.Parse(inputConverted, formatProviderConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatConverted, formatProviderConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact1(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, System.Globalization.TimeSpanStyles /* System.Globalization.TimeSpanStyles */ styles, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatConverted, formatProviderConverted, styles);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString")]
	internal static byte* /* System.String */ System_TimeSpan_ToString(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString1")]
	internal static byte* /* System.String */ System_TimeSpan_ToString1(void* /* System.TimeSpan */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString2")]
	internal static byte* /* System.String */ System_TimeSpan_ToString2(void* /* System.TimeSpan */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, formatProviderConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(ticks);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create1(int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(hours, minutes, seconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create2")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create2(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create3")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create3(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, int /* System.Int32 */ milliseconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds, milliseconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create4")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create4(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, int /* System.Int32 */ milliseconds, int /* System.Int32 */ microseconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds, milliseconds, microseconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Ticks_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_Ticks_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Days_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Days_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Days;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Hours_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Hours_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hours;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Milliseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Milliseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Milliseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Microseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Microseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Nanoseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Nanoseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanoseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Minutes_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Minutes_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minutes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Seconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Seconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Seconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalDays_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalDays_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalDays;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalHours_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalHours_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalHours;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMilliseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMilliseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMilliseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMicroseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMicroseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMicroseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalNanoseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalNanoseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalNanoseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMinutes_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMinutes_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMinutes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalSeconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalSeconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalSeconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Zero_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Zero_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.Zero;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_MaxValue_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_MaxValue_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.MaxValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_MinValue_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_MinValue_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.MinValue;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_NanosecondsPerTick_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_NanosecondsPerTick_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.NanosecondsPerTick;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMicrosecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMicrosecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMicrosecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMillisecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMillisecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMillisecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerSecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerSecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerSecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMinute_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMinute_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMinute;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerHour_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerHour_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerHour;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerDay_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerDay_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerDay;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Destroy")]
	internal static void /* System.Void */ System_TimeSpan_Destroy(void* /* System.TimeSpan */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}






internal unsafe class System_DateOnly
{
	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_FromDayNumber")]
	internal static void* /* System.DateOnly */ System_DateOnly_FromDayNumber(int /* System.Int32 */ dayNumber, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.FromDayNumber(dayNumber);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddDays")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddDays(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddDays(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddMonths")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddMonths(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddMonths(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddYears")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddYears(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddYears(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToDateTime")]
	internal static void* /* System.DateTime */ System_DateOnly_ToDateTime(void* /* System.DateOnly */ __self, void* /* System.TimeOnly */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(timeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToDateTime1")]
	internal static void* /* System.DateTime */ System_DateOnly_ToDateTime1(void* /* System.DateOnly */ __self, void* /* System.TimeOnly */ time, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(timeConverted, kind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_FromDateTime")]
	internal static void* /* System.DateOnly */ System_DateOnly_FromDateTime(void* /* System.DateTime */ dateTime, void** /* System.Exception */ __outException)
	{
		System.DateTime dateTimeConverted = InteropUtils.GetInstance<System.DateTime>(dateTime);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.FromDateTime(dateTimeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_CompareTo")]
	internal static int /* System.Int32 */ System_DateOnly_CompareTo(void* /* System.DateOnly */ __self, void* /* System.DateOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.DateOnly valueConverted = InteropUtils.GetInstance<System.DateOnly>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_CompareTo1")]
	internal static int /* System.Int32 */ System_DateOnly_CompareTo1(void* /* System.DateOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Equals")]
	internal static CBool /* System.Boolean */ System_DateOnly_Equals(void* /* System.DateOnly */ __self, void* /* System.DateOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.DateOnly valueConverted = InteropUtils.GetInstance<System.DateOnly>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Equals1")]
	internal static CBool /* System.Boolean */ System_DateOnly_Equals1(void* /* System.DateOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_GetHashCode")]
	internal static int /* System.Int32 */ System_DateOnly_GetHashCode(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse1")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted, providerConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact1")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToLongDateString")]
	internal static byte* /* System.String */ System_DateOnly_ToLongDateString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongDateString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToShortDateString")]
	internal static byte* /* System.String */ System_DateOnly_ToShortDateString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortDateString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString")]
	internal static byte* /* System.String */ System_DateOnly_ToString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString1")]
	internal static byte* /* System.String */ System_DateOnly_ToString1(void* /* System.DateOnly */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString2")]
	internal static byte* /* System.String */ System_DateOnly_ToString2(void* /* System.DateOnly */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString3")]
	internal static byte* /* System.String */ System_DateOnly_ToString3(void* /* System.DateOnly */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse2")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Create")]
	internal static void* /* System.DateOnly */ System_DateOnly_Create(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = new System.DateOnly(year, month, day);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Create1")]
	internal static void* /* System.DateOnly */ System_DateOnly_Create1(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateOnly __returnValue = new System.DateOnly(year, month, day, calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_MinValue_Get")]
	internal static void* /* System.DateOnly */ System_DateOnly_MinValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.MinValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_MaxValue_Get")]
	internal static void* /* System.DateOnly */ System_DateOnly_MaxValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.MaxValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Year_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Year_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Year;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Month_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Month_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Month;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Day_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Day_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Day;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_DateOnly_DayOfWeek_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.DayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayOfYear_Get")]
	internal static int /* System.Int32 */ System_DateOnly_DayOfYear_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayOfYear;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayNumber_Get")]
	internal static int /* System.Int32 */ System_DateOnly_DayNumber_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayNumber;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Destroy")]
	internal static void /* System.Void */ System_DateOnly_Destroy(void* /* System.DateOnly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_TimeOnly
{
	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Add")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Add(void* /* System.TimeOnly */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.Add(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddHours")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddHours(void* /* System.TimeOnly */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddHours(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddMinutes")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddMinutes(void* /* System.TimeOnly */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddMinutes(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_IsBetween")]
	internal static CBool /* System.Boolean */ System_TimeOnly_IsBetween(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ start, void* /* System.TimeOnly */ end, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly startConverted = InteropUtils.GetInstance<System.TimeOnly>(start);
		System.TimeOnly endConverted = InteropUtils.GetInstance<System.TimeOnly>(end);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBetween(startConverted, endConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_FromTimeSpan")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_FromTimeSpan(void* /* System.TimeSpan */ timeSpan, void** /* System.Exception */ __outException)
	{
		System.TimeSpan timeSpanConverted = InteropUtils.GetInstance<System.TimeSpan>(timeSpan);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.FromTimeSpan(timeSpanConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_FromDateTime")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_FromDateTime(void* /* System.DateTime */ dateTime, void** /* System.Exception */ __outException)
	{
		System.DateTime dateTimeConverted = InteropUtils.GetInstance<System.DateTime>(dateTime);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.FromDateTime(dateTimeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToTimeSpan")]
	internal static void* /* System.TimeSpan */ System_TimeOnly_ToTimeSpan(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.ToTimeSpan();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_CompareTo")]
	internal static int /* System.Int32 */ System_TimeOnly_CompareTo(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly valueConverted = InteropUtils.GetInstance<System.TimeOnly>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_CompareTo1")]
	internal static int /* System.Int32 */ System_TimeOnly_CompareTo1(void* /* System.TimeOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Equals")]
	internal static CBool /* System.Boolean */ System_TimeOnly_Equals(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly valueConverted = InteropUtils.GetInstance<System.TimeOnly>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Equals1")]
	internal static CBool /* System.Boolean */ System_TimeOnly_Equals1(void* /* System.TimeOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_GetHashCode")]
	internal static int /* System.Int32 */ System_TimeOnly_GetHashCode(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted, providerConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToLongTimeString")]
	internal static byte* /* System.String */ System_TimeOnly_ToLongTimeString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongTimeString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToShortTimeString")]
	internal static byte* /* System.String */ System_TimeOnly_ToShortTimeString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortTimeString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString")]
	internal static byte* /* System.String */ System_TimeOnly_ToString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString1")]
	internal static byte* /* System.String */ System_TimeOnly_ToString1(void* /* System.TimeOnly */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString2")]
	internal static byte* /* System.String */ System_TimeOnly_ToString2(void* /* System.TimeOnly */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString3")]
	internal static byte* /* System.String */ System_TimeOnly_ToString3(void* /* System.TimeOnly */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse2")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create(int /* System.Int32 */ hour, int /* System.Int32 */ minute, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create1(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create2")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create2(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second, millisecond);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create3")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create3(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second, millisecond, microsecond);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create4")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create4(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(ticks);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_MinValue_Get")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_MinValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.MinValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_MaxValue_Get")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_MaxValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.MaxValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Hour_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Hour_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hour;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Minute_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Minute_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minute;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Second_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Second_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Second;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Millisecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Millisecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Millisecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Microsecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Microsecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microsecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Nanosecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Nanosecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanosecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Ticks_Get")]
	internal static long /* System.Int64 */ System_TimeOnly_Ticks_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Destroy")]
	internal static void /* System.Void */ System_TimeOnly_Destroy(void* /* System.TimeOnly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_Calendar
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_Clone")]
	internal static void* /* System.Object */ System_Globalization_Calendar_Clone(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ReadOnly")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_Calendar_ReadOnly(void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.Globalization.Calendar __returnValue = System.Globalization.Calendar.ReadOnly(calendarConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMilliseconds")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMilliseconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, double /* System.Double */ milliseconds, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMilliseconds(timeConverted, milliseconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddDays")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddDays(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ days, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddDays(timeConverted, days);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddHours")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddHours(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ hours, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddHours(timeConverted, hours);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMinutes")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMinutes(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ minutes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMinutes(timeConverted, minutes);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMonths")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMonths(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ months, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMonths(timeConverted, months);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddSeconds")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddSeconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddSeconds(timeConverted, seconds);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddWeeks")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddWeeks(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ weeks, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddWeeks(timeConverted, weeks);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddYears")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddYears(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ years, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddYears(timeConverted, years);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDayOfMonth(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDayOfMonth(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfWeek")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_Globalization_Calendar_GetDayOfWeek(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.GetDayOfWeek(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDayOfYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDayOfYear(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInMonth(year, month);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInMonth1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInMonth1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInMonth(year, month, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInYear1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInYear1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInYear(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetEra")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetEra(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetEra(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetHour")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetHour(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHour(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMilliseconds")]
	internal static double /* System.Double */ System_Globalization_Calendar_GetMilliseconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Double __returnValue = __selfConverted.GetMilliseconds(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMinute")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMinute(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMinute(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonth(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonth(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonthsInYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonthsInYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonthsInYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonthsInYear1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonthsInYear1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonthsInYear(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetSecond")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetSecond(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetSecond(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetWeekOfYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetWeekOfYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ rule, System.DayOfWeek /* System.DayOfWeek */ firstDayOfWeek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetWeekOfYear(timeConverted, rule, firstDayOfWeek);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetYear(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapDay")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapDay(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapDay(year, month, day);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapDay1")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapDay1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapDay(year, month, day, era);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapMonth")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapMonth(year, month);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapMonth1")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapMonth1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapMonth(year, month, era);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetLeapMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetLeapMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLeapMonth(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetLeapMonth1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetLeapMonth1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLeapMonth(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapYear")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapYear(year);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapYear1")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsLeapYear1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapYear(year, era);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToDateTime")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_ToDateTime(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(year, month, day, hour, minute, second, millisecond);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToDateTime1")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_ToDateTime1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(year, month, day, hour, minute, second, millisecond, era);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToFourDigitYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_ToFourDigitYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ToFourDigitYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_MinSupportedDateTime_Get")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_MinSupportedDateTime_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.MinSupportedDateTime;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_MaxSupportedDateTime_Get")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_MaxSupportedDateTime_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.MaxSupportedDateTime;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AlgorithmType_Get")]
	internal static System.Globalization.CalendarAlgorithmType /* System.Globalization.CalendarAlgorithmType */ System_Globalization_Calendar_AlgorithmType_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Globalization.CalendarAlgorithmType __returnValue = __selfConverted.AlgorithmType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CalendarAlgorithmType);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_Calendar_IsReadOnly_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_TwoDigitYearMax_Get")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_TwoDigitYearMax_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.TwoDigitYearMax;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_TwoDigitYearMax_Set")]
	internal static void /* System.Void */ System_Globalization_Calendar_TwoDigitYearMax_Set(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			__selfConverted.TwoDigitYearMax = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_CurrentEra_Get")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_CurrentEra_Get()
	{
	
		System.Int32 __returnValue = System.Globalization.Calendar.CurrentEra;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_Destroy")]
	internal static void /* System.Void */ System_Globalization_Calendar_Destroy(void* /* System.Globalization.Calendar */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Runtime_Serialization_IFormatterConverter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Convert")]
	internal static void* /* System.Object */ System_Runtime_Serialization_IFormatterConverter_Convert(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Object __returnValue = __selfConverted.Convert(valueConverted, typeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Convert1")]
	internal static void* /* System.Object */ System_Runtime_Serialization_IFormatterConverter_Convert1(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, System.TypeCode /* System.TypeCode */ typeCode, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Object __returnValue = __selfConverted.Convert(valueConverted, typeCode);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToBoolean")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_IFormatterConverter_ToBoolean(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.ToBoolean(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToChar")]
	internal static char /* System.Char */ System_Runtime_Serialization_IFormatterConverter_ToChar(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Char __returnValue = __selfConverted.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToSByte")]
	internal static sbyte /* System.SByte */ System_Runtime_Serialization_IFormatterConverter_ToSByte(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.SByte __returnValue = __selfConverted.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToByte")]
	internal static byte /* System.Byte */ System_Runtime_Serialization_IFormatterConverter_ToByte(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Byte __returnValue = __selfConverted.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt16")]
	internal static short /* System.Int16 */ System_Runtime_Serialization_IFormatterConverter_ToInt16(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int16 __returnValue = __selfConverted.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt16")]
	internal static ushort /* System.UInt16 */ System_Runtime_Serialization_IFormatterConverter_ToUInt16(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt16 __returnValue = __selfConverted.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt32")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_IFormatterConverter_ToInt32(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt32")]
	internal static uint /* System.UInt32 */ System_Runtime_Serialization_IFormatterConverter_ToUInt32(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt32 __returnValue = __selfConverted.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt64")]
	internal static long /* System.Int64 */ System_Runtime_Serialization_IFormatterConverter_ToInt64(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt64")]
	internal static ulong /* System.UInt64 */ System_Runtime_Serialization_IFormatterConverter_ToUInt64(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt64 __returnValue = __selfConverted.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToSingle")]
	internal static float /* System.Single */ System_Runtime_Serialization_IFormatterConverter_ToSingle(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Single __returnValue = __selfConverted.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDouble")]
	internal static double /* System.Double */ System_Runtime_Serialization_IFormatterConverter_ToDouble(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Double __returnValue = __selfConverted.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDecimal")]
	internal static void* /* System.Decimal */ System_Runtime_Serialization_IFormatterConverter_ToDecimal(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Decimal __returnValue = __selfConverted.ToDecimal(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDateTime")]
	internal static void* /* System.DateTime */ System_Runtime_Serialization_IFormatterConverter_ToDateTime(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToString")]
	internal static byte* /* System.String */ System_Runtime_Serialization_IFormatterConverter_ToString(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(valueConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_IFormatterConverter_Destroy(void* /* System.Runtime.Serialization.IFormatterConverter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_StreamingContext
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Equals")]
	internal static CBool /* System.Boolean */ System_Runtime_Serialization_StreamingContext_Equals(void* /* System.Runtime.Serialization.StreamingContext */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_GetHashCode")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_StreamingContext_GetHashCode(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Create")]
	internal static void* /* System.Runtime.Serialization.StreamingContext */ System_Runtime_Serialization_StreamingContext_Create(System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ state, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.Serialization.StreamingContext __returnValue = new System.Runtime.Serialization.StreamingContext(state);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Create1")]
	internal static void* /* System.Runtime.Serialization.StreamingContext */ System_Runtime_Serialization_StreamingContext_Create1(System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ state, void* /* System.Object */ additional, void** /* System.Exception */ __outException)
	{
		System.Object additionalConverted = InteropUtils.GetInstance<System.Object>(additional);
	
	    try {
			System.Runtime.Serialization.StreamingContext __returnValue = new System.Runtime.Serialization.StreamingContext(state, additionalConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_State_Get")]
	internal static System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ System_Runtime_Serialization_StreamingContext_State_Get(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Runtime.Serialization.StreamingContextStates __returnValue = __selfConverted.State;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Runtime.Serialization.StreamingContextStates);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Context_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_StreamingContext_Context_Get(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Context;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_StreamingContext_Destroy(void* /* System.Runtime.Serialization.StreamingContext */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_RuntimeTypeHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_FromIntPtr")]
	internal static void* /* System.RuntimeTypeHandle */ System_RuntimeTypeHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeTypeHandle __returnValue = System.RuntimeTypeHandle.FromIntPtr(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeTypeHandle_ToIntPtr(void* /* System.RuntimeTypeHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeTypeHandle valueConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeTypeHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeTypeHandle_GetHashCode(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Equals")]
	internal static CBool /* System.Boolean */ System_RuntimeTypeHandle_Equals(void* /* System.RuntimeTypeHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Equals1")]
	internal static CBool /* System.Boolean */ System_RuntimeTypeHandle_Equals1(void* /* System.RuntimeTypeHandle */ __self, void* /* System.RuntimeTypeHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.RuntimeTypeHandle handleConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetModuleHandle")]
	internal static void* /* System.ModuleHandle */ System_RuntimeTypeHandle_GetModuleHandle(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.ModuleHandle __returnValue = __selfConverted.GetModuleHandle();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeTypeHandle_GetObjectData(void* /* System.RuntimeTypeHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeTypeHandle_Value_Get(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeTypeHandle_Destroy(void* /* System.RuntimeTypeHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ModuleHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_ModuleHandle_GetHashCode(void* /* System.ModuleHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Equals")]
	internal static CBool /* System.Boolean */ System_ModuleHandle_Equals(void* /* System.ModuleHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Equals1")]
	internal static CBool /* System.Boolean */ System_ModuleHandle_Equals1(void* /* System.ModuleHandle */ __self, void* /* System.ModuleHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.ModuleHandle handleConverted = InteropUtils.GetInstance<System.ModuleHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken")]
	internal static void* /* System.RuntimeTypeHandle */ System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ typeToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.GetRuntimeTypeHandleFromMetadataToken(typeToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveTypeHandle")]
	internal static void* /* System.RuntimeTypeHandle */ System_ModuleHandle_ResolveTypeHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ typeToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.ResolveTypeHandle(typeToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken")]
	internal static void* /* System.RuntimeMethodHandle */ System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ methodToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.GetRuntimeMethodHandleFromMetadataToken(methodToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveMethodHandle")]
	internal static void* /* System.RuntimeMethodHandle */ System_ModuleHandle_ResolveMethodHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ methodToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.ResolveMethodHandle(methodToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken")]
	internal static void* /* System.RuntimeFieldHandle */ System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ fieldToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.GetRuntimeFieldHandleFromMetadataToken(fieldToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveFieldHandle")]
	internal static void* /* System.RuntimeFieldHandle */ System_ModuleHandle_ResolveFieldHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ fieldToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.ResolveFieldHandle(fieldToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_MDStreamVersion_Get")]
	internal static int /* System.Int32 */ System_ModuleHandle_MDStreamVersion_Get(void* /* System.ModuleHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MDStreamVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_EmptyHandle_Get")]
	internal static void* /* System.ModuleHandle */ System_ModuleHandle_EmptyHandle_Get()
	{
	
		System.ModuleHandle __returnValue = System.ModuleHandle.EmptyHandle;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Destroy")]
	internal static void /* System.Void */ System_ModuleHandle_Destroy(void* /* System.ModuleHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_RuntimeFieldHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeFieldHandle_GetHashCode(void* /* System.RuntimeFieldHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Equals")]
	internal static CBool /* System.Boolean */ System_RuntimeFieldHandle_Equals(void* /* System.RuntimeFieldHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Equals1")]
	internal static CBool /* System.Boolean */ System_RuntimeFieldHandle_Equals1(void* /* System.RuntimeFieldHandle */ __self, void* /* System.RuntimeFieldHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_FromIntPtr")]
	internal static void* /* System.RuntimeFieldHandle */ System_RuntimeFieldHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeFieldHandle __returnValue = System.RuntimeFieldHandle.FromIntPtr(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeFieldHandle_ToIntPtr(void* /* System.RuntimeFieldHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle valueConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeFieldHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeFieldHandle_GetObjectData(void* /* System.RuntimeFieldHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeFieldHandle_Value_Get(void* /* System.RuntimeFieldHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeFieldHandle_Destroy(void* /* System.RuntimeFieldHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Reflection_MethodBody
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_LocalSignatureMetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_MethodBody_LocalSignatureMetadataToken_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LocalSignatureMetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_MaxStackSize_Get")]
	internal static int /* System.Int32 */ System_Reflection_MethodBody_MaxStackSize_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxStackSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_InitLocals_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodBody_InitLocals_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.InitLocals;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodBody_Destroy(void* /* System.Reflection.MethodBody */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Reflection_Binder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_ChangeType")]
	internal static void* /* System.Object */ System_Reflection_Binder_ChangeType(void* /* System.Reflection.Binder */ __self, void* /* System.Object */ value, void* /* System.Type */ type, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.ChangeType(valueConverted, typeConverted, cultureConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_Destroy")]
	internal static void /* System.Void */ System_Reflection_Binder_Destroy(void* /* System.Reflection.Binder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_FieldInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetFieldFromHandle")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_FieldInfo_GetFieldFromHandle(void* /* System.RuntimeFieldHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
	
	    try {
			System.Reflection.FieldInfo __returnValue = System.Reflection.FieldInfo.GetFieldFromHandle(handleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetFieldFromHandle1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_FieldInfo_GetFieldFromHandle1(void* /* System.RuntimeFieldHandle */ handle, void* /* System.RuntimeTypeHandle */ declaringType, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
		System.RuntimeTypeHandle declaringTypeConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(declaringType);
	
	    try {
			System.Reflection.FieldInfo __returnValue = System.Reflection.FieldInfo.GetFieldFromHandle(handleConverted, declaringTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_Equals(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_FieldInfo_GetHashCode(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetValue")]
	internal static void* /* System.Object */ System_Reflection_FieldInfo_GetValue(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_SetValue")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_SetValue(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_SetValue1")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_SetValue1(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted, invokeAttr, binderConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetRawConstantValue")]
	internal static void* /* System.Object */ System_Reflection_FieldInfo_GetRawConstantValue(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetRawConstantValue();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetModifiedFieldType")]
	internal static void* /* System.Type */ System_Reflection_FieldInfo_GetModifiedFieldType(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedFieldType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_FieldInfo_MemberType_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Attributes_Get")]
	internal static System.Reflection.FieldAttributes /* System.Reflection.FieldAttributes */ System_Reflection_FieldInfo_Attributes_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Reflection.FieldAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.FieldAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_FieldType_Get")]
	internal static void* /* System.Type */ System_Reflection_FieldInfo_FieldType_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.FieldType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsInitOnly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsInitOnly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInitOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsLiteral_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsLiteral_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLiteral;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsNotSerialized_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsNotSerialized_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNotSerialized;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPinvokeImpl_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsPinvokeImpl_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPinvokeImpl;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSpecialName_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsSpecialName_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsStatic_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsStatic_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsStatic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamily_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsFamily_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamily;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamilyAndAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsFamilyAndAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyAndAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamilyOrAssembly_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsFamilyOrAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyOrAssembly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPrivate_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsPrivate_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrivate;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPublic_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsPublic_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecurityCritical_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsSecurityCritical_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecuritySafeCritical_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsSecuritySafeCritical_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecurityTransparent_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_FieldInfo_IsSecurityTransparent_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_FieldHandle_Get")]
	internal static void* /* System.RuntimeFieldHandle */ System_Reflection_FieldInfo_FieldHandle_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.FieldHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_Destroy(void* /* System.Reflection.FieldInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_PropertyInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetGetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetGetMethod(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGetMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetGetMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetGetMethod1(void* /* System.Reflection.PropertyInfo */ __self, CBool /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGetMethod(nonPublicConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetSetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetSetMethod(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetSetMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetSetMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetSetMethod1(void* /* System.Reflection.PropertyInfo */ __self, CBool /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetSetMethod(nonPublicConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetModifiedPropertyType")]
	internal static void* /* System.Type */ System_Reflection_PropertyInfo_GetModifiedPropertyType(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedPropertyType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetValue(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetConstantValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetConstantValue(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetConstantValue();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetRawConstantValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetRawConstantValue(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetRawConstantValue();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetValue")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_SetValue(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_PropertyInfo_Equals(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_PropertyInfo_GetHashCode(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_PropertyInfo_MemberType_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_PropertyType_Get")]
	internal static void* /* System.Type */ System_Reflection_PropertyInfo_PropertyType_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.PropertyType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Attributes_Get")]
	internal static System.Reflection.PropertyAttributes /* System.Reflection.PropertyAttributes */ System_Reflection_PropertyInfo_Attributes_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.PropertyAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.PropertyAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_IsSpecialName_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_PropertyInfo_IsSpecialName_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_CanRead_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_PropertyInfo_CanRead_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_CanWrite_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_PropertyInfo_CanWrite_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetMethod_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_SetMethod_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.SetMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_Destroy(void* /* System.Reflection.PropertyInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_MethodInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetGenericMethodDefinition")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_MethodInfo_GetGenericMethodDefinition(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGenericMethodDefinition();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetBaseDefinition")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_MethodInfo_GetBaseDefinition(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetBaseDefinition();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate")]
	internal static void* /* System.Delegate */ System_Reflection_MethodInfo_CreateDelegate(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Type */ delegateType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type delegateTypeConverted = InteropUtils.GetInstance<System.Type>(delegateType);
	
	    try {
			System.Delegate __returnValue = __selfConverted.CreateDelegate(delegateTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate1")]
	internal static void* /* System.Delegate */ System_Reflection_MethodInfo_CreateDelegate1(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Type */ delegateType, void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type delegateTypeConverted = InteropUtils.GetInstance<System.Type>(delegateType);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.Delegate __returnValue = __selfConverted.CreateDelegate(delegateTypeConverted, targetConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_MethodInfo_Equals(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MethodInfo_GetHashCode(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_MethodInfo_MemberType_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnParameter_Get")]
	internal static void* /* System.Reflection.ParameterInfo */ System_Reflection_MethodInfo_ReturnParameter_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.ParameterInfo __returnValue = __selfConverted.ReturnParameter;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnType_Get")]
	internal static void* /* System.Type */ System_Reflection_MethodInfo_ReturnType_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReturnType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get")]
	internal static void* /* System.Reflection.ICustomAttributeProvider */ System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.ICustomAttributeProvider __returnValue = __selfConverted.ReturnTypeCustomAttributes;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodInfo_Destroy(void* /* System.Reflection.MethodInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ParameterInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsDefined")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsDefined(void* /* System.Reflection.ParameterInfo */ __self, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetModifiedParameterType")]
	internal static void* /* System.Type */ System_Reflection_ParameterInfo_GetModifiedParameterType(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedParameterType();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetRealObject")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_GetRealObject(void* /* System.Reflection.ParameterInfo */ __self, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			System.Object __returnValue = __selfConverted.GetRealObject(contextConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_ToString")]
	internal static byte* /* System.String */ System_Reflection_ParameterInfo_ToString(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Attributes_Get")]
	internal static System.Reflection.ParameterAttributes /* System.Reflection.ParameterAttributes */ System_Reflection_ParameterInfo_Attributes_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Reflection.ParameterAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ParameterAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Member_Get")]
	internal static void* /* System.Reflection.MemberInfo */ System_Reflection_ParameterInfo_Member_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.Member;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_ParameterInfo_Name_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_ParameterType_Get")]
	internal static void* /* System.Type */ System_Reflection_ParameterInfo_ParameterType_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ParameterType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Position_Get")]
	internal static int /* System.Int32 */ System_Reflection_ParameterInfo_Position_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsIn_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsIn_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsIn;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsLcid_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsLcid_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLcid;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsOptional_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsOptional_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsOptional;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsOut_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsOut_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsOut;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsRetval_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_IsRetval_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsRetval;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_DefaultValue_Get")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_DefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.DefaultValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_RawDefaultValue_Get")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_RawDefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.RawDefaultValue;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_HasDefaultValue_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_ParameterInfo_HasDefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasDefaultValue;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_ParameterInfo_MetadataToken_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ParameterInfo_Destroy(void* /* System.Reflection.ParameterInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_ICustomAttributeProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_IsDefined")]
	internal static CBool /* System.Boolean */ System_Reflection_ICustomAttributeProvider_IsDefined(void* /* System.Reflection.ICustomAttributeProvider */ __self, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ICustomAttributeProvider __selfConverted = InteropUtils.GetInstance<System.Reflection.ICustomAttributeProvider>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_Destroy")]
	internal static void /* System.Void */ System_Reflection_ICustomAttributeProvider_Destroy(void* /* System.Reflection.ICustomAttributeProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "Delegate" was skipped. Reason: It is a delegate but has no Invoke method.
internal unsafe class System_Collections_IDictionary
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Contains")]
	internal static CBool /* System.Boolean */ System_Collections_IDictionary_Contains(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(keyConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Add")]
	internal static void /* System.Void */ System_Collections_IDictionary_Add(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Add(keyConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Clear")]
	internal static void /* System.Void */ System_Collections_IDictionary_Clear(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_GetEnumerator")]
	internal static void* /* System.Collections.IDictionaryEnumerator */ System_Collections_IDictionary_GetEnumerator(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.IDictionaryEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Remove")]
	internal static void /* System.Void */ System_Collections_IDictionary_Remove(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			__selfConverted.Remove(keyConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Keys_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_IDictionary_Keys_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Keys;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Values_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_IDictionary_Values_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Values;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Collections_IDictionary_IsReadOnly_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_IsFixedSize_Get")]
	internal static CBool /* System.Boolean */ System_Collections_IDictionary_IsFixedSize_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Destroy")]
	internal static void /* System.Void */ System_Collections_IDictionary_Destroy(void* /* System.Collections.IDictionary */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_ICollection
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_CopyTo")]
	internal static void /* System.Void */ System_Collections_ICollection_CopyTo(void* /* System.Collections.ICollection */ __self, void* /* System.Array */ array, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_Count_Get")]
	internal static int /* System.Int32 */ System_Collections_ICollection_Count_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Count;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Collections_ICollection_SyncRoot_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_IsSynchronized_Get")]
	internal static CBool /* System.Boolean */ System_Collections_ICollection_IsSynchronized_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_Destroy")]
	internal static void /* System.Void */ System_Collections_ICollection_Destroy(void* /* System.Collections.ICollection */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Array
{
	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy")]
	internal static void /* System.Void */ System_Array_Copy(void* /* System.Array */ sourceArray, void* /* System.Array */ destinationArray, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, destinationArrayConverted, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy1")]
	internal static void /* System.Void */ System_Array_Copy1(void* /* System.Array */ sourceArray, int /* System.Int32 */ sourceIndex, void* /* System.Array */ destinationArray, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_ConstrainedCopy")]
	internal static void /* System.Void */ System_Array_ConstrainedCopy(void* /* System.Array */ sourceArray, int /* System.Int32 */ sourceIndex, void* /* System.Array */ destinationArray, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.ConstrainedCopy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clear")]
	internal static void /* System.Void */ System_Array_Clear(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Clear(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clear1")]
	internal static void /* System.Void */ System_Array_Clear1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Clear(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLength")]
	internal static int /* System.Int32 */ System_Array_GetLength(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLength(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetUpperBound")]
	internal static int /* System.Int32 */ System_Array_GetUpperBound(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetUpperBound(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLowerBound")]
	internal static int /* System.Int32 */ System_Array_GetLowerBound(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLowerBound(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Initialize")]
	internal static void /* System.Void */ System_Array_Initialize(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			__selfConverted.Initialize();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance")]
	internal static void* /* System.Array */ System_Array_CreateInstance(void* /* System.Type */ elementType, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance1")]
	internal static void* /* System.Array */ System_Array_CreateInstance1(void* /* System.Type */ elementType, int /* System.Int32 */ length1, int /* System.Int32 */ length2, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length1, length2);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance2")]
	internal static void* /* System.Array */ System_Array_CreateInstance2(void* /* System.Type */ elementType, int /* System.Int32 */ length1, int /* System.Int32 */ length2, int /* System.Int32 */ length3, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length1, length2, length3);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy2")]
	internal static void /* System.Void */ System_Array_Copy2(void* /* System.Array */ sourceArray, void* /* System.Array */ destinationArray, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, destinationArrayConverted, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy3")]
	internal static void /* System.Void */ System_Array_Copy3(void* /* System.Array */ sourceArray, long /* System.Int64 */ sourceIndex, void* /* System.Array */ destinationArray, long /* System.Int64 */ destinationIndex, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue")]
	internal static void* /* System.Object */ System_Array_GetValue(void* /* System.Array */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue1")]
	internal static void* /* System.Object */ System_Array_GetValue1(void* /* System.Array */ __self, int /* System.Int32 */ index1, int /* System.Int32 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue2")]
	internal static void* /* System.Object */ System_Array_GetValue2(void* /* System.Array */ __self, int /* System.Int32 */ index1, int /* System.Int32 */ index2, int /* System.Int32 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2, index3);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue")]
	internal static void /* System.Void */ System_Array_SetValue(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue1")]
	internal static void /* System.Void */ System_Array_SetValue1(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index1, int /* System.Int32 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue2")]
	internal static void /* System.Void */ System_Array_SetValue2(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index1, int /* System.Int32 */ index2, int /* System.Int32 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2, index3);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue3")]
	internal static void* /* System.Object */ System_Array_GetValue3(void* /* System.Array */ __self, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue4")]
	internal static void* /* System.Object */ System_Array_GetValue4(void* /* System.Array */ __self, long /* System.Int64 */ index1, long /* System.Int64 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue5")]
	internal static void* /* System.Object */ System_Array_GetValue5(void* /* System.Array */ __self, long /* System.Int64 */ index1, long /* System.Int64 */ index2, long /* System.Int64 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2, index3);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue3")]
	internal static void /* System.Void */ System_Array_SetValue3(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue4")]
	internal static void /* System.Void */ System_Array_SetValue4(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index1, long /* System.Int64 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue5")]
	internal static void /* System.Void */ System_Array_SetValue5(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index1, long /* System.Int64 */ index2, long /* System.Int64 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2, index3);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLongLength")]
	internal static long /* System.Int64 */ System_Array_GetLongLength(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.GetLongLength(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clone")]
	internal static void* /* System.Object */ System_Array_Clone(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch")]
	internal static int /* System.Int32 */ System_Array_BinarySearch(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch1")]
	internal static int /* System.Int32 */ System_Array_BinarySearch1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, index, length, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch2")]
	internal static int /* System.Int32 */ System_Array_BinarySearch2(void* /* System.Array */ array, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch3")]
	internal static int /* System.Int32 */ System_Array_BinarySearch3(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, index, length, valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CopyTo")]
	internal static void /* System.Void */ System_Array_CopyTo(void* /* System.Array */ __self, void* /* System.Array */ array, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CopyTo1")]
	internal static void /* System.Void */ System_Array_CopyTo1(void* /* System.Array */ __self, void* /* System.Array */ array, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf")]
	internal static int /* System.Int32 */ System_Array_IndexOf(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf1")]
	internal static int /* System.Int32 */ System_Array_IndexOf1(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf2")]
	internal static int /* System.Int32 */ System_Array_IndexOf2(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf1")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf1(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf2")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf2(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Reverse")]
	internal static void /* System.Void */ System_Array_Reverse(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Reverse(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Reverse1")]
	internal static void /* System.Void */ System_Array_Reverse1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Reverse(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort")]
	internal static void /* System.Void */ System_Array_Sort(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Sort(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort1")]
	internal static void /* System.Void */ System_Array_Sort1(void* /* System.Array */ keys, void* /* System.Array */ items, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort2")]
	internal static void /* System.Void */ System_Array_Sort2(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Sort(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort3")]
	internal static void /* System.Void */ System_Array_Sort3(void* /* System.Array */ keys, void* /* System.Array */ items, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort4")]
	internal static void /* System.Void */ System_Array_Sort4(void* /* System.Array */ array, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(arrayConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort5")]
	internal static void /* System.Void */ System_Array_Sort5(void* /* System.Array */ keys, void* /* System.Array */ items, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort6")]
	internal static void /* System.Void */ System_Array_Sort6(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(arrayConverted, index, length, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort7")]
	internal static void /* System.Void */ System_Array_Sort7(void* /* System.Array */ keys, void* /* System.Array */ items, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, index, length, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetEnumerator")]
	internal static void* /* System.Collections.IEnumerator */ System_Array_GetEnumerator(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Collections.IEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Length_Get")]
	internal static int /* System.Int32 */ System_Array_Length_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LongLength_Get")]
	internal static long /* System.Int64 */ System_Array_LongLength_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.LongLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Rank_Get")]
	internal static int /* System.Int32 */ System_Array_Rank_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Rank;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Array_SyncRoot_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Array_IsReadOnly_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsFixedSize_Get")]
	internal static CBool /* System.Boolean */ System_Array_IsFixedSize_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsSynchronized_Get")]
	internal static CBool /* System.Boolean */ System_Array_IsSynchronized_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_MaxLength_Get")]
	internal static int /* System.Int32 */ System_Array_MaxLength_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Array.MaxLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Destroy")]
	internal static void /* System.Void */ System_Array_Destroy(void* /* System.Array */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IComparer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IComparer_Compare")]
	internal static int /* System.Int32 */ System_Collections_IComparer_Compare(void* /* System.Collections.IComparer */ __self, void* /* System.Object */ x, void* /* System.Object */ y, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IComparer __selfConverted = InteropUtils.GetInstance<System.Collections.IComparer>(__self);
	
		System.Object xConverted = InteropUtils.GetInstance<System.Object>(x);
		System.Object yConverted = InteropUtils.GetInstance<System.Object>(y);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(xConverted, yConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IComparer_Destroy")]
	internal static void /* System.Void */ System_Collections_IComparer_Destroy(void* /* System.Collections.IComparer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_MoveNext")]
	internal static CBool /* System.Boolean */ System_Collections_IEnumerator_MoveNext(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Reset")]
	internal static void /* System.Void */ System_Collections_IEnumerator_Reset(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Current_Get")]
	internal static void* /* System.Object */ System_Collections_IEnumerator_Current_Get(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Current;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Destroy")]
	internal static void /* System.Void */ System_Collections_IEnumerator_Destroy(void* /* System.Collections.IEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IDictionaryEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Key_Get")]
	internal static void* /* System.Object */ System_Collections_IDictionaryEnumerator_Key_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Key;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Value_Get")]
	internal static void* /* System.Object */ System_Collections_IDictionaryEnumerator_Value_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Entry_Get")]
	internal static void* /* System.Collections.DictionaryEntry */ System_Collections_IDictionaryEnumerator_Entry_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Collections.DictionaryEntry __returnValue = __selfConverted.Entry;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Destroy")]
	internal static void /* System.Void */ System_Collections_IDictionaryEnumerator_Destroy(void* /* System.Collections.IDictionaryEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_DictionaryEntry
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_ToString")]
	internal static byte* /* System.String */ System_Collections_DictionaryEntry_ToString(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Create")]
	internal static void* /* System.Collections.DictionaryEntry */ System_Collections_DictionaryEntry_Create(void* /* System.Object */ key, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Collections.DictionaryEntry __returnValue = new System.Collections.DictionaryEntry(keyConverted, valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Key_Get")]
	internal static void* /* System.Object */ System_Collections_DictionaryEntry_Key_Get(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Key;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Key_Set")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Key_Set(void* /* System.Collections.DictionaryEntry */ __self, void* /* System.Object */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			__selfConverted.Key = InteropUtils.GetInstance<System.Object>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Value_Get")]
	internal static void* /* System.Object */ System_Collections_DictionaryEntry_Value_Get(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Value_Set")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Value_Set(void* /* System.Collections.DictionaryEntry */ __self, void* /* System.Object */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			__selfConverted.Value = InteropUtils.GetInstance<System.Object>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Destroy")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Destroy(void* /* System.Collections.DictionaryEntry */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Threading_Tasks_TaskFactory
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew1(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew2(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, creationOptions);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew3(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System.Action>(action);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, cancellationTokenConverted, creationOptions, schedulerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create1")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create1(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create2")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create2(void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(schedulerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create3")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create3(System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ continuationOptions, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(creationOptions, continuationOptions);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create4")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create4(void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ continuationOptions, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(cancellationTokenConverted, creationOptions, continuationOptions, schedulerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_CancellationToken_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_Tasks_TaskFactory_CancellationToken_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.CancellationToken __returnValue = __selfConverted.CancellationToken;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Scheduler_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskFactory_Scheduler_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = __selfConverted.Scheduler;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_CreationOptions_Get")]
	internal static System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ System_Threading_Tasks_TaskFactory_CreationOptions_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskCreationOptions __returnValue = __selfConverted.CreationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskCreationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_ContinuationOptions_Get")]
	internal static System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ System_Threading_Tasks_TaskFactory_ContinuationOptions_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskContinuationOptions __returnValue = __selfConverted.ContinuationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskContinuationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_TaskFactory_Destroy(void* /* System.Threading.Tasks.TaskFactory */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_CancellationToken
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Register")]
	internal static void* /* System.Threading.CancellationTokenRegistration */ System_Threading_CancellationToken_Register(void* /* System.Threading.CancellationToken */ __self, void* /* System.Action */ callback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Action callbackConverted = InteropUtils.GetInstance<System.Action>(callback);
	
	    try {
			System.Threading.CancellationTokenRegistration __returnValue = __selfConverted.Register(callbackConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Register1")]
	internal static void* /* System.Threading.CancellationTokenRegistration */ System_Threading_CancellationToken_Register1(void* /* System.Threading.CancellationToken */ __self, void* /* System.Action */ callback, CBool /* System.Boolean */ useSynchronizationContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Action callbackConverted = InteropUtils.GetInstance<System.Action>(callback);
		System.Boolean useSynchronizationContextConverted = useSynchronizationContext.ToBool();
	
	    try {
			System.Threading.CancellationTokenRegistration __returnValue = __selfConverted.Register(callbackConverted, useSynchronizationContextConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Equals")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationToken_Equals(void* /* System.Threading.CancellationToken */ __self, void* /* System.Threading.CancellationToken */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Threading.CancellationToken otherConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Equals1")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationToken_Equals1(void* /* System.Threading.CancellationToken */ __self, void* /* System.Object */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Object otherConverted = InteropUtils.GetInstance<System.Object>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_CancellationToken_GetHashCode(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_ThrowIfCancellationRequested")]
	internal static void /* System.Void */ System_Threading_CancellationToken_ThrowIfCancellationRequested(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			__selfConverted.ThrowIfCancellationRequested();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Create")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationToken_Create(CBool /* System.Boolean */ canceled, void** /* System.Exception */ __outException)
	{
		System.Boolean canceledConverted = canceled.ToBool();
	
	    try {
			System.Threading.CancellationToken __returnValue = new System.Threading.CancellationToken(canceledConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_None_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationToken_None_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CancellationToken __returnValue = System.Threading.CancellationToken.None;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_IsCancellationRequested_Get")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationToken_IsCancellationRequested_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCancellationRequested;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_CanBeCanceled_Get")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationToken_CanBeCanceled_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanBeCanceled;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_WaitHandle_Get")]
	internal static void* /* System.Threading.WaitHandle */ System_Threading_CancellationToken_WaitHandle_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Threading.WaitHandle __returnValue = __selfConverted.WaitHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Destroy")]
	internal static void /* System.Void */ System_Threading_CancellationToken_Destroy(void* /* System.Threading.CancellationToken */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_WaitHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Close")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Close(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Dispose")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Dispose(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_WaitOne(void* /* System.Threading.WaitHandle */ __self, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(millisecondsTimeout);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne1")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_WaitOne1(void* /* System.Threading.WaitHandle */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(timeoutConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne2")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_WaitOne2(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne3")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_WaitOne3(void* /* System.Threading.WaitHandle */ __self, int /* System.Int32 */ millisecondsTimeout, CBool /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(millisecondsTimeout, exitContextConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne4")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_WaitOne4(void* /* System.Threading.WaitHandle */ __self, void* /* System.TimeSpan */ timeout, CBool /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(timeoutConverted, exitContextConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait1")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait1(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, void* /* System.TimeSpan */ timeout, CBool /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted, timeoutConverted, exitContextConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait2")]
	internal static CBool /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait2(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, int /* System.Int32 */ millisecondsTimeout, CBool /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted, millisecondsTimeout, exitContextConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Handle_Get")]
	internal static nint /* System.IntPtr */ System_Threading_WaitHandle_Handle_Get(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Handle;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Handle_Set")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Handle_Set(void* /* System.Threading.WaitHandle */ __self, nint /* System.IntPtr */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Handle = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SafeWaitHandle_Get")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ System_Threading_WaitHandle_SafeWaitHandle_Get(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = __selfConverted.SafeWaitHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SafeWaitHandle_Set")]
	internal static void /* System.Void */ System_Threading_WaitHandle_SafeWaitHandle_Set(void* /* System.Threading.WaitHandle */ __self, void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.SafeWaitHandle = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeWaitHandle>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitTimeout_Get")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitTimeout_Get()
	{
	
		System.Int32 __returnValue = System.Threading.WaitHandle.WaitTimeout;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Destroy")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Destroy(void* /* System.Threading.WaitHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class Microsoft_Win32_SafeHandles_SafeWaitHandle
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Create")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeWaitHandle();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Create1")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Create1(nint /* System.IntPtr */ existingHandle, CBool /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeWaitHandle(existingHandle, ownsHandleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get")]
	internal static CBool /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get(void* /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_InteropServices_SafeHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_DangerousGetHandle")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_SafeHandle_DangerousGetHandle(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.DangerousGetHandle();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Close")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Close(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Dispose")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Dispose(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.SetHandleAsInvalid();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_DangerousRelease")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_DangerousRelease(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.DangerousRelease();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_IsClosed_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_InteropServices_SafeHandle_IsClosed_Get(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsClosed;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_IsInvalid_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_InteropServices_SafeHandle_IsInvalid_Get(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Destroy")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Destroy(void* /* System.Runtime.InteropServices.SafeHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_ConstrainedExecution_CriticalFinalizerObject
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy")]
	internal static void /* System.Void */ System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy(void* /* System.Runtime.ConstrainedExecution.CriticalFinalizerObject */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_CancellationTokenRegistration
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Dispose")]
	internal static void /* System.Void */ System_Threading_CancellationTokenRegistration_Dispose(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_CancellationTokenRegistration_DisposeAsync(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Unregister")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationTokenRegistration_Unregister(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Unregister();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Equals")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationTokenRegistration_Equals(void* /* System.Threading.CancellationTokenRegistration */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Equals1")]
	internal static CBool /* System.Boolean */ System_Threading_CancellationTokenRegistration_Equals1(void* /* System.Threading.CancellationTokenRegistration */ __self, void* /* System.Threading.CancellationTokenRegistration */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
		System.Threading.CancellationTokenRegistration otherConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_CancellationTokenRegistration_GetHashCode(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Token_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationTokenRegistration_Token_Get(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Threading.CancellationToken __returnValue = __selfConverted.Token;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Destroy")]
	internal static void /* System.Void */ System_Threading_CancellationTokenRegistration_Destroy(void* /* System.Threading.CancellationTokenRegistration */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_ValueTask
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_FromCanceled")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_FromCanceled(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.FromCanceled(cancellationTokenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_FromException")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_FromException(void* /* System.Exception */ exception, void** /* System.Exception */ __outException)
	{
		System.Exception exceptionConverted = InteropUtils.GetInstance<System.Exception>(exception);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.FromException(exceptionConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_Tasks_ValueTask_GetHashCode(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Equals")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_Equals(void* /* System.Threading.Tasks.ValueTask */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Equals1")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_Equals1(void* /* System.Threading.Tasks.ValueTask */ __self, void* /* System.Threading.Tasks.ValueTask */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Threading.Tasks.ValueTask otherConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_AsTask")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_ValueTask_AsTask(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.AsTask();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Preserve")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Preserve(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.Preserve();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ System_Threading_Tasks_ValueTask_GetAwaiter(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ValueTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_ConfigureAwait")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ System_Threading_Tasks_ValueTask_ConfigureAwait(void* /* System.Threading.Tasks.ValueTask */ __self, CBool /* System.Boolean */ continueOnCapturedContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Boolean continueOnCapturedContextConverted = continueOnCapturedContext.ToBool();
	
	    try {
			System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable __returnValue = __selfConverted.ConfigureAwait(continueOnCapturedContextConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Create")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Create(void* /* System.Threading.Tasks.Task */ task, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task taskConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(task);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = new System.Threading.Tasks.ValueTask(taskConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Create1")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Create1(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ source, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Sources.IValueTaskSource sourceConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(source);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = new System.Threading.Tasks.ValueTask(sourceConverted, token);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_CompletedTask_Get")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_CompletedTask_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.CompletedTask;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCompleted_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompletedSuccessfully;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsFaulted_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_IsFaulted_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFaulted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCanceled_Get")]
	internal static CBool /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCanceled_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCanceled;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_ValueTask_Destroy(void* /* System.Threading.Tasks.ValueTask */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ValueTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Action
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private System_Action(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~System_Action()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal System.Action? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Action);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Action trampoline = (System.Action)System.Delegate.CreateDelegate(typeof(System.Action), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Action(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Destroy")]
	internal static void /* System.Void */ System_Action_Destroy(void* /* System.Action */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "MulticastDelegate" was skipped. Reason: It is a delegate but has no Invoke method.
internal unsafe class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_Sources_IValueTaskSource
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_GetStatus")]
	internal static System.Threading.Tasks.Sources.ValueTaskSourceStatus /* System.Threading.Tasks.Sources.ValueTaskSourceStatus */ System_Threading_Tasks_Sources_IValueTaskSource_GetStatus(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Sources.IValueTaskSource __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(__self);
	
	
	    try {
			System.Threading.Tasks.Sources.ValueTaskSourceStatus __returnValue = __selfConverted.GetStatus(token);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.Sources.ValueTaskSourceStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_GetResult")]
	internal static void /* System.Void */ System_Threading_Tasks_Sources_IValueTaskSource_GetResult(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Sources.IValueTaskSource __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(__self);
	
	
	    try {
			__selfConverted.GetResult(token);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_Sources_IValueTaskSource_Destroy(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}





internal unsafe class System_IAsyncResult
{
	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_IAsyncResult_IsCompleted_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_AsyncWaitHandle_Get")]
	internal static void* /* System.Threading.WaitHandle */ System_IAsyncResult_AsyncWaitHandle_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Threading.WaitHandle __returnValue = __selfConverted.AsyncWaitHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_AsyncState_Get")]
	internal static void* /* System.Object */ System_IAsyncResult_AsyncState_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.AsyncState;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_CompletedSynchronously_Get")]
	internal static CBool /* System.Boolean */ System_IAsyncResult_CompletedSynchronously_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CompletedSynchronously;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_Destroy")]
	internal static void /* System.Void */ System_IAsyncResult_Destroy(void* /* System.IAsyncResult */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_TaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredTaskAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_YieldAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.YieldAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_Destroy(void* /* System.Runtime.CompilerServices.YieldAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System.Action>(continuation);
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get")]
	internal static CBool /* System.Boolean */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AsyncCallback
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private System_AsyncCallback(void* context, delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~System_AsyncCallback()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal System.AsyncCallback? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_AsyncCallback);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.AsyncCallback trampoline = (System.AsyncCallback)System.Delegate.CreateDelegate(typeof(System.AsyncCallback), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.IAsyncResult /* System.IAsyncResult */ ar)
	{
		void* arConverted = ar.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, arConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_AsyncCallback(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Destroy")]
	internal static void /* System.Void */ System_AsyncCallback_Destroy(void* /* System.AsyncCallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class Microsoft_Win32_SafeHandles_SafeFileHandle
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Create")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ Microsoft_Win32_SafeHandles_SafeFileHandle_Create(nint /* System.IntPtr */ preexistingHandle, CBool /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeFileHandle(preexistingHandle, ownsHandleConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Create1")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ Microsoft_Win32_SafeHandles_SafeFileHandle_Create1(void** /* System.Exception */ __outException)
	{
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeFileHandle();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get")]
	internal static CBool /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeFileHandle __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAsync;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get")]
	internal static CBool /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeFileHandle __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}






internal unsafe class System_IO_FileStreamOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Create")]
	internal static void* /* System.IO.FileStreamOptions */ System_IO_FileStreamOptions_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IO.FileStreamOptions __returnValue = new System.IO.FileStreamOptions();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Mode_Get")]
	internal static System.IO.FileMode /* System.IO.FileMode */ System_IO_FileStreamOptions_Mode_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileMode __returnValue = __selfConverted.Mode;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileMode);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Mode_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Mode_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileMode /* System.IO.FileMode */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Mode = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Access_Get")]
	internal static System.IO.FileAccess /* System.IO.FileAccess */ System_IO_FileStreamOptions_Access_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileAccess __returnValue = __selfConverted.Access;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAccess);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Access_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Access_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileAccess /* System.IO.FileAccess */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Access = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Share_Get")]
	internal static System.IO.FileShare /* System.IO.FileShare */ System_IO_FileStreamOptions_Share_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileShare __returnValue = __selfConverted.Share;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileShare);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Share_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Share_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileShare /* System.IO.FileShare */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Share = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Options_Get")]
	internal static System.IO.FileOptions /* System.IO.FileOptions */ System_IO_FileStreamOptions_Options_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileOptions __returnValue = __selfConverted.Options;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileOptions);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Options_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Options_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileOptions /* System.IO.FileOptions */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Options = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_PreallocationSize_Get")]
	internal static long /* System.Int64 */ System_IO_FileStreamOptions_PreallocationSize_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.PreallocationSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_PreallocationSize_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_PreallocationSize_Set(void* /* System.IO.FileStreamOptions */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.PreallocationSize = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_BufferSize_Get")]
	internal static int /* System.Int32 */ System_IO_FileStreamOptions_BufferSize_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.BufferSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_BufferSize_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_BufferSize_Set(void* /* System.IO.FileStreamOptions */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.BufferSize = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Destroy")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Destroy(void* /* System.IO.FileStreamOptions */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ManifestResourceInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_Create")]
	internal static void* /* System.Reflection.ManifestResourceInfo */ System_Reflection_ManifestResourceInfo_Create(void* /* System.Reflection.Assembly */ containingAssembly, byte* /* System.String */ containingFileName, System.Reflection.ResourceLocation /* System.Reflection.ResourceLocation */ resourceLocation, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly containingAssemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(containingAssembly);
		System.String containingFileNameConverted = InteropUtils.ToDotNetString(containingFileName);
	
	    try {
			System.Reflection.ManifestResourceInfo __returnValue = new System.Reflection.ManifestResourceInfo(containingAssemblyConverted, containingFileNameConverted, resourceLocation);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.ReferencedAssembly;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_FileName_Get")]
	internal static byte* /* System.String */ System_Reflection_ManifestResourceInfo_FileName_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FileName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_ResourceLocation_Get")]
	internal static System.Reflection.ResourceLocation /* System.Reflection.ResourceLocation */ System_Reflection_ManifestResourceInfo_ResourceLocation_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.Reflection.ResourceLocation __returnValue = __selfConverted.ResourceLocation;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ResourceLocation);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ManifestResourceInfo_Destroy(void* /* System.Reflection.ManifestResourceInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_ModuleResolveEventHandler
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private System_Reflection_ModuleResolveEventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~System_Reflection_ModuleResolveEventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal System.Reflection.ModuleResolveEventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_ModuleResolveEventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.ModuleResolveEventHandler trampoline = (System.Reflection.ModuleResolveEventHandler)System.Delegate.CreateDelegate(typeof(System.Reflection.ModuleResolveEventHandler), this, invocationMethod);

		return trampoline;
	}

	private System.Reflection.Module __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.ResolveEventArgs /* System.ResolveEventArgs */ e)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* eConverted = e.AllocateGCHandleAndGetAddress();
	


		return InteropUtils.GetInstance<System.Reflection.Module>(CFunction(Context, senderConverted, eConverted));
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_ModuleResolveEventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Destroy")]
	internal static void /* System.Void */ System_Reflection_ModuleResolveEventHandler_Destroy(void* /* System.Reflection.ModuleResolveEventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_Module
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_IsResource")]
	internal static CBool /* System.Boolean */ System_Reflection_Module_IsResource(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsResource();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_IsDefined")]
	internal static CBool /* System.Boolean */ System_Reflection_Module_IsDefined(void* /* System.Reflection.Module */ __self, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Module_GetMethod(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_GetField(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetField1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_GetField1(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted, bindingAttr);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType1")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType1(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType2")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType2(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, CBool /* System.Boolean */ throwOnError, CBool /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_ResolveField(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.ResolveField(metadataToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMember")]
	internal static void* /* System.Reflection.MemberInfo */ System_Reflection_Module_ResolveMember(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.ResolveMember(metadataToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_Module_ResolveMethod(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.ResolveMethod(metadataToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveString")]
	internal static byte* /* System.String */ System_Reflection_Module_ResolveString(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ResolveString(metadataToken);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveType")]
	internal static void* /* System.Type */ System_Reflection_Module_ResolveType(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ResolveType(metadataToken);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_Module_GetObjectData(void* /* System.Reflection.Module */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_Module_Equals(void* /* System.Reflection.Module */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_Module_GetHashCode(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ToString")]
	internal static byte* /* System.String */ System_Reflection_Module_ToString(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Assembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Module_Assembly_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Assembly;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FullyQualifiedName_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_FullyQualifiedName_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullyQualifiedName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_Name_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_MDStreamVersion_Get")]
	internal static int /* System.Int32 */ System_Reflection_Module_MDStreamVersion_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MDStreamVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ModuleVersionId_Get")]
	internal static void* /* System.Guid */ System_Reflection_Module_ModuleVersionId_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.ModuleVersionId;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ScopeName_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_ScopeName_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ScopeName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ModuleHandle_Get")]
	internal static void* /* System.ModuleHandle */ System_Reflection_Module_ModuleHandle_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.ModuleHandle __returnValue = __selfConverted.ModuleHandle;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_Module_MetadataToken_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FilterTypeName_Get")]
	internal static void* /* System.Reflection.TypeFilter */ System_Reflection_Module_FilterTypeName_Get()
	{
	
		System.Reflection.TypeFilter __returnValue = System.Reflection.Module.FilterTypeName;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FilterTypeNameIgnoreCase_Get")]
	internal static void* /* System.Reflection.TypeFilter */ System_Reflection_Module_FilterTypeNameIgnoreCase_Get()
	{
	
		System.Reflection.TypeFilter __returnValue = System.Reflection.Module.FilterTypeNameIgnoreCase;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Destroy")]
	internal static void /* System.Void */ System_Reflection_Module_Destroy(void* /* System.Reflection.Module */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Guid
{
	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Parse")]
	internal static void* /* System.Guid */ System_Guid_Parse(byte* /* System.String */ input, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Guid __returnValue = System.Guid.Parse(inputConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ParseExact")]
	internal static void* /* System.Guid */ System_Guid_ParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Guid __returnValue = System.Guid.ParseExact(inputConverted, formatConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString")]
	internal static byte* /* System.String */ System_Guid_ToString(void* /* System.Guid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_GetHashCode")]
	internal static int /* System.Int32 */ System_Guid_GetHashCode(void* /* System.Guid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Equals")]
	internal static CBool /* System.Boolean */ System_Guid_Equals(void* /* System.Guid */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Equals1")]
	internal static CBool /* System.Boolean */ System_Guid_Equals1(void* /* System.Guid */ __self, void* /* System.Guid */ g, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Guid gConverted = InteropUtils.GetInstance<System.Guid>(g);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(gConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_CompareTo")]
	internal static int /* System.Int32 */ System_Guid_CompareTo(void* /* System.Guid */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_CompareTo1")]
	internal static int /* System.Int32 */ System_Guid_CompareTo1(void* /* System.Guid */ __self, void* /* System.Guid */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Guid valueConverted = InteropUtils.GetInstance<System.Guid>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString1")]
	internal static byte* /* System.String */ System_Guid_ToString1(void* /* System.Guid */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString2")]
	internal static byte* /* System.String */ System_Guid_ToString2(void* /* System.Guid */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Parse1")]
	internal static void* /* System.Guid */ System_Guid_Parse1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Guid __returnValue = System.Guid.Parse(sConverted, providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_NewGuid")]
	internal static void* /* System.Guid */ System_Guid_NewGuid(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = System.Guid.NewGuid();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create")]
	internal static void* /* System.Guid */ System_Guid_Create(uint /* System.UInt32 */ a, ushort /* System.UInt16 */ b, ushort /* System.UInt16 */ c, byte /* System.Byte */ d, byte /* System.Byte */ e, byte /* System.Byte */ f, byte /* System.Byte */ g, byte /* System.Byte */ h, byte /* System.Byte */ i, byte /* System.Byte */ j, byte /* System.Byte */ k, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = new System.Guid(a, b, c, d, e, f, g, h, i, j, k);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create1")]
	internal static void* /* System.Guid */ System_Guid_Create1(int /* System.Int32 */ a, short /* System.Int16 */ b, short /* System.Int16 */ c, byte /* System.Byte */ d, byte /* System.Byte */ e, byte /* System.Byte */ f, byte /* System.Byte */ g, byte /* System.Byte */ h, byte /* System.Byte */ i, byte /* System.Byte */ j, byte /* System.Byte */ k, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = new System.Guid(a, b, c, d, e, f, g, h, i, j, k);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create2")]
	internal static void* /* System.Guid */ System_Guid_Create2(byte* /* System.String */ g, void** /* System.Exception */ __outException)
	{
		System.String gConverted = InteropUtils.ToDotNetString(g);
	
	    try {
			System.Guid __returnValue = new System.Guid(gConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Empty_Get")]
	internal static void* /* System.Guid */ System_Guid_Empty_Get()
	{
	
		System.Guid __returnValue = System.Guid.Empty;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Destroy")]
	internal static void /* System.Void */ System_Guid_Destroy(void* /* System.Guid */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_TypeFilter
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private System_Reflection_TypeFilter(void* context, delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~System_Reflection_TypeFilter()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal System.Reflection.TypeFilter? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_TypeFilter);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.TypeFilter trampoline = (System.Reflection.TypeFilter)System.Delegate.CreateDelegate(typeof(System.Reflection.TypeFilter), this, invocationMethod);

		return trampoline;
	}

	private System.Boolean __InvokeByCallingCFunction(System.Type /* System.Type */ m, System.Object /* System.Object */ filterCriteria)
	{
		void* mConverted = m.AllocateGCHandleAndGetAddress();
		void* filterCriteriaConverted = filterCriteria.AllocateGCHandleAndGetAddress();
	


		return CFunction(Context, mConverted, filterCriteriaConverted).ToBool();
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_TypeFilter(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Destroy")]
	internal static void /* System.Void */ System_Reflection_TypeFilter_Destroy(void* /* System.Reflection.TypeFilter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ResolveEventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Create")]
	internal static void* /* System.ResolveEventArgs */ System_ResolveEventArgs_Create(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.ResolveEventArgs __returnValue = new System.ResolveEventArgs(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Create1")]
	internal static void* /* System.ResolveEventArgs */ System_ResolveEventArgs_Create1(byte* /* System.String */ name, void* /* System.Reflection.Assembly */ requestingAssembly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Assembly requestingAssemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(requestingAssembly);
	
	    try {
			System.ResolveEventArgs __returnValue = new System.ResolveEventArgs(nameConverted, requestingAssemblyConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Name_Get")]
	internal static byte* /* System.String */ System_ResolveEventArgs_Name_Get(void* /* System.ResolveEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ResolveEventArgs __selfConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_RequestingAssembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_ResolveEventArgs_RequestingAssembly_Get(void* /* System.ResolveEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ResolveEventArgs __selfConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.RequestingAssembly;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Destroy")]
	internal static void /* System.Void */ System_ResolveEventArgs_Destroy(void* /* System.ResolveEventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_EventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Create")]
	internal static void* /* System.EventArgs */ System_EventArgs_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.EventArgs __returnValue = new System.EventArgs();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Empty_Get")]
	internal static void* /* System.EventArgs */ System_EventArgs_Empty_Get()
	{
	
		System.EventArgs __returnValue = System.EventArgs.Empty;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Destroy")]
	internal static void /* System.Void */ System_EventArgs_Destroy(void* /* System.EventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Text_Rune
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_CompareTo")]
	internal static int /* System.Int32 */ System_Text_Rune_CompareTo(void* /* System.Text.Rune */ __self, void* /* System.Text.Rune */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Text.Rune otherConverted = InteropUtils.GetInstance<System.Text.Rune>(other);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(otherConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Equals")]
	internal static CBool /* System.Boolean */ System_Text_Rune_Equals(void* /* System.Text.Rune */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Equals1")]
	internal static CBool /* System.Boolean */ System_Text_Rune_Equals1(void* /* System.Text.Rune */ __self, void* /* System.Text.Rune */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Text.Rune otherConverted = InteropUtils.GetInstance<System.Text.Rune>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetHashCode")]
	internal static int /* System.Int32 */ System_Text_Rune_GetHashCode(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetRuneAt")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_GetRuneAt(byte* /* System.String */ input, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.GetRuneAt(inputConverted, index);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsValid")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsValid(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsValid(value);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsValid1")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsValid1(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsValid(value);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToString")]
	internal static byte* /* System.String */ System_Text_Rune_ToString(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetNumericValue")]
	internal static double /* System.Double */ System_Text_Rune_GetNumericValue(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Double __returnValue = System.Text.Rune.GetNumericValue(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetUnicodeCategory")]
	internal static System.Globalization.UnicodeCategory /* System.Globalization.UnicodeCategory */ System_Text_Rune_GetUnicodeCategory(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Globalization.UnicodeCategory __returnValue = System.Text.Rune.GetUnicodeCategory(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.UnicodeCategory);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsControl")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsControl(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsControl(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsDigit")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsDigit(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsDigit(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLetter")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsLetter(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLetter(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLetterOrDigit")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsLetterOrDigit(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLetterOrDigit(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLower")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsLower(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLower(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsNumber")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsNumber(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsNumber(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsPunctuation")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsPunctuation(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsPunctuation(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsSeparator")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsSeparator(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsSeparator(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsSymbol")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsSymbol(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsSymbol(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsUpper")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsUpper(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsUpper(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsWhiteSpace")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsWhiteSpace(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsWhiteSpace(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToLower")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToLower(void* /* System.Text.Rune */ value, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToLower(valueConverted, cultureConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToLowerInvariant")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToLowerInvariant(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToLowerInvariant(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToUpper")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToUpper(void* /* System.Text.Rune */ value, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToUpper(valueConverted, cultureConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToUpperInvariant")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToUpperInvariant(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToUpperInvariant(valueConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create(char /* System.Char */ ch, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(ch);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create1")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create1(char /* System.Char */ highSurrogate, char /* System.Char */ lowSurrogate, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(highSurrogate, lowSurrogate);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create2")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create2(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create3")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create3(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(value);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsAscii_Get")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsAscii_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAscii;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsBmp_Get")]
	internal static CBool /* System.Boolean */ System_Text_Rune_IsBmp_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBmp;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Plane_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Plane_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Plane;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ReplacementChar_Get")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ReplacementChar_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ReplacementChar;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Utf16SequenceLength_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Utf16SequenceLength_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Utf16SequenceLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Utf8SequenceLength_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Utf8SequenceLength_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Utf8SequenceLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Value_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Value_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Destroy")]
	internal static void /* System.Void */ System_Text_Rune_Destroy(void* /* System.Text.Rune */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Globalization_SortKey
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Compare")]
	internal static int /* System.Int32 */ System_Globalization_SortKey_Compare(void* /* System.Globalization.SortKey */ sortkey1, void* /* System.Globalization.SortKey */ sortkey2, void** /* System.Exception */ __outException)
	{
		System.Globalization.SortKey sortkey1Converted = InteropUtils.GetInstance<System.Globalization.SortKey>(sortkey1);
		System.Globalization.SortKey sortkey2Converted = InteropUtils.GetInstance<System.Globalization.SortKey>(sortkey2);
	
	    try {
			System.Int32 __returnValue = System.Globalization.SortKey.Compare(sortkey1Converted, sortkey2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Equals")]
	internal static CBool /* System.Boolean */ System_Globalization_SortKey_Equals(void* /* System.Globalization.SortKey */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_SortKey_GetHashCode(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_ToString")]
	internal static byte* /* System.String */ System_Globalization_SortKey_ToString(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_OriginalString_Get")]
	internal static byte* /* System.String */ System_Globalization_SortKey_OriginalString_Get(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.OriginalString;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Destroy")]
	internal static void /* System.Void */ System_Globalization_SortKey_Destroy(void* /* System.Globalization.SortKey */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_SortVersion
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Equals")]
	internal static CBool /* System.Boolean */ System_Globalization_SortVersion_Equals(void* /* System.Globalization.SortVersion */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Equals1")]
	internal static CBool /* System.Boolean */ System_Globalization_SortVersion_Equals1(void* /* System.Globalization.SortVersion */ __self, void* /* System.Globalization.SortVersion */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
		System.Globalization.SortVersion otherConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_SortVersion_GetHashCode(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Create")]
	internal static void* /* System.Globalization.SortVersion */ System_Globalization_SortVersion_Create(int /* System.Int32 */ fullVersion, void* /* System.Guid */ sortId, void** /* System.Exception */ __outException)
	{
		System.Guid sortIdConverted = InteropUtils.GetInstance<System.Guid>(sortId);
	
	    try {
			System.Globalization.SortVersion __returnValue = new System.Globalization.SortVersion(fullVersion, sortIdConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_FullVersion_Get")]
	internal static int /* System.Int32 */ System_Globalization_SortVersion_FullVersion_Get(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.FullVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_SortId_Get")]
	internal static void* /* System.Guid */ System_Globalization_SortVersion_SortId_Get(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.SortId;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Destroy")]
	internal static void /* System.Void */ System_Globalization_SortVersion_Destroy(void* /* System.Globalization.SortVersion */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_TextInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_TextInfo_Clone(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ReadOnly")]
	internal static void* /* System.Globalization.TextInfo */ System_Globalization_TextInfo_ReadOnly(void* /* System.Globalization.TextInfo */ textInfo, void** /* System.Exception */ __outException)
	{
		System.Globalization.TextInfo textInfoConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(textInfo);
	
	    try {
			System.Globalization.TextInfo __returnValue = System.Globalization.TextInfo.ReadOnly(textInfoConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToLower")]
	internal static char /* System.Char */ System_Globalization_TextInfo_ToLower(void* /* System.Globalization.TextInfo */ __self, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.ToLower(c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToLower1")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToLower1(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToLower(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToUpper")]
	internal static char /* System.Char */ System_Globalization_TextInfo_ToUpper(void* /* System.Globalization.TextInfo */ __self, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.ToUpper(c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToUpper1")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToUpper1(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Globalization_TextInfo_Equals(void* /* System.Globalization.TextInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_GetHashCode(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToString(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToTitleCase")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToTitleCase(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToTitleCase(strConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ANSICodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_ANSICodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ANSICodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_OEMCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_OEMCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.OEMCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_MacCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_MacCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MacCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_EBCDICCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_EBCDICCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.EBCDICCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_LCID_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_CultureName_Get")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_CultureName_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CultureName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_TextInfo_IsReadOnly_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ListSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ListSeparator_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ListSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ListSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_TextInfo_ListSeparator_Set(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			__selfConverted.ListSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_IsRightToLeft_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_TextInfo_IsRightToLeft_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsRightToLeft;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_TextInfo_Destroy(void* /* System.Globalization.TextInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_NumberFormatInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_GetInstance")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_GetInstance(void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.GetInstance(formatProviderConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_NumberFormatInfo_Clone(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_NumberFormatInfo_GetFormat(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_ReadOnly")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_ReadOnly(void* /* System.Globalization.NumberFormatInfo */ nfi, void** /* System.Exception */ __outException)
	{
		System.Globalization.NumberFormatInfo nfiConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(nfi);
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.ReadOnly(nfiConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Create")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = new System.Globalization.NumberFormatInfo();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_InvariantInfo_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_InvariantInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.InvariantInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencyDecimalSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_NumberFormatInfo_IsReadOnly_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencyGroupSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencySymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrentInfo_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_CurrentInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.CurrentInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NaNSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NaNSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NaNSymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NaNSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NaNSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NaNSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_NumberNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentPositivePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentPositivePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentPositivePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentPositivePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentPositivePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentPositivePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NegativeInfinitySymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NegativeInfinitySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeSign_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NegativeSign_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NegativeSign;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeSign_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NegativeSign_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NegativeSign = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NumberDecimalSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NumberGroupSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyPositivePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyPositivePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PositiveInfinitySymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PositiveInfinitySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveSign_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PositiveSign_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PositiveSign;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveSign_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PositiveSign_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PositiveSign = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentDecimalSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentGroupSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentSymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PerMilleSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PerMilleSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PerMilleSymbol;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PerMilleSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PerMilleSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PerMilleSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_DigitSubstitution_Get")]
	internal static System.Globalization.DigitShapes /* System.Globalization.DigitShapes */ System_Globalization_NumberFormatInfo_DigitSubstitution_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Globalization.DigitShapes __returnValue = __selfConverted.DigitSubstitution;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.DigitShapes);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_DigitSubstitution_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_DigitSubstitution_Set(void* /* System.Globalization.NumberFormatInfo */ __self, System.Globalization.DigitShapes /* System.Globalization.DigitShapes */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.DigitSubstitution = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_Destroy(void* /* System.Globalization.NumberFormatInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Globalization_DateTimeFormatInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetInstance")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_GetInstance(void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.GetInstance(providerConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_DateTimeFormatInfo_GetFormat(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_DateTimeFormatInfo_Clone(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetEra")]
	internal static int /* System.Int32 */ System_Globalization_DateTimeFormatInfo_GetEra(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ eraName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
		System.String eraNameConverted = InteropUtils.ToDotNetString(eraName);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetEra(eraNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetEraName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetEraName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetEraName(era);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedEraName(era);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayofweek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedDayName(dayofweek);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetShortestDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetShortestDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayOfWeek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetShortestDayName(dayOfWeek);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayofweek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetDayName(dayofweek);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedMonthName(month);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetMonthName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetMonthName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetMonthName(month);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ReadOnly")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_ReadOnly(void* /* System.Globalization.DateTimeFormatInfo */ dtfi, void** /* System.Exception */ __outException)
	{
		System.Globalization.DateTimeFormatInfo dtfiConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(dtfi);
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.ReadOnly(dtfiConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Create")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = new System.Globalization.DateTimeFormatInfo();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_InvariantInfo_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_InvariantInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.InvariantInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CurrentInfo_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_CurrentInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.CurrentInfo;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AMDesignator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_AMDesignator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AMDesignator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AMDesignator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_AMDesignator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.AMDesignator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Calendar_Get")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_DateTimeFormatInfo_Calendar_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Globalization.Calendar __returnValue = __selfConverted.Calendar;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Calendar_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_Calendar_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.Globalization.Calendar */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.Calendar = InteropUtils.GetInstance<System.Globalization.Calendar>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DateSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_DateSeparator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DateSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DateSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_DateSeparator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.DateSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.FirstDayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.FirstDayOfWeek = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get")]
	internal static System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Globalization.CalendarWeekRule __returnValue = __selfConverted.CalendarWeekRule;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CalendarWeekRule);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CalendarWeekRule = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullDateTimePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.FullDateTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongDatePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_LongDatePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LongDatePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongDatePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_LongDatePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.LongDatePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_LongTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LongTimePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_LongTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.LongTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.MonthDayPattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.MonthDayPattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_PMDesignator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_PMDesignator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PMDesignator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_PMDesignator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_PMDesignator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PMDesignator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.RFC1123Pattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ShortDatePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.ShortDatePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ShortTimePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.ShortTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.SortableDateTimePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_TimeSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_TimeSeparator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TimeSeparator;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_TimeSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_TimeSeparator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.TimeSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.UniversalSortableDateTimePattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.YearMonthPattern;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.YearMonthPattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Globalization_DateTimeFormatInfo_IsReadOnly_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NativeCalendarName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_Destroy(void* /* System.Globalization.DateTimeFormatInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_CharEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Clone")]
	internal static void* /* System.Object */ System_CharEnumerator_Clone(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_MoveNext")]
	internal static CBool /* System.Boolean */ System_CharEnumerator_MoveNext(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Dispose")]
	internal static void /* System.Void */ System_CharEnumerator_Dispose(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Reset")]
	internal static void /* System.Void */ System_CharEnumerator_Reset(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Current_Get")]
	internal static char /* System.Char */ System_CharEnumerator_Current_Get(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.Current;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Destroy")]
	internal static void /* System.Void */ System_CharEnumerator_Destroy(void* /* System.CharEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_StringRuneEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_GetEnumerator")]
	internal static void* /* System.Text.StringRuneEnumerator */ System_Text_StringRuneEnumerator_GetEnumerator(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Text.StringRuneEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_MoveNext")]
	internal static CBool /* System.Boolean */ System_Text_StringRuneEnumerator_MoveNext(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_Current_Get")]
	internal static void* /* System.Text.Rune */ System_Text_StringRuneEnumerator_Current_Get(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Text.Rune __returnValue = __selfConverted.Current;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_Destroy")]
	internal static void /* System.Void */ System_Text_StringRuneEnumerator_Destroy(void* /* System.Text.StringRuneEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Text_CompositeFormat
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Parse")]
	internal static void* /* System.Text.CompositeFormat */ System_Text_CompositeFormat_Parse(byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Text.CompositeFormat __returnValue = System.Text.CompositeFormat.Parse(formatConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Format_Get")]
	internal static byte* /* System.String */ System_Text_CompositeFormat_Format_Get(void* /* System.Text.CompositeFormat */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.CompositeFormat __selfConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Format;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Destroy")]
	internal static void /* System.Void */ System_Text_CompositeFormat_Destroy(void* /* System.Text.CompositeFormat */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Text_Encoding
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_RegisterProvider")]
	internal static void /* System.Void */ System_Text_Encoding_RegisterProvider(void* /* System.Text.EncodingProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Text.EncodingProvider providerConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(provider);
	
	    try {
			System.Text.Encoding.RegisterProvider(providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding(int /* System.Int32 */ codepage, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(codepage);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding1")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding1(int /* System.Int32 */ codepage, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(codepage, encoderFallbackConverted, decoderFallbackConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding2")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding2(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding3")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding3(byte* /* System.String */ name, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(nameConverted, encoderFallbackConverted, decoderFallbackConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Clone")]
	internal static void* /* System.Object */ System_Text_Encoding_Clone(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount1")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount1(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(sConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsAlwaysNormalized")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsAlwaysNormalized(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlwaysNormalized();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsAlwaysNormalized1")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsAlwaysNormalized1(void* /* System.Text.Encoding */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ form, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlwaysNormalized(form);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetDecoder")]
	internal static void* /* System.Text.Decoder */ System_Text_Encoding_GetDecoder(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.Decoder __returnValue = __selfConverted.GetDecoder();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoder")]
	internal static void* /* System.Text.Encoder */ System_Text_Encoding_GetEncoder(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.Encoder __returnValue = __selfConverted.GetEncoder();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetMaxByteCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetMaxByteCount(void* /* System.Text.Encoding */ __self, int /* System.Int32 */ charCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMaxByteCount(charCount);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetMaxCharCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetMaxCharCount(void* /* System.Text.Encoding */ __self, int /* System.Int32 */ byteCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMaxCharCount(byteCount);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Equals")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_Equals(void* /* System.Text.Encoding */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetHashCode")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetHashCode(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_CreateTranscodingStream")]
	internal static void* /* System.IO.Stream */ System_Text_Encoding_CreateTranscodingStream(void* /* System.IO.Stream */ innerStream, void* /* System.Text.Encoding */ innerStreamEncoding, void* /* System.Text.Encoding */ outerStreamEncoding, CBool /* System.Boolean */ leaveOpen, void** /* System.Exception */ __outException)
	{
		System.IO.Stream innerStreamConverted = InteropUtils.GetInstance<System.IO.Stream>(innerStream);
		System.Text.Encoding innerStreamEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(innerStreamEncoding);
		System.Text.Encoding outerStreamEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(outerStreamEncoding);
		System.Boolean leaveOpenConverted = leaveOpen.ToBool();
	
	    try {
			System.IO.Stream __returnValue = System.Text.Encoding.CreateTranscodingStream(innerStreamConverted, innerStreamEncodingConverted, outerStreamEncodingConverted, leaveOpenConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Default_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Default_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Default;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_BodyName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_BodyName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.BodyName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncodingName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_EncodingName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EncodingName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_HeaderName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_HeaderName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.HeaderName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_WebName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_WebName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.WebName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_WindowsCodePage_Get")]
	internal static int /* System.Int32 */ System_Text_Encoding_WindowsCodePage_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.WindowsCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsBrowserDisplay_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsBrowserDisplay_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBrowserDisplay;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsBrowserSave_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsBrowserSave_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBrowserSave;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsMailNewsDisplay_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsMailNewsDisplay_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMailNewsDisplay;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsMailNewsSave_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsMailNewsSave_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMailNewsSave;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsSingleByte_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsSingleByte_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSingleByte;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncoderFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_Encoding_EncoderFallback_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.EncoderFallback __returnValue = __selfConverted.EncoderFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncoderFallback_Set")]
	internal static void /* System.Void */ System_Text_Encoding_EncoderFallback_Set(void* /* System.Text.Encoding */ __self, void* /* System.Text.EncoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			__selfConverted.EncoderFallback = InteropUtils.GetInstance<System.Text.EncoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_DecoderFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_Encoding_DecoderFallback_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.DecoderFallback __returnValue = __selfConverted.DecoderFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_DecoderFallback_Set")]
	internal static void /* System.Void */ System_Text_Encoding_DecoderFallback_Set(void* /* System.Text.Encoding */ __self, void* /* System.Text.DecoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			__selfConverted.DecoderFallback = InteropUtils.GetInstance<System.Text.DecoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsReadOnly_Get")]
	internal static CBool /* System.Boolean */ System_Text_Encoding_IsReadOnly_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_ASCII_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_ASCII_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.ASCII;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Latin1_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Latin1_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Latin1;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_CodePage_Get")]
	internal static int /* System.Int32 */ System_Text_Encoding_CodePage_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Unicode_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Unicode_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Unicode;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_BigEndianUnicode_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_BigEndianUnicode_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.BigEndianUnicode;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF7_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF7_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF7;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF8_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF8_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF8;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF32_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF32_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF32;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Destroy")]
	internal static void /* System.Void */ System_Text_Encoding_Destroy(void* /* System.Text.Encoding */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncodingProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding(void* /* System.Text.EncodingProvider */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(nameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding1")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding1(void* /* System.Text.EncodingProvider */ __self, int /* System.Int32 */ codepage, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(codepage);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding2")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding2(void* /* System.Text.EncodingProvider */ __self, byte* /* System.String */ name, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(nameConverted, encoderFallbackConverted, decoderFallbackConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding3")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding3(void* /* System.Text.EncodingProvider */ __self, int /* System.Int32 */ codepage, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(codepage, encoderFallbackConverted, decoderFallbackConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_Destroy")]
	internal static void /* System.Void */ System_Text_EncodingProvider_Destroy(void* /* System.Text.EncodingProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncoderFallback
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_CreateFallbackBuffer")]
	internal static void* /* System.Text.EncoderFallbackBuffer */ System_Text_EncoderFallback_CreateFallbackBuffer(void* /* System.Text.EncoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(__self);
	
	
	    try {
			System.Text.EncoderFallbackBuffer __returnValue = __selfConverted.CreateFallbackBuffer();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_ReplacementFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_EncoderFallback_ReplacementFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.EncoderFallback __returnValue = System.Text.EncoderFallback.ReplacementFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_ExceptionFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_EncoderFallback_ExceptionFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.EncoderFallback __returnValue = System.Text.EncoderFallback.ExceptionFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_MaxCharCount_Get")]
	internal static int /* System.Int32 */ System_Text_EncoderFallback_MaxCharCount_Get(void* /* System.Text.EncoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxCharCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_Destroy")]
	internal static void /* System.Void */ System_Text_EncoderFallback_Destroy(void* /* System.Text.EncoderFallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncoderFallbackBuffer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Fallback")]
	internal static CBool /* System.Boolean */ System_Text_EncoderFallbackBuffer_Fallback(void* /* System.Text.EncoderFallbackBuffer */ __self, char /* System.Char */ charUnknown, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Fallback(charUnknown, index);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Fallback1")]
	internal static CBool /* System.Boolean */ System_Text_EncoderFallbackBuffer_Fallback1(void* /* System.Text.EncoderFallbackBuffer */ __self, char /* System.Char */ charUnknownHigh, char /* System.Char */ charUnknownLow, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Fallback(charUnknownHigh, charUnknownLow, index);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_GetNextChar")]
	internal static char /* System.Char */ System_Text_EncoderFallbackBuffer_GetNextChar(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.GetNextChar();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_MovePrevious")]
	internal static CBool /* System.Boolean */ System_Text_EncoderFallbackBuffer_MovePrevious(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MovePrevious();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Reset")]
	internal static void /* System.Void */ System_Text_EncoderFallbackBuffer_Reset(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Remaining_Get")]
	internal static int /* System.Int32 */ System_Text_EncoderFallbackBuffer_Remaining_Get(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Remaining;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Destroy")]
	internal static void /* System.Void */ System_Text_EncoderFallbackBuffer_Destroy(void* /* System.Text.EncoderFallbackBuffer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_DecoderFallback
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_CreateFallbackBuffer")]
	internal static void* /* System.Text.DecoderFallbackBuffer */ System_Text_DecoderFallback_CreateFallbackBuffer(void* /* System.Text.DecoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(__self);
	
	
	    try {
			System.Text.DecoderFallbackBuffer __returnValue = __selfConverted.CreateFallbackBuffer();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_ReplacementFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_DecoderFallback_ReplacementFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.DecoderFallback __returnValue = System.Text.DecoderFallback.ReplacementFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_ExceptionFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_DecoderFallback_ExceptionFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.DecoderFallback __returnValue = System.Text.DecoderFallback.ExceptionFallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_MaxCharCount_Get")]
	internal static int /* System.Int32 */ System_Text_DecoderFallback_MaxCharCount_Get(void* /* System.Text.DecoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxCharCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_Destroy")]
	internal static void /* System.Void */ System_Text_DecoderFallback_Destroy(void* /* System.Text.DecoderFallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_DecoderFallbackBuffer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_GetNextChar")]
	internal static char /* System.Char */ System_Text_DecoderFallbackBuffer_GetNextChar(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.GetNextChar();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_MovePrevious")]
	internal static CBool /* System.Boolean */ System_Text_DecoderFallbackBuffer_MovePrevious(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MovePrevious();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Reset")]
	internal static void /* System.Void */ System_Text_DecoderFallbackBuffer_Reset(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Remaining_Get")]
	internal static int /* System.Int32 */ System_Text_DecoderFallbackBuffer_Remaining_Get(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Remaining;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Destroy")]
	internal static void /* System.Void */ System_Text_DecoderFallbackBuffer_Destroy(void* /* System.Text.DecoderFallbackBuffer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_Decoder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Reset")]
	internal static void /* System.Void */ System_Text_Decoder_Reset(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Fallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_Decoder_Fallback_Get(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			System.Text.DecoderFallback __returnValue = __selfConverted.Fallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Fallback_Set")]
	internal static void /* System.Void */ System_Text_Decoder_Fallback_Set(void* /* System.Text.Decoder */ __self, void* /* System.Text.DecoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			__selfConverted.Fallback = InteropUtils.GetInstance<System.Text.DecoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_FallbackBuffer_Get")]
	internal static void* /* System.Text.DecoderFallbackBuffer */ System_Text_Decoder_FallbackBuffer_Get(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			System.Text.DecoderFallbackBuffer __returnValue = __selfConverted.FallbackBuffer;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Destroy")]
	internal static void /* System.Void */ System_Text_Decoder_Destroy(void* /* System.Text.Decoder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_Encoder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Reset")]
	internal static void /* System.Void */ System_Text_Encoder_Reset(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Fallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_Encoder_Fallback_Get(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			System.Text.EncoderFallback __returnValue = __selfConverted.Fallback;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Fallback_Set")]
	internal static void /* System.Void */ System_Text_Encoder_Fallback_Set(void* /* System.Text.Encoder */ __self, void* /* System.Text.EncoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			__selfConverted.Fallback = InteropUtils.GetInstance<System.Text.EncoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_FallbackBuffer_Get")]
	internal static void* /* System.Text.EncoderFallbackBuffer */ System_Text_Encoder_FallbackBuffer_Get(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			System.Text.EncoderFallbackBuffer __returnValue = __selfConverted.FallbackBuffer;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Destroy")]
	internal static void /* System.Void */ System_Text_Encoder_Destroy(void* /* System.Text.Encoder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Runtime_InteropServices_StructLayoutAttribute
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Create")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Runtime_InteropServices_StructLayoutAttribute_Create(System.Runtime.InteropServices.LayoutKind /* System.Runtime.InteropServices.LayoutKind */ layoutKind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = new System.Runtime.InteropServices.StructLayoutAttribute(layoutKind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Create1")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Runtime_InteropServices_StructLayoutAttribute_Create1(short /* System.Int16 */ layoutKind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = new System.Runtime.InteropServices.StructLayoutAttribute(layoutKind);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Value_Get")]
	internal static System.Runtime.InteropServices.LayoutKind /* System.Runtime.InteropServices.LayoutKind */ System_Runtime_InteropServices_StructLayoutAttribute_Value_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
	    try {
			System.Runtime.InteropServices.LayoutKind __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Runtime.InteropServices.LayoutKind);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Int32 __returnValue = __selfConverted.Pack;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, int /* System.Int32 */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.Pack = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Size_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_StructLayoutAttribute_Size_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Int32 __returnValue = __selfConverted.Size;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Size_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Size_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, int /* System.Int32 */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.Size = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get")]
	internal static System.Runtime.InteropServices.CharSet /* System.Runtime.InteropServices.CharSet */ System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Runtime.InteropServices.CharSet __returnValue = __selfConverted.CharSet;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, System.Runtime.InteropServices.CharSet /* System.Runtime.InteropServices.CharSet */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.CharSet = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Destroy")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Destroy(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Attribute
{
	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined1")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined1(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute1")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute1(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined2")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined2(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined3")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined3(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute2")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute2(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute3")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute3(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined4")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined4(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined5")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined5(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute4")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute4(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute5")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute5(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined6")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined6(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined7")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefined7(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute6")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute6(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute7")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute7(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, CBool /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Equals")]
	internal static CBool /* System.Boolean */ System_Attribute_Equals(void* /* System.Attribute */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetHashCode")]
	internal static int /* System.Int32 */ System_Attribute_GetHashCode(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Match")]
	internal static CBool /* System.Boolean */ System_Attribute_Match(void* /* System.Attribute */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Match(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefaultAttribute")]
	internal static CBool /* System.Boolean */ System_Attribute_IsDefaultAttribute(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefaultAttribute();
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_TypeId_Get")]
	internal static void* /* System.Object */ System_Attribute_TypeId_Get(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.TypeId;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Destroy")]
	internal static void /* System.Void */ System_Attribute_Destroy(void* /* System.Attribute */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Reflection_ConstructorInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_ConstructorInfo_Equals(void* /* System.Reflection.ConstructorInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_ConstructorInfo_GetHashCode(void* /* System.Reflection.ConstructorInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_ConstructorInfo_MemberType_Get(void* /* System.Reflection.ConstructorInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_ConstructorName_Get")]
	internal static byte* /* System.String */ System_Reflection_ConstructorInfo_ConstructorName_Get()
	{
	
		System.String __returnValue = System.Reflection.ConstructorInfo.ConstructorName;
		byte* _returnValueNative = __returnValue.CopyToCString();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_TypeConstructorName_Get")]
	internal static byte* /* System.String */ System_Reflection_ConstructorInfo_TypeConstructorName_Get()
	{
	
		System.String __returnValue = System.Reflection.ConstructorInfo.TypeConstructorName;
		byte* _returnValueNative = __returnValue.CopyToCString();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ConstructorInfo_Destroy(void* /* System.Reflection.ConstructorInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_EventInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetAddMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetAddMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetAddMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRemoveMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRemoveMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRemoveMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRaiseMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRaiseMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRaiseMethod();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetAddMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetAddMethod1(void* /* System.Reflection.EventInfo */ __self, CBool /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetAddMethod(nonPublicConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRemoveMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRemoveMethod1(void* /* System.Reflection.EventInfo */ __self, CBool /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRemoveMethod(nonPublicConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRaiseMethod1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRaiseMethod1(void* /* System.Reflection.EventInfo */ __self, CBool /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRaiseMethod(nonPublicConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_AddEventHandler")]
	internal static void /* System.Void */ System_Reflection_EventInfo_AddEventHandler(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ target, void* /* System.Delegate */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Delegate handlerConverted = InteropUtils.GetInstance<System.Delegate>(handler);
	
	    try {
			__selfConverted.AddEventHandler(targetConverted, handlerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RemoveEventHandler")]
	internal static void /* System.Void */ System_Reflection_EventInfo_RemoveEventHandler(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ target, void* /* System.Delegate */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Delegate handlerConverted = InteropUtils.GetInstance<System.Delegate>(handler);
	
	    try {
			__selfConverted.RemoveEventHandler(targetConverted, handlerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Equals")]
	internal static CBool /* System.Boolean */ System_Reflection_EventInfo_Equals(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_EventInfo_GetHashCode(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_EventInfo_MemberType_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Attributes_Get")]
	internal static System.Reflection.EventAttributes /* System.Reflection.EventAttributes */ System_Reflection_EventInfo_Attributes_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.EventAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.EventAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_IsSpecialName_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_EventInfo_IsSpecialName_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_AddMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_AddMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.AddMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RemoveMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_RemoveMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.RemoveMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RaiseMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_RaiseMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.RaiseMethod;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_IsMulticast_Get")]
	internal static CBool /* System.Boolean */ System_Reflection_EventInfo_IsMulticast_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMulticast;
			CBool _returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return false.ToCBool();
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_EventHandlerType_Get")]
	internal static void* /* System.Type */ System_Reflection_EventInfo_EventHandlerType_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.EventHandlerType;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_EventInfo_Destroy(void* /* System.Reflection.EventInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_InterfaceMapping
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetType_Get")]
	internal static void* /* System.Type */ System_Reflection_InterfaceMapping_TargetType_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Type __returnValue = __selfConverted.TargetType;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetType_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_TargetType_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Type */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.TargetType = InteropUtils.GetInstance<System.Type>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceType_Get")]
	internal static void* /* System.Type */ System_Reflection_InterfaceMapping_InterfaceType_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Type __returnValue = __selfConverted.InterfaceType;
		void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return _returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceType_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_InterfaceType_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Type */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.InterfaceType = InteropUtils.GetInstance<System.Type>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_Destroy")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_Destroy(void* /* System.Reflection.InterfaceMapping */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MemberFilter
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private System_Reflection_MemberFilter(void* context, delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~System_Reflection_MemberFilter()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal System.Reflection.MemberFilter? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_MemberFilter);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.MemberFilter trampoline = (System.Reflection.MemberFilter)System.Delegate.CreateDelegate(typeof(System.Reflection.MemberFilter), this, invocationMethod);

		return trampoline;
	}

	private System.Boolean __InvokeByCallingCFunction(System.Reflection.MemberInfo /* System.Reflection.MemberInfo */ m, System.Object /* System.Object */ filterCriteria)
	{
		void* mConverted = m.AllocateGCHandleAndGetAddress();
		void* filterCriteriaConverted = filterCriteria.AllocateGCHandleAndGetAddress();
	


		return CFunction(Context, mConverted, filterCriteriaConverted).ToBool();
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, CBool /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_MemberFilter(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Destroy")]
	internal static void /* System.Void */ System_Reflection_MemberFilter_Destroy(void* /* System.Reflection.MemberFilter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_IAnimal
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Eat")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_IAnimal_Eat(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self, byte* /* System.String */ food, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.IAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.IAnimal>(__self);
	
		System.String foodConverted = InteropUtils.ToDotNetString(food);
	
	    try {
			System.String __returnValue = __selfConverted.Eat(foodConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.IAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.IAnimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_BaseAnimal
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self, byte* /* System.String */ food, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.BaseAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.BaseAnimal>(__self);
	
		System.String foodConverted = InteropUtils.ToDotNetString(food);
	
	    try {
			System.String __returnValue = __selfConverted.Eat(foodConverted);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.BaseAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.BaseAnimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Cat
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Cat_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.Cat */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Cat __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Cat>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get()
	{
	
		System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Cat.CatName;
		byte* _returnValueNative = __returnValue.CopyToCString();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Cat_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Cat */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Dog
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Dog_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.Dog */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Dog __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Dog>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get()
	{
	
		System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Dog.DogName;
		byte* _returnValueNative = __returnValue.CopyToCString();
		return _returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Dog_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Dog */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class NativeAOT_CodeGeneratorInputSample_Person
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetNiceLevelString();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetWelcomeMessage();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_AddChild")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_AddChild(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person */ child, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person childConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(child);
	
	    try {
			__selfConverted.AddChild(childConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_RemoveChild")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_RemoveChild(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person */ child, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person childConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(child);
	
	    try {
			__selfConverted.RemoveChild(childConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.RemoveChildAt(index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_ChildAt")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_ChildAt(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = __selfConverted.ChildAt(index);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_ChangeAge")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_ChangeAge(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate */ newAgeProvider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate newAgeProviderConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate>(newAgeProvider);
	
	    try {
			__selfConverted.ChangeAge(newAgeProviderConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_Create(byte* /* System.String */ firstName, byte* /* System.String */ lastName, int /* System.Int32 */ age, void** /* System.Exception */ __outException)
	{
		System.String firstNameConverted = InteropUtils.ToDotNetString(firstName);
		System.String lastNameConverted = InteropUtils.ToDotNetString(lastName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = new NativeAOT.CodeGeneratorInputSample.Person(firstNameConverted, lastNameConverted, age);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Create1")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_Create1(byte* /* System.String */ firstName, byte* /* System.String */ lastName, void** /* System.Exception */ __outException)
	{
		System.String firstNameConverted = InteropUtils.ToDotNetString(firstName);
		System.String lastNameConverted = InteropUtils.ToDotNetString(lastName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = new NativeAOT.CodeGeneratorInputSample.Person(firstNameConverted, lastNameConverted);
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FirstName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.FirstName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_LastName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_LastName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LastName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_LastName_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_LastName_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.LastName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Age_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_Age_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Age;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Age_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Age_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.Age = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_ChildrenAsArray_Get")]
	internal static void* /* System.Array */ NativeAOT_CodeGeneratorInputSample_Person_ChildrenAsArray_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.Array __returnValue = __selfConverted.ChildrenAsArray;
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get")]
	internal static NativeAOT.CodeGeneratorInputSample.NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.NiceLevels __returnValue = __selfConverted.NiceLevel;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(NativeAOT.CodeGeneratorInputSample.NiceLevels);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, NativeAOT.CodeGeneratorInputSample.NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.NiceLevel = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FullName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_FullName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberOfChildren;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get()
	{
	
		System.Int32 __returnValue = NativeAOT.CodeGeneratorInputSample.Person.DEFAULT_AGE;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Set(int /* System.Int32 */ __value)
	{
	
		NativeAOT.CodeGeneratorInputSample.Person.DEFAULT_AGE = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get()
	{
	
		System.Int32 __returnValue = NativeAOT.CodeGeneratorInputSample.Person.AGE_WHEN_BORN;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate(void* context, delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate), this, invocationMethod);

		return trampoline;
	}

	private System.Int32 __InvokeByCallingCFunction()
	{
	


		return CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Person_Extensions
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge(void* /* NativeAOT.CodeGeneratorInputSample.Person */ person, int /* System.Int32 */ byYears, void** /* System.Exception */ __outException)
	{
		NativeAOT.CodeGeneratorInputSample.Person personConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(person);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person_Extensions.IncreaseAge(personConverted, byYears);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person_Extensions */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class NativeAOT_CodeGeneratorInputSample_TestClass
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_CallSimpleDelegate")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_CallSimpleDelegate(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void* /* NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate */ simpleDelegate, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate simpleDelegateConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate>(simpleDelegate);
	
	    try {
			__selfConverted.CallSimpleDelegate(simpleDelegateConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SayHello")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_SayHello(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			__selfConverted.SayHello();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SayHello1")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_SayHello1(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.SayHello(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetHello")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_TestClass_GetHello(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetHello();
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetDate")]
	internal static void* /* System.DateTime */ NativeAOT_CodeGeneratorInputSample_TestClass_GetDate(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.GetDate();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Add")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_Add(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int /* System.Int32 */ number1, int /* System.Int32 */ number2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Add(number1, number2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Divide")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_Divide(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int /* System.Int32 */ number1, int /* System.Int32 */ number2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Divide(number1, number2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName(NativeAOT.CodeGeneratorInputSample.TestEnum /* NativeAOT.CodeGeneratorInputSample.TestEnum */ testEnum, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = NativeAOT.CodeGeneratorInputSample.TestClass.GetTestEnumName(testEnum);
			byte* _returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ NativeAOT_CodeGeneratorInputSample_TestClass_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			NativeAOT.CodeGeneratorInputSample.TestClass __returnValue = new NativeAOT.CodeGeneratorInputSample.TestClass();
			void* _returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return _returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate
{
	public void* Context { get; }
	public delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	public delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	~NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	internal NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_SimpleDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.TestClass.SimpleDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// </APIs>
